
F303_PlanA_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a64  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c34  08007c34  00020420  2**0
                  CONTENTS
  4 .ARM          00000000  08007c34  08007c34  00020420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c34  08007c34  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c38  08007c38  00017c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  08007c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000420  0800805c  00020420  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  0800805c  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001476f  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024dd  00000000  00000000  00034bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000370a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  000380d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002169f  00000000  00000000  00039028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015375  00000000  00000000  0005a6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc9bc  00000000  00000000  0006fa3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c3f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e4  00000000  00000000  0013c44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000420 	.word	0x20000420
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007be4 	.word	0x08007be4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000424 	.word	0x20000424
 80001d4:	08007be4 	.word	0x08007be4

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <Crc16>:
    0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
    0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040};

unsigned int Crc16(unsigned char *pcBlock, unsigned int len){
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
    unsigned int crc = 0xFFFF;
 800084e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000852:	60fb      	str	r3, [r7, #12]
    while (len--) crc = (crc >> 8) ^ Crc16Table[(crc & 0xFF) ^ *pcBlock++];
 8000854:	e00d      	b.n	8000872 <Crc16+0x2e>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	0a1a      	lsrs	r2, r3, #8
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	b2d9      	uxtb	r1, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1c58      	adds	r0, r3, #1
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	404b      	eors	r3, r1
 8000868:	4908      	ldr	r1, [pc, #32]	; (800088c <Crc16+0x48>)
 800086a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800086e:	4053      	eors	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	603a      	str	r2, [r7, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1ec      	bne.n	8000856 <Crc16+0x12>
    return crc;
 800087c:	68fb      	ldr	r3, [r7, #12]
    }
 800087e:	4618      	mov	r0, r3
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000014 	.word	0x20000014

08000890 <IDmyMB>:

void IDmyMB (void){
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	mb_data[MY_ID]=0;
 8000894:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <IDmyMB+0xb0>)
 8000896:	2200      	movs	r2, #0
 8000898:	801a      	strh	r2, [r3, #0]

	mb_data[MY_ID]=(~( 0xff00 |
//									7							6						5							4
						((GPIOB->IDR&(1<<8))>>1)|((GPIOB->IDR&(1<<9))>>3)|((GPIOC->IDR&(1<<13))>>8)|((GPIOC->IDR&(1<<0))<<4)|
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <IDmyMB+0xb4>)
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	085b      	lsrs	r3, r3, #1
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <IDmyMB+0xb4>)
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	08db      	lsrs	r3, r3, #3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <IDmyMB+0xb8>)
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f003 0320 	and.w	r3, r3, #32
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <IDmyMB+0xb8>)
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b29a      	uxth	r2, r3
//									3							2						1							0
						((GPIOC->IDR&(1<<1))<<2)|((GPIOC->IDR&(1<<2))<<0)|((GPIOC->IDR&(1<<3))>>2)|((GPIOA->IDR&(1<<0))<<0) ) );
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <IDmyMB+0xb8>)
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
						((GPIOB->IDR&(1<<8))>>1)|((GPIOB->IDR&(1<<9))>>3)|((GPIOC->IDR&(1<<13))>>8)|((GPIOC->IDR&(1<<0))<<4)|
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b29a      	uxth	r2, r3
						((GPIOC->IDR&(1<<1))<<2)|((GPIOC->IDR&(1<<2))<<0)|((GPIOC->IDR&(1<<3))>>2)|((GPIOA->IDR&(1<<0))<<0) ) );
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <IDmyMB+0xb8>)
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	b29b      	uxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b29a      	uxth	r2, r3
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <IDmyMB+0xb8>)
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	089b      	lsrs	r3, r3, #2
 800090a:	b29b      	uxth	r3, r3
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	b29b      	uxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b29a      	uxth	r2, r3
 8000916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	b29b      	uxth	r3, r3
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	b29b      	uxth	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b29b      	uxth	r3, r3
 8000928:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800092c:	b29b      	uxth	r3, r3
	mb_data[MY_ID]=(~( 0xff00 |
 800092e:	43db      	mvns	r3, r3
 8000930:	b29a      	uxth	r2, r3
 8000932:	4b03      	ldr	r3, [pc, #12]	; (8000940 <IDmyMB+0xb0>)
 8000934:	801a      	strh	r2, [r3, #0]
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	2000043c 	.word	0x2000043c
 8000944:	48000400 	.word	0x48000400
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//................. Таймерs
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM1){		// каждые 0,075мс
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a90      	ldr	r2, [pc, #576]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d119      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x46>
		MB_counT35++;  //до ~23 (1,75)
 800095e:	4b90      	ldr	r3, [pc, #576]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	b29b      	uxth	r3, r3
 8000964:	3301      	adds	r3, #1
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b8d      	ldr	r3, [pc, #564]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800096a:	801a      	strh	r2, [r3, #0]
		MB3_counT35++;  //до ~23 (1,75)
 800096c:	4b8d      	ldr	r3, [pc, #564]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	b29b      	uxth	r3, r3
 8000972:	3301      	adds	r3, #1
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b8b      	ldr	r3, [pc, #556]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000978:	801a      	strh	r2, [r3, #0]
		MB3_count_Tx++; //счётчик периода запроса
 800097a:	4b8b      	ldr	r3, [pc, #556]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b89      	ldr	r3, [pc, #548]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000984:	801a      	strh	r2, [r3, #0]
		provSvyazCount2++;
 8000986:	4b89      	ldr	r3, [pc, #548]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b87      	ldr	r3, [pc, #540]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000990:	801a      	strh	r2, [r3, #0]
	} //end каждые 0,075мс

	if(htim->Instance==TIM3){		// каждые 10 мс
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a86      	ldr	r2, [pc, #536]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000998:	4293      	cmp	r3, r2
 800099a:	f040 8312 	bne.w	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x676>
		timUzapis++;					// время измерения напряжения
 800099e:	4b85      	ldr	r3, [pc, #532]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b83      	ldr	r3, [pc, #524]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80009a8:	801a      	strh	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOB, OutRezerv1_Pin);	// мигание кнопок М и Б
		//if (flagTest1++>=2000) {flagTest1=0;}		//времянка
		//////////////////  СиГНАЛиЗАТОР  /////////////////////////////////////
		#define SIGNAL1 14
		#define SIGNAL2 100
		if (signal_0) {			//сигнализировать "Отмена" или "Отключить"
 80009aa:	4b83      	ldr	r3, [pc, #524]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d040      	beq.n	8000a34 <HAL_TIM_PeriodElapsedCallback+0xe8>
			if      ( (out_Sign_count1>0) && (out_Sign_count1<=SIGNAL1) ) {GPIOB->ODR|=(1<<4);}		// л1
 80009b2:	4b82      	ldr	r3, [pc, #520]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00a      	beq.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x84>
 80009ba:	4b80      	ldr	r3, [pc, #512]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	2b0e      	cmp	r3, #14
 80009c0:	d806      	bhi.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x84>
 80009c2:	4b7f      	ldr	r3, [pc, #508]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a7e      	ldr	r2, [pc, #504]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	e02a      	b.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0xda>
			else if ( (out_Sign_count1>SIGNAL1) && (out_Sign_count1<=SIGNAL2) ) {GPIOB->ODR&=~(1<<4);}	// л0
 80009d0:	4b7a      	ldr	r3, [pc, #488]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	2b0e      	cmp	r3, #14
 80009d6:	d90a      	bls.n	80009ee <HAL_TIM_PeriodElapsedCallback+0xa2>
 80009d8:	4b78      	ldr	r3, [pc, #480]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b64      	cmp	r3, #100	; 0x64
 80009de:	d806      	bhi.n	80009ee <HAL_TIM_PeriodElapsedCallback+0xa2>
 80009e0:	4b77      	ldr	r3, [pc, #476]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	4a76      	ldr	r2, [pc, #472]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80009e6:	f023 0310 	bic.w	r3, r3, #16
 80009ea:	6153      	str	r3, [r2, #20]
 80009ec:	e01b      	b.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0xda>
			else if ( (out_Sign_count1>SIGNAL2) && (out_Sign_count1<=(SIGNAL1+SIGNAL2)) ) {GPIOB->ODR|=(1<<4);}	// л1
 80009ee:	4b73      	ldr	r3, [pc, #460]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2b64      	cmp	r3, #100	; 0x64
 80009f4:	d90a      	bls.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0xc0>
 80009f6:	4b71      	ldr	r3, [pc, #452]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	2b72      	cmp	r3, #114	; 0x72
 80009fc:	d806      	bhi.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0xc0>
 80009fe:	4b70      	ldr	r3, [pc, #448]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a6f      	ldr	r2, [pc, #444]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a04:	f043 0310 	orr.w	r3, r3, #16
 8000a08:	6153      	str	r3, [r2, #20]
 8000a0a:	e00c      	b.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0xda>
			else if (out_Sign_count1>(SIGNAL1+SIGNAL2)) {GPIOB->ODR&=~(1<<4); signal_0=0;}				// л0
 8000a0c:	4b6b      	ldr	r3, [pc, #428]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	2b72      	cmp	r3, #114	; 0x72
 8000a12:	d908      	bls.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0xda>
 8000a14:	4b6a      	ldr	r3, [pc, #424]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	4a69      	ldr	r2, [pc, #420]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a1a:	f023 0310 	bic.w	r3, r3, #16
 8000a1e:	6153      	str	r3, [r2, #20]
 8000a20:	4b65      	ldr	r3, [pc, #404]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
			out_Sign_count1++;
 8000a26:	4b65      	ldr	r3, [pc, #404]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a30:	801a      	strh	r2, [r3, #0]
 8000a32:	e047      	b.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x178>
		}
		//else {out_Sign_count1=0;}
		else if (signal_1) {			//сигнализировать "Принять" или "Включить"
 8000a34:	4b63      	ldr	r3, [pc, #396]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d040      	beq.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x172>
			if      ( (out_Sign_count1>0) && (out_Sign_count1<=SIGNAL1) ) {GPIOB->ODR|=(1<<4);}		// л1
 8000a3c:	4b5f      	ldr	r3, [pc, #380]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00a      	beq.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x10e>
 8000a44:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	2b0e      	cmp	r3, #14
 8000a4a:	d806      	bhi.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x10e>
 8000a4c:	4b5c      	ldr	r3, [pc, #368]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a5b      	ldr	r2, [pc, #364]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6153      	str	r3, [r2, #20]
 8000a58:	e02a      	b.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x164>
			else if ( (out_Sign_count1>SIGNAL1) && (out_Sign_count1<=SIGNAL2) ) {GPIOB->ODR&=~(1<<4);}	// л0
 8000a5a:	4b58      	ldr	r3, [pc, #352]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	2b0e      	cmp	r3, #14
 8000a60:	d90a      	bls.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8000a62:	4b56      	ldr	r3, [pc, #344]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	2b64      	cmp	r3, #100	; 0x64
 8000a68:	d806      	bhi.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8000a6a:	4b55      	ldr	r3, [pc, #340]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a54      	ldr	r2, [pc, #336]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a70:	f023 0310 	bic.w	r3, r3, #16
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	e01b      	b.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x164>
			else if ( (out_Sign_count1>SIGNAL2) && (out_Sign_count1<=(2*SIGNAL2)) ) {GPIOB->ODR|=(1<<4);}	// л1
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b64      	cmp	r3, #100	; 0x64
 8000a7e:	d90a      	bls.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x14a>
 8000a80:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	2bc8      	cmp	r3, #200	; 0xc8
 8000a86:	d806      	bhi.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x14a>
 8000a88:	4b4d      	ldr	r3, [pc, #308]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6153      	str	r3, [r2, #20]
 8000a94:	e00c      	b.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x164>
			else if (out_Sign_count1>(2*SIGNAL2)) {GPIOB->ODR&=~(1<<4); signal_1=0;}				// л0
 8000a96:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	2bc8      	cmp	r3, #200	; 0xc8
 8000a9c:	d908      	bls.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x164>
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000aa4:	f023 0310 	bic.w	r3, r3, #16
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
			out_Sign_count1++;
 8000ab0:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000aba:	801a      	strh	r2, [r3, #0]
 8000abc:	e002      	b.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x178>
		}
		else {out_Sign_count1=0;}
 8000abe:	4b3f      	ldr	r3, [pc, #252]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	801a      	strh	r2, [r3, #0]

		//////////////////  ФиЛЬТР  длительность ~5 мкс /////////////////////////////////////
		//GPIOB->ODR |=(1<<5);
		if ( (!(GPIOA->IDR & (1<<15)))^(mb_data[IN_IST] & (1<<IN_AVTO2)) )	//Режим Авто-2
 8000ac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2301      	moveq	r3, #1
 8000ad4:	2300      	movne	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000adc:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d007      	beq.n	8000af8 <HAL_TIM_PeriodElapsedCallback+0x1ac>
			{In_Auto1_count++;}
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	3301      	adds	r3, #1
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000af4:	801a      	strh	r2, [r3, #0]
 8000af6:	e002      	b.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x1b2>
		else {In_Auto1_count=0;}
 8000af8:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	801a      	strh	r2, [r3, #0]
		if ( (!(GPIOA->IDR & (1<<8)))^(mb_data[IN_IST] & (1<<IN_AVTO1)) )	//Режим Авто-1
 8000afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf0c      	ite	eq
 8000b0c:	2301      	moveq	r3, #1
 8000b0e:	2300      	movne	r3, #0
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000b14:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4053      	eors	r3, r2
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d007      	beq.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x1ea>
			{In_Auto2_count++;}
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b32:	801a      	strh	r2, [r3, #0]
 8000b34:	e002      	b.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x1f0>
		else {In_Auto2_count=0;}
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	801a      	strh	r2, [r3, #0]
		if ( (!(GPIOC->IDR & (1<<9)))^(mb_data[IN_IST] & (1<<IN_AUTO_NOM)) )
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf0c      	ite	eq
 8000b48:	2301      	moveq	r3, #1
 8000b4a:	2300      	movne	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000b52:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d007      	beq.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x222>
			{In_Rezerv_count++;}
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	3301      	adds	r3, #1
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b6a:	801a      	strh	r2, [r3, #0]
 8000b6c:	e002      	b.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x228>
		else {In_Rezerv_count=0;}
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	801a      	strh	r2, [r3, #0]
		if ( (GPIOC->IDR & (1<<8)) ^ (mb_data[IN_IST] & (1<<IN_ATR_MIN)) )	//Конечник Мин
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000b7e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d02a      	beq.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x294>
			{In_ATRmin_count++;}
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	3301      	adds	r3, #1
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000b96:	801a      	strh	r2, [r3, #0]
 8000b98:	e025      	b.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x29a>
 8000b9a:	bf00      	nop
 8000b9c:	40012c00 	.word	0x40012c00
 8000ba0:	20000568 	.word	0x20000568
 8000ba4:	2000063e 	.word	0x2000063e
 8000ba8:	20000684 	.word	0x20000684
 8000bac:	200006a8 	.word	0x200006a8
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	200006a4 	.word	0x200006a4
 8000bb8:	2000069e 	.word	0x2000069e
 8000bbc:	200006a2 	.word	0x200006a2
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	2000069f 	.word	0x2000069f
 8000bc8:	2000043c 	.word	0x2000043c
 8000bcc:	20000686 	.word	0x20000686
 8000bd0:	20000688 	.word	0x20000688
 8000bd4:	48000800 	.word	0x48000800
 8000bd8:	2000068a 	.word	0x2000068a
 8000bdc:	2000068c 	.word	0x2000068c
		else {In_ATRmin_count=0;}
 8000be0:	4ba2      	ldr	r3, [pc, #648]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
		if ( (GPIOC->IDR & (1<<7)) ^ (mb_data[IN_IST] & (1<<IN_ATR_MAX)) )	//Конечник Макс
 8000be6:	4ba2      	ldr	r3, [pc, #648]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8000bee:	4ba1      	ldr	r3, [pc, #644]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000bf0:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d007      	beq.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x2c0>
			{In_ATRmax_count++;}
 8000bfc:	4b9e      	ldr	r3, [pc, #632]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b9c      	ldr	r3, [pc, #624]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000c08:	801a      	strh	r2, [r3, #0]
 8000c0a:	e002      	b.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x2c6>
		else {In_ATRmax_count=0;}
 8000c0c:	4b9a      	ldr	r3, [pc, #616]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
		if ( (!(GPIOC->IDR & (1<<6)))^(mb_data[IN_IST] & (1<<IN_KN_MEN)) )	//Кн Меньше
 8000c12:	4b97      	ldr	r3, [pc, #604]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b93      	ldr	r3, [pc, #588]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000c28:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000c2c:	f003 0320 	and.w	r3, r3, #32
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d007      	beq.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x2f8>
			{In_KnMen_count++;}
 8000c34:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b8f      	ldr	r3, [pc, #572]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000c40:	801a      	strh	r2, [r3, #0]
 8000c42:	e002      	b.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x2fe>
		else {In_KnMen_count=0;}
 8000c44:	4b8d      	ldr	r3, [pc, #564]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	801a      	strh	r2, [r3, #0]
		if ( (!(GPIOB->IDR & (1<<15)))^(mb_data[IN_IST] & (1<<IN_KN_BOL)) )	//Кн Больше
 8000c4a:	4b8d      	ldr	r3, [pc, #564]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf0c      	ite	eq
 8000c56:	2301      	moveq	r3, #1
 8000c58:	2300      	movne	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b85      	ldr	r3, [pc, #532]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000c60:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d007      	beq.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0x330>
			{In_KnBol_count++;}
 8000c6c:	4b85      	ldr	r3, [pc, #532]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	3301      	adds	r3, #1
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b83      	ldr	r3, [pc, #524]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000c78:	801a      	strh	r2, [r3, #0]
 8000c7a:	e002      	b.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x336>
		else {In_KnBol_count=0;}
 8000c7c:	4b81      	ldr	r3, [pc, #516]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	801a      	strh	r2, [r3, #0]

		////////////////// Прошедшие ФиЛЬТР /////////////////////////////////////
		if (In_Auto1_count>=In_count){   In_Auto1_count=0;
 8000c82:	4b81      	ldr	r3, [pc, #516]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b80      	ldr	r3, [pc, #512]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d31c      	bcc.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x380>
 8000c92:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
			if (GPIOA->IDR & (1<<15))	{mb_data[IN_IST] &=~ (1<<IN_AVTO2);}
 8000c98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d009      	beq.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x36e>
 8000ca6:	4b73      	ldr	r3, [pc, #460]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000ca8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000cac:	f023 0302 	bic.w	r3, r3, #2
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b70      	ldr	r3, [pc, #448]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000cb4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000cb8:	e008      	b.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x380>
			else						{mb_data[IN_IST] |= (1<<IN_AVTO2);}
 8000cba:	4b6e      	ldr	r3, [pc, #440]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000cbc:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b6b      	ldr	r3, [pc, #428]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000cc8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}
		if (In_Auto2_count>=In_count){   In_Auto2_count=0;
 8000ccc:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b6e      	ldr	r3, [pc, #440]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d31c      	bcc.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x3ca>
 8000cdc:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	801a      	strh	r2, [r3, #0]
			if (GPIOA->IDR & (1<<8))	{mb_data[IN_IST] &=~ (1<<IN_AVTO1);}
 8000ce2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d009      	beq.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 8000cf0:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000cf2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000cf6:	f023 0301 	bic.w	r3, r3, #1
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000cfe:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000d02:	e008      	b.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x3ca>
			else						{mb_data[IN_IST] |= (1<<IN_AVTO1);}
 8000d04:	4b5b      	ldr	r3, [pc, #364]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d06:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d12:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}
		if (In_Rezerv_count>=In_count){   In_Rezerv_count=0;
 8000d16:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b5b      	ldr	r3, [pc, #364]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d31b      	bcc.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x412>
 8000d26:	4b5b      	ldr	r3, [pc, #364]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	801a      	strh	r2, [r3, #0]
			if (GPIOC->IDR & (1<<9))	{mb_data[IN_IST] &=~ (1<<IN_AUTO_NOM);}
 8000d2c:	4b50      	ldr	r3, [pc, #320]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x400>
 8000d38:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d3a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000d3e:	f023 0304 	bic.w	r3, r3, #4
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d46:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000d4a:	e008      	b.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x412>
			else						{mb_data[IN_IST] |= (1<<IN_AUTO_NOM);}
 8000d4c:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d4e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b46      	ldr	r3, [pc, #280]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d5a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}
		if (In_ATRmin_count>=In_count){   In_ATRmin_count=0;
 8000d5e:	4b43      	ldr	r3, [pc, #268]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d31b      	bcc.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x45a>
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	801a      	strh	r2, [r3, #0]
			if (GPIOC->IDR & (1<<8))	{mb_data[IN_IST] |= (1<<IN_ATR_MIN);}
 8000d74:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d009      	beq.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x448>
 8000d80:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d82:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d8e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000d92:	e008      	b.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x45a>
			else						{mb_data[IN_IST] &=~ (1<<IN_ATR_MIN);}
 8000d94:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000d96:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000d9a:	f023 0308 	bic.w	r3, r3, #8
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000da2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}
		if (In_ATRmax_count>=In_count){   In_ATRmax_count=0;
 8000da6:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d31b      	bcc.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x4a2>
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	801a      	strh	r2, [r3, #0]
			if (GPIOC->IDR & (1<<7))	{mb_data[IN_IST] |= (1<<IN_ATR_MAX);}
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d009      	beq.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x490>
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000dca:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000dd6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000dda:	e008      	b.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x4a2>
			else						{mb_data[IN_IST] &=~ (1<<IN_ATR_MAX);}
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000dde:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000de2:	f023 0310 	bic.w	r3, r3, #16
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000dea:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}
		if (In_KnMen_count>=In_count){   In_KnMen_count=0;
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d31b      	bcc.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x4ea>
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	801a      	strh	r2, [r3, #0]
			if (GPIOC->IDR & (1<<6))	{mb_data[IN_IST] &=~ (1<<IN_KN_MEN);}
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d009      	beq.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x4d8>
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000e12:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000e16:	f023 0320 	bic.w	r3, r3, #32
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000e1e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000e22:	e008      	b.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x4ea>
			else						{mb_data[IN_IST] |= (1<<IN_KN_MEN);}
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000e26:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000e2a:	f043 0320 	orr.w	r3, r3, #32
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000e32:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}
		if (In_KnBol_count>=In_count){   In_KnBol_count=0;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d331      	bcc.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x55e>
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	801a      	strh	r2, [r3, #0]
			if (GPIOB->IDR & (1<<15))	{mb_data[IN_IST] &=~ (1<<IN_KN_BOL);}
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d01f      	beq.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x54c>
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000e5a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000e66:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000e6a:	e01e      	b.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x55e>
 8000e6c:	2000068c 	.word	0x2000068c
 8000e70:	48000800 	.word	0x48000800
 8000e74:	2000043c 	.word	0x2000043c
 8000e78:	2000068e 	.word	0x2000068e
 8000e7c:	20000690 	.word	0x20000690
 8000e80:	48000400 	.word	0x48000400
 8000e84:	20000694 	.word	0x20000694
 8000e88:	20000686 	.word	0x20000686
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000688 	.word	0x20000688
 8000e94:	2000068a 	.word	0x2000068a
			else						{mb_data[IN_IST] |= (1<<IN_KN_BOL);}
 8000e98:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000e9a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000ea6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}

		//////////////////////////////////// СПЕЦ-НАЖАТиЯ /////////////////////////////////////
		if ( (mb_data[IN_IST] & (1<<IN_KN_MEN)) && (mb_data[IN_IST] & (1<<IN_KN_BOL)) )	// М+Б
 8000eaa:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000eac:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000eb0:	f003 0320 	and.w	r3, r3, #32
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00e      	beq.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x58a>
 8000eb8:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000eba:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x58a>
			{In_KnMpB_count++;}
 8000ec6:	4b43      	ldr	r3, [pc, #268]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b40      	ldr	r3, [pc, #256]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8000ed2:	801a      	strh	r2, [r3, #0]
 8000ed4:	e002      	b.n	8000edc <HAL_TIM_PeriodElapsedCallback+0x590>
		else {In_KnMpB_count=0;}
 8000ed6:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	801a      	strh	r2, [r3, #0]
		if (In_KnMpB_count>=In_count2) {mb_data[IN_IST] |= (1<<IN_KN_MPB);
 8000edc:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d30e      	bcc.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x5be>
 8000eec:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000eee:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000efa:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			In_KnMpB_count=0;
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	801a      	strh	r2, [r3, #0]
			signal_1=1;
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x690>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
		}

		if ( (mb_data[IN_IST] & (1<<IN_KN_MEN)) && !(mb_data[IN_IST] & (1<<IN_KN_BOL)) ) {In_KnMMMen_count++;}	// М (долгое)
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000f0c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00e      	beq.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x5ea>
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000f1a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d107      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x5ea>
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8000f32:	801a      	strh	r2, [r3, #0]
 8000f34:	e002      	b.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x5f0>
		else {In_KnMMMen_count=0;}
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	801a      	strh	r2, [r3, #0]
		if (In_KnMMMen_count>=In_count2) {mb_data[IN_IST] |= (1<<IN_KN_MMMEN);In_KnMMMen_count=0;}
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d30b      	bcc.n	8000f64 <HAL_TIM_PeriodElapsedCallback+0x618>
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000f4e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000f5a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	801a      	strh	r2, [r3, #0]

		if ( !(mb_data[IN_IST] & (1<<IN_KN_MEN)) && (mb_data[IN_IST] & (1<<IN_KN_BOL)) ) {In_KnBBBol_count++;}	// Б (долгое)
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000f66:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000f6a:	f003 0320 	and.w	r3, r3, #32
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10e      	bne.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x644>
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000f74:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d007      	beq.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x644>
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	3301      	adds	r3, #1
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8000f8c:	801a      	strh	r2, [r3, #0]
 8000f8e:	e002      	b.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x64a>
		else {In_KnBBBol_count=0;}
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	801a      	strh	r2, [r3, #0]
		if (In_KnBBBol_count>=In_count2) {mb_data[IN_IST] |= (1<<IN_KN_BBBOL);In_KnBBBol_count=0;}
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d30d      	bcc.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x676>
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000fa8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000fb8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	801a      	strh	r2, [r3, #0]

		//GPIOB->ODR &=~ (1<<5); GPIOB->ODR |= (1<<5);
	}//end каждые 10 мс
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000043c 	.word	0x2000043c
 8000fd4:	20000698 	.word	0x20000698
 8000fd8:	2000000e 	.word	0x2000000e
 8000fdc:	2000069f 	.word	0x2000069f
 8000fe0:	20000692 	.word	0x20000692
 8000fe4:	20000696 	.word	0x20000696

08000fe8 <HAL_TIM_PWM_PulseFinishedCallback>:

//................. Таймер на ШиМ
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d130      	bne.n	800105c <HAL_TIM_PWM_PulseFinishedCallback+0x74>
		if (mb_data[OUT_IST]&(1<<OUT_ED_NAPR))	{mb_data[ATR_POL_OTN]++; atr_pol_abs++;}
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8000ffc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d011      	beq.n	800102c <HAL_TIM_PWM_PulseFinishedCallback+0x44>
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800100a:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800100e:	3301      	adds	r3, #1
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001014:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b21b      	sxth	r3, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	3301      	adds	r3, #1
 8001022:	b29b      	uxth	r3, r3
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	e010      	b.n	800104e <HAL_TIM_PWM_PulseFinishedCallback+0x66>
		else 									{mb_data[ATR_POL_OTN]--; atr_pol_abs--;}
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 800102e:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8001032:	3b01      	subs	r3, #1
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001038:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	b21b      	sxth	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	3b01      	subs	r3, #1
 8001046:	b29b      	uxth	r3, r3
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 800104c:	801a      	strh	r2, [r3, #0]
		mb_data[ATR_POL_ABS] = atr_pol_abs;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b21b      	sxth	r3, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001058:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		//if (mb_data[IN_IST]&(1<<IN_ATR_MIN))		{mb_data[ATR_POL_ABS]=0;}
		//Delitel_count++;
		//HAL_GPIO_TogglePin(GPIOB, PinLEDdebug_Pin);
	}
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	2000043c 	.word	0x2000043c
 800106c:	2000069a 	.word	0x2000069a

08001070 <HAL_UART_TxCpltCallback>:
	if(hadc1->Instance == ADC1) {;
	 }
}
*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){;}
	if(huart==&huart3){;}
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_UART_RxCpltCallback+0x58>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d117      	bne.n	80010c4 <HAL_UART_RxCpltCallback+0x40>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)MB_preBUFF, rxPac); //запуск следующего приёма
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_UART_RxCpltCallback+0x5c>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4912      	ldr	r1, [pc, #72]	; (80010e4 <HAL_UART_RxCpltCallback+0x60>)
 800109c:	480f      	ldr	r0, [pc, #60]	; (80010dc <HAL_UART_RxCpltCallback+0x58>)
 800109e:	f005 fad9 	bl	8006654 <HAL_UART_Receive_IT>
		MB_BUFF[MB_buffCount++]=MB_preBUFF[0];   //сохраняем полученый байт в буфер
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_UART_RxCpltCallback+0x64>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	b2d1      	uxtb	r1, r2
 80010aa:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <HAL_UART_RxCpltCallback+0x64>)
 80010ac:	7011      	strb	r1, [r2, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_UART_RxCpltCallback+0x60>)
 80010b2:	7819      	ldrb	r1, [r3, #0]
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_UART_RxCpltCallback+0x68>)
 80010b6:	5499      	strb	r1, [r3, r2]
		MB_counT35=0;  //до ~23..24 (1,75)
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_UART_RxCpltCallback+0x6c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	801a      	strh	r2, [r3, #0]
		MB_MyPac_OK=0;
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_UART_RxCpltCallback+0x70>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
	}
	if(huart==&huart3){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <HAL_UART_RxCpltCallback+0x74>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d102      	bne.n	80010d2 <HAL_UART_RxCpltCallback+0x4e>
		//HAL_UART_Receive_IT(&huart3, (uint8_t*)MB3_preBUFF, 25); //запуск следующего приёма
		//MB3_BUFF[MB3_buffCount++]=MB3_preBUFF[0];   //сохраняем полученый байт в буфер
		//mb_data[21]=( (MB3_preBUFF[3]<<8)|(MB3_preBUFF[4]) );
		//MB3_counT35=0;  //до ~23..24 (1,75)
		MB3_MyPac_OK=0;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_UART_RxCpltCallback+0x78>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
	}
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200007ec 	.word	0x200007ec
 80010e0:	20000002 	.word	0x20000002
 80010e4:	20000634 	.word	0x20000634
 80010e8:	20000635 	.word	0x20000635
 80010ec:	2000056c 	.word	0x2000056c
 80010f0:	20000568 	.word	0x20000568
 80010f4:	20000637 	.word	0x20000637
 80010f8:	200006cc 	.word	0x200006cc
 80010fc:	2000067f 	.word	0x2000067f

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f001 fe5d 	bl	8002dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f001 f8f1 	bl	80022f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f001 fb19 	bl	8002744 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001112:	f001 fab3 	bl	800267c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001116:	f001 f999 	bl	800244c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800111a:	f001 fae1 	bl	80026e0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800111e:	f001 f955 	bl	80023cc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001122:	f001 f9e5 	bl	80024f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001126:	f001 fa59 	bl	80025dc <MX_TIM3_Init>
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_A, izm2period);
  //HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&adc_B, izm2period);
  //HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&adc_C, izm2period);

  //............ Запуск таймера
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 800112a:	2104      	movs	r1, #4
 800112c:	487a      	ldr	r0, [pc, #488]	; (8001318 <main+0x218>)
 800112e:	f003 ffb7 	bl	80050a0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001132:	487a      	ldr	r0, [pc, #488]	; (800131c <main+0x21c>)
 8001134:	f003 fee2 	bl	8004efc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001138:	4879      	ldr	r0, [pc, #484]	; (8001320 <main+0x220>)
 800113a:	f003 fedf 	bl	8004efc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
/////////////////////// Запускаем ожидание приёма по УАРТ
  HAL_UART_Receive_IT(&huart1, (uint8_t*)MB_preBUFF, rxPac);
 800113e:	4b79      	ldr	r3, [pc, #484]	; (8001324 <main+0x224>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4978      	ldr	r1, [pc, #480]	; (8001328 <main+0x228>)
 8001146:	4879      	ldr	r0, [pc, #484]	; (800132c <main+0x22c>)
 8001148:	f005 fa84 	bl	8006654 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)MB3_preBUFF, rx3Pac);
 800114c:	4b78      	ldr	r3, [pc, #480]	; (8001330 <main+0x230>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4978      	ldr	r1, [pc, #480]	; (8001334 <main+0x234>)
 8001154:	4878      	ldr	r0, [pc, #480]	; (8001338 <main+0x238>)
 8001156:	f005 fa7d 	bl	8006654 <HAL_UART_Receive_IT>

//............ Уставки по умолчанию ...MB_veribl_my.h...
  mb_data[0]=0x11;  //времяночка
 800115a:	4b78      	ldr	r3, [pc, #480]	; (800133c <main+0x23c>)
 800115c:	2211      	movs	r2, #17
 800115e:	801a      	strh	r2, [r3, #0]
  mb_data[21]=21; mb_data[22]=22; mb_data[23]=23;
 8001160:	4b76      	ldr	r3, [pc, #472]	; (800133c <main+0x23c>)
 8001162:	2215      	movs	r2, #21
 8001164:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001166:	4b75      	ldr	r3, [pc, #468]	; (800133c <main+0x23c>)
 8001168:	2216      	movs	r2, #22
 800116a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800116c:	4b73      	ldr	r3, [pc, #460]	; (800133c <main+0x23c>)
 800116e:	2217      	movs	r2, #23
 8001170:	85da      	strh	r2, [r3, #46]	; 0x2e
  rxPac=1;
 8001172:	4b6c      	ldr	r3, [pc, #432]	; (8001324 <main+0x224>)
 8001174:	2201      	movs	r2, #1
 8001176:	801a      	strh	r2, [r3, #0]
  mb_data[55]=719;
 8001178:	4b70      	ldr	r3, [pc, #448]	; (800133c <main+0x23c>)
 800117a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800117e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  count_stepHome=0;
 8001182:	4b6f      	ldr	r3, [pc, #444]	; (8001340 <main+0x240>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
  mb_data[ATR_FSTP_HD]=8150; //шагов от 0 до 450 В
 8001188:	4b6c      	ldr	r3, [pc, #432]	; (800133c <main+0x23c>)
 800118a:	f641 72d6 	movw	r2, #8150	; 0x1fd6
 800118e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
HAL_Delay(1000);
 8001192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001196:	f001 fe7b 	bl	8002e90 <HAL_Delay>
IDmyMB ();  //считывание ID для MB со свичей
 800119a:	f7ff fb79 	bl	8000890 <IDmyMB>
	//else if( (Delitel_count>=10)&!(GPIOB->ODR&(1<<3)) ) {Delitel_count=0; GPIOB->ODR&=~(1<<4);}


//********************** АВТО-1 и АВТО-2 **********************//
//*************************************************************//
uint16_t viderjka1=300;
 800119e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011a2:	80fb      	strh	r3, [r7, #6]
	  // Авто-1. Работа АТР по уставкам от ПО с отслеживанием просадки U
	if ( (mb_data[IN_IST]&(1<<IN_AVTO1)) && !(mb_data[IN_IST]&(1<<IN_AVTO2)) ){
 80011a4:	4b65      	ldr	r3, [pc, #404]	; (800133c <main+0x23c>)
 80011a6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8299 	beq.w	80016e6 <main+0x5e6>
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <main+0x23c>)
 80011b6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8291 	bne.w	80016e6 <main+0x5e6>
		//GPIOB->ODR|=(1<<5);
		//********************** Функции долгих нажатий (долгое М или Б) **********************//
		if (mb_data[IN_IST] & (1<<IN_KN_MMMEN)) {mb_data[IN_IST]&=~(1<<IN_KN_MMMEN);}	//не назначено
 80011c4:	4b5d      	ldr	r3, [pc, #372]	; (800133c <main+0x23c>)
 80011c6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d008      	beq.n	80011e4 <main+0xe4>
 80011d2:	4b5a      	ldr	r3, [pc, #360]	; (800133c <main+0x23c>)
 80011d4:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80011d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <main+0x23c>)
 80011e0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		if (mb_data[IN_IST] & (1<<IN_KN_BBBOL)) {mb_data[IN_IST]&=~(1<<IN_KN_BBBOL);}	//не назначено
 80011e4:	4b55      	ldr	r3, [pc, #340]	; (800133c <main+0x23c>)
 80011e6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	da08      	bge.n	8001202 <main+0x102>
 80011f0:	4b52      	ldr	r3, [pc, #328]	; (800133c <main+0x23c>)
 80011f2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80011f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b4f      	ldr	r3, [pc, #316]	; (800133c <main+0x23c>)
 80011fe:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		//********************** Нахождение МиН и МАКС (долгое М+Б) **********************//
		if ((mb_data[IN_IST]&(1<<IN_AUTO_HOM)) || (mb_data[IN_IST]&(1<<IN_KN_MPB))) {
 8001202:	4b4e      	ldr	r3, [pc, #312]	; (800133c <main+0x23c>)
 8001204:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d107      	bne.n	8001220 <main+0x120>
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <main+0x23c>)
 8001212:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80ec 	beq.w	80013f8 <main+0x2f8>
			if (count_stepHome==0) {
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <main+0x240>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d135      	bne.n	8001294 <main+0x194>
				if (!(mb_data[IN_IST]&(1<<IN_ATR_MIN)))	{mb_data[IN_IST]|=(1<<IN_AUTO_MEN);
 8001228:	4b44      	ldr	r3, [pc, #272]	; (800133c <main+0x23c>)
 800122a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d112      	bne.n	800125c <main+0x15c>
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <main+0x23c>)
 8001238:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800123c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <main+0x23c>)
 8001244:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
														 mb_data[IN_IST]&=~(1<<IN_AUTO_BOL);}
 8001248:	4b3c      	ldr	r3, [pc, #240]	; (800133c <main+0x23c>)
 800124a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800124e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001252:	b29a      	uxth	r2, r3
 8001254:	4b39      	ldr	r3, [pc, #228]	; (800133c <main+0x23c>)
 8001256:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800125a:	e01b      	b.n	8001294 <main+0x194>
				else									{mb_data[IN_IST]&=~(1<<IN_AUTO_MEN);
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <main+0x23c>)
 800125e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b34      	ldr	r3, [pc, #208]	; (800133c <main+0x23c>)
 800126a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
														 mb_data[IN_IST]&=~(1<<IN_AUTO_BOL);
 800126e:	4b33      	ldr	r3, [pc, #204]	; (800133c <main+0x23c>)
 8001270:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b30      	ldr	r3, [pc, #192]	; (800133c <main+0x23c>)
 800127c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
														 mb_data[ATR_POL_OTN]=0; timUzapis=0;
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <main+0x23c>)
 8001282:	2200      	movs	r2, #0
 8001284:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <main+0x244>)
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
														 count_stepHome=1;} //Положение относительно (0В)
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <main+0x240>)
 8001290:	2201      	movs	r2, #1
 8001292:	801a      	strh	r2, [r3, #0]
			}
			if ( (count_stepHome==1)&&(timUzapis<=viderjka1) ) { //сохранение Umin viderjka1-3секунды для устаканивания значниея U
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <main+0x240>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d110      	bne.n	80012be <main+0x1be>
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <main+0x244>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d30b      	bcc.n	80012be <main+0x1be>
				mb_data[ATR_MIN_V_H]=mb_data[GPM_V_H]; mb_data[ATR_MIN_V_L]=mb_data[GPM_V_L];}
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <main+0x23c>)
 80012a8:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <main+0x23c>)
 80012ae:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <main+0x23c>)
 80012b4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <main+0x23c>)
 80012ba:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
			if ( (count_stepHome==1)&&(timUzapis>viderjka1) ) {
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <main+0x240>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10a      	bne.n	80012dc <main+0x1dc>
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <main+0x244>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	88fa      	ldrh	r2, [r7, #6]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d205      	bcs.n	80012dc <main+0x1dc>
				count_stepHome=2; timUzapis=0;}
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <main+0x240>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	801a      	strh	r2, [r3, #0]
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <main+0x244>)
 80012d8:	2200      	movs	r2, #0
 80012da:	801a      	strh	r2, [r3, #0]
			if (count_stepHome==2) {
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <main+0x240>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d14f      	bne.n	8001384 <main+0x284>
				if (!(mb_data[IN_IST]&(1<<IN_ATR_MAX)))	{mb_data[IN_IST]&=~(1<<IN_AUTO_MEN);
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <main+0x23c>)
 80012e6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d12a      	bne.n	8001348 <main+0x248>
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <main+0x23c>)
 80012f4:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80012f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <main+0x23c>)
 8001300:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
														 mb_data[IN_IST]|=(1<<IN_AUTO_BOL);}
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <main+0x23c>)
 8001306:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800130a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <main+0x23c>)
 8001312:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8001316:	e035      	b.n	8001384 <main+0x284>
 8001318:	200008c8 	.word	0x200008c8
 800131c:	20000874 	.word	0x20000874
 8001320:	200007a0 	.word	0x200007a0
 8001324:	20000002 	.word	0x20000002
 8001328:	20000634 	.word	0x20000634
 800132c:	200007ec 	.word	0x200007ec
 8001330:	20000008 	.word	0x20000008
 8001334:	20000660 	.word	0x20000660
 8001338:	200006cc 	.word	0x200006cc
 800133c:	2000043c 	.word	0x2000043c
 8001340:	2000069c 	.word	0x2000069c
 8001344:	200006a4 	.word	0x200006a4
				else 									{mb_data[IN_IST]&=~(1<<IN_AUTO_MEN);
 8001348:	4b9d      	ldr	r3, [pc, #628]	; (80015c0 <main+0x4c0>)
 800134a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800134e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b9a      	ldr	r3, [pc, #616]	; (80015c0 <main+0x4c0>)
 8001356:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
														 mb_data[IN_IST]&=~(1<<IN_AUTO_BOL);
 800135a:	4b99      	ldr	r3, [pc, #612]	; (80015c0 <main+0x4c0>)
 800135c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001364:	b29a      	uxth	r2, r3
 8001366:	4b96      	ldr	r3, [pc, #600]	; (80015c0 <main+0x4c0>)
 8001368:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
														 mb_data[ATR_FSTP]=mb_data[ATR_POL_OTN]; //Полное кол-во шагов (при 450В)
 800136c:	4b94      	ldr	r3, [pc, #592]	; (80015c0 <main+0x4c0>)
 800136e:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8001372:	4b93      	ldr	r3, [pc, #588]	; (80015c0 <main+0x4c0>)
 8001374:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
														 timUzapis=0; count_stepHome=3;
 8001378:	4b92      	ldr	r3, [pc, #584]	; (80015c4 <main+0x4c4>)
 800137a:	2200      	movs	r2, #0
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	4b92      	ldr	r3, [pc, #584]	; (80015c8 <main+0x4c8>)
 8001380:	2203      	movs	r2, #3
 8001382:	801a      	strh	r2, [r3, #0]
				}
			}
			if ( (count_stepHome==3)&&(timUzapis<=viderjka1) ) { //сохранение Umin
 8001384:	4b90      	ldr	r3, [pc, #576]	; (80015c8 <main+0x4c8>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d110      	bne.n	80013ae <main+0x2ae>
 800138c:	4b8d      	ldr	r3, [pc, #564]	; (80015c4 <main+0x4c4>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	429a      	cmp	r2, r3
 8001394:	d30b      	bcc.n	80013ae <main+0x2ae>
				mb_data[ATR_MAX_V_H]=mb_data[GPM_V_H]; mb_data[ATR_MAX_V_L]=mb_data[GPM_V_L];}
 8001396:	4b8a      	ldr	r3, [pc, #552]	; (80015c0 <main+0x4c0>)
 8001398:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 800139c:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <main+0x4c0>)
 800139e:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
 80013a2:	4b87      	ldr	r3, [pc, #540]	; (80015c0 <main+0x4c0>)
 80013a4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80013a8:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <main+0x4c0>)
 80013aa:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			if ( (count_stepHome==3)&&(timUzapis>viderjka1) ) {
 80013ae:	4b86      	ldr	r3, [pc, #536]	; (80015c8 <main+0x4c8>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d10a      	bne.n	80013cc <main+0x2cc>
 80013b6:	4b83      	ldr	r3, [pc, #524]	; (80015c4 <main+0x4c4>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	88fa      	ldrh	r2, [r7, #6]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d205      	bcs.n	80013cc <main+0x2cc>
				count_stepHome=4; timUzapis=0;}
 80013c0:	4b81      	ldr	r3, [pc, #516]	; (80015c8 <main+0x4c8>)
 80013c2:	2204      	movs	r2, #4
 80013c4:	801a      	strh	r2, [r3, #0]
 80013c6:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <main+0x4c4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	801a      	strh	r2, [r3, #0]
			if (count_stepHome==4) {mb_data[IN_IST]&=~(1<<IN_AUTO_HOM); mb_data[IN_IST]&=~(1<<IN_KN_MPB);}
 80013cc:	4b7e      	ldr	r3, [pc, #504]	; (80015c8 <main+0x4c8>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d111      	bne.n	80013f8 <main+0x2f8>
 80013d4:	4b7a      	ldr	r3, [pc, #488]	; (80015c0 <main+0x4c0>)
 80013d6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80013da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b77      	ldr	r3, [pc, #476]	; (80015c0 <main+0x4c0>)
 80013e2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <main+0x4c0>)
 80013e8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80013ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b73      	ldr	r3, [pc, #460]	; (80015c0 <main+0x4c0>)
 80013f4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}
		}//end ДВиЖЕНиЯ по уставкам
		*/
		//********************** ДВиЖЕНиЯ по уставкам НАПРЯЖЕНиЮ  **********************//
		//if ( tekysheeNapr.tekysheeU && zadan_v0.zadan_v &&						//если определены МиН/МАКС и есть уставка
		if ( !errGPM &&  //(mb_data[IN_IST]&(1<<IN_AUTO_NOM))						//если ищем Дом
 80013f8:	4b74      	ldr	r3, [pc, #464]	; (80015cc <main+0x4cc>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80f4 	beq.w	80015f0 <main+0x4f0>
				( (mb_data[OUT_IST]&(1<<OUT_SLEJEN)) || (mb_data[KOM_IST]&(1<<KOM_SLEJEN)) ) && //или Следим за U
 8001408:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <main+0x4c0>)
 800140a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
		if ( !errGPM &&  //(mb_data[IN_IST]&(1<<IN_AUTO_NOM))						//если ищем Дом
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <main+0x326>
				( (mb_data[OUT_IST]&(1<<OUT_SLEJEN)) || (mb_data[KOM_IST]&(1<<KOM_SLEJEN)) ) && //или Следим за U
 8001416:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <main+0x4c0>)
 8001418:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80e5 	beq.w	80015f0 <main+0x4f0>
				( (tekysheeNapr.tekysheeU > zadanMin) && (zadan_v0.zadan_v > zadanMin) ) )	// и если Уставка не ниже минимальной!
 8001426:	4b6a      	ldr	r3, [pc, #424]	; (80015d0 <main+0x4d0>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <main+0x4d4>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
				( (mb_data[OUT_IST]&(1<<OUT_SLEJEN)) || (mb_data[KOM_IST]&(1<<KOM_SLEJEN)) ) && //или Следим за U
 8001432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	f340 80d9 	ble.w	80015f0 <main+0x4f0>
				( (tekysheeNapr.tekysheeU > zadanMin) && (zadan_v0.zadan_v > zadanMin) ) )	// и если Уставка не ниже минимальной!
 800143e:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <main+0x4d8>)
 8001440:	ed93 7a00 	vldr	s14, [r3]
 8001444:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <main+0x4d4>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	f340 80cd 	ble.w	80015f0 <main+0x4f0>
		{
			if (tekysheeNapr.tekysheeU < zadan_v005m) {		//если текущее U МЕНЬШЕ заданного
 8001456:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <main+0x4d0>)
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <main+0x4dc>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	d516      	bpl.n	800149a <main+0x39a>
				mb_data[IN_IST] |= (1<<IN_AUTO_BOL);			//zadan_v001p
 800146c:	4b54      	ldr	r3, [pc, #336]	; (80015c0 <main+0x4c0>)
 800146e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001472:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <main+0x4c0>)
 800147a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				mb_data[IN_IST] &=~ (1<<IN_AUTO_MEN);
 800147e:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <main+0x4c0>)
 8001480:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <main+0x4c0>)
 800148c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				htim2.Instance->ARR = 169;//настройки скорости
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <main+0x4e0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	22a9      	movs	r2, #169	; 0xa9
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
			if (tekysheeNapr.tekysheeU < zadan_v005m) {		//если текущее U МЕНЬШЕ заданного
 8001498:	e0bc      	b.n	8001614 <main+0x514>
			}
			else if ( (tekysheeNapr.tekysheeU >= zadan_v005m) &&
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <main+0x4d0>)
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <main+0x4dc>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	db22      	blt.n	80014f6 <main+0x3f6>
					  (tekysheeNapr.tekysheeU <= zadan_v001m) ) {		//если текущее U МЕНЬШЕ заданного
 80014b0:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <main+0x4d0>)
 80014b2:	ed93 7a00 	vldr	s14, [r3]
 80014b6:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <main+0x4e4>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
			else if ( (tekysheeNapr.tekysheeU >= zadan_v005m) &&
 80014bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	d817      	bhi.n	80014f6 <main+0x3f6>
				mb_data[IN_IST] |= (1<<IN_AUTO_BOL);			//zadan_v001p
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <main+0x4c0>)
 80014c8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80014cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <main+0x4c0>)
 80014d4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				mb_data[IN_IST] &=~ (1<<IN_AUTO_MEN);
 80014d8:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <main+0x4c0>)
 80014da:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80014de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <main+0x4c0>)
 80014e6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				htim2.Instance->ARR = 1699;//настройки скорости
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <main+0x4e0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014f4:	e062      	b.n	80015bc <main+0x4bc>
			}
			else if (tekysheeNapr.tekysheeU > zadan_v005p) {	//если текущее U больше заданного
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <main+0x4d0>)
 80014f8:	ed93 7a00 	vldr	s14, [r3]
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <main+0x4e8>)
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	dd16      	ble.n	800153a <main+0x43a>
				mb_data[IN_IST] &=~ (1<<IN_AUTO_BOL);
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <main+0x4c0>)
 800150e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <main+0x4c0>)
 800151a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				mb_data[IN_IST] |= (1<<IN_AUTO_MEN);
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <main+0x4c0>)
 8001520:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <main+0x4c0>)
 800152c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				htim2.Instance->ARR = 169;//настройки скорости
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <main+0x4e0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	22a9      	movs	r2, #169	; 0xa9
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
			if (tekysheeNapr.tekysheeU < zadan_v005m) {		//если текущее U МЕНЬШЕ заданного
 8001538:	e06c      	b.n	8001614 <main+0x514>
			}
			else if ( (tekysheeNapr.tekysheeU <= zadan_v005p) &&
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <main+0x4d0>)
 800153c:	ed93 7a00 	vldr	s14, [r3]
 8001540:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <main+0x4e8>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	d822      	bhi.n	8001596 <main+0x496>
					  (tekysheeNapr.tekysheeU >= zadan_v001p) ) {	//если текущее U больше заданного
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <main+0x4d0>)
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <main+0x4ec>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
			else if ( (tekysheeNapr.tekysheeU <= zadan_v005p) &&
 800155c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	db17      	blt.n	8001596 <main+0x496>
				mb_data[IN_IST] &=~ (1<<IN_AUTO_BOL);
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <main+0x4c0>)
 8001568:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800156c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <main+0x4c0>)
 8001574:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				mb_data[IN_IST] |= (1<<IN_AUTO_MEN);
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <main+0x4c0>)
 800157a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800157e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <main+0x4c0>)
 8001586:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				htim2.Instance->ARR = 1699;//настройки скорости
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <main+0x4e0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
 8001594:	e012      	b.n	80015bc <main+0x4bc>
			}
			else {
				mb_data[IN_IST] &=~ (1<<IN_AUTO_BOL);					//иначе ОСТАНОВ
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <main+0x4c0>)
 8001598:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800159c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <main+0x4c0>)
 80015a4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
				mb_data[IN_IST] &=~ (1<<IN_AUTO_MEN);
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <main+0x4c0>)
 80015aa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80015ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <main+0x4c0>)
 80015b6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			if (tekysheeNapr.tekysheeU < zadan_v005m) {		//если текущее U МЕНЬШЕ заданного
 80015ba:	e02b      	b.n	8001614 <main+0x514>
 80015bc:	e02a      	b.n	8001614 <main+0x514>
 80015be:	bf00      	nop
 80015c0:	2000043c 	.word	0x2000043c
 80015c4:	200006a4 	.word	0x200006a4
 80015c8:	2000069c 	.word	0x2000069c
 80015cc:	200006c4 	.word	0x200006c4
 80015d0:	200008c0 	.word	0x200008c0
 80015d4:	20000010 	.word	0x20000010
 80015d8:	20000870 	.word	0x20000870
 80015dc:	200006c0 	.word	0x200006c0
 80015e0:	200008c8 	.word	0x200008c8
 80015e4:	200006b8 	.word	0x200006b8
 80015e8:	200006bc 	.word	0x200006bc
 80015ec:	200006b4 	.word	0x200006b4
			}
		}//end ДВиЖЕНиЯ по уставкам НАПРЯЖЕНиЮ
		else {
			mb_data[IN_IST] &=~ (1<<IN_AUTO_BOL);					//иначе ОСТАНОВ
 80015f0:	4bba      	ldr	r3, [pc, #744]	; (80018dc <main+0x7dc>)
 80015f2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80015f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4bb7      	ldr	r3, [pc, #732]	; (80018dc <main+0x7dc>)
 80015fe:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			mb_data[IN_IST] &=~ (1<<IN_AUTO_MEN);
 8001602:	4bb6      	ldr	r3, [pc, #728]	; (80018dc <main+0x7dc>)
 8001604:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800160c:	b29a      	uxth	r2, r3
 800160e:	4bb3      	ldr	r3, [pc, #716]	; (80018dc <main+0x7dc>)
 8001610:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}


		//********************** само ДВиЖЕНиЕ **********************//
		//движение против частовой в МиН
		if ( !(mb_data[IN_IST]&(1<<IN_ATR_MIN)) &&						//если АТР не на МиН
 8001614:	4bb1      	ldr	r3, [pc, #708]	; (80018dc <main+0x7dc>)
 8001616:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d12a      	bne.n	8001678 <main+0x578>
				//((mb_data[ATR_FSTP]==0) ||										//едем если не знаем общее количество шагов или
				//((mb_data[ATR_FSTP])&&(mb_data[ATR_POL_OTN]>0))) &&				//если знаем, но не доехали до 0
				( ((mb_data[IN_IST]&(1<<IN_STAT_START))&&!(mb_data[IN_IST]&(1<<IN_STAT_NAPR))) ||//едем по командам или
 8001622:	4bae      	ldr	r3, [pc, #696]	; (80018dc <main+0x7dc>)
 8001624:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
		if ( !(mb_data[IN_IST]&(1<<IN_ATR_MIN)) &&						//если АТР не на МиН
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <main+0x53e>
				( ((mb_data[IN_IST]&(1<<IN_STAT_START))&&!(mb_data[IN_IST]&(1<<IN_STAT_NAPR))) ||//едем по командам или
 8001630:	4baa      	ldr	r3, [pc, #680]	; (80018dc <main+0x7dc>)
 8001632:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <main+0x54c>
				(mb_data[IN_IST]&(1<<IN_AUTO_MEN)) ) )											//едем по Авто Меньше
 800163e:	4ba7      	ldr	r3, [pc, #668]	; (80018dc <main+0x7dc>)
 8001640:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
				( ((mb_data[IN_IST]&(1<<IN_STAT_START))&&!(mb_data[IN_IST]&(1<<IN_STAT_NAPR))) ||//едем по командам или
 8001648:	2b00      	cmp	r3, #0
 800164a:	d015      	beq.n	8001678 <main+0x578>
			{
			mb_data[OUT_IST]&=~(1<<OUT_ED_NAPR);												//против Часовой
 800164c:	4ba3      	ldr	r3, [pc, #652]	; (80018dc <main+0x7dc>)
 800164e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	b29a      	uxth	r2, r3
 8001658:	4ba0      	ldr	r3, [pc, #640]	; (80018dc <main+0x7dc>)
 800165a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			mb_data[OUT_IST]&=~(1<<OUT_ED_ENAB);												//держим ЭД
 800165e:	4b9f      	ldr	r3, [pc, #636]	; (80018dc <main+0x7dc>)
 8001660:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8001664:	f023 0308 	bic.w	r3, r3, #8
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b9c      	ldr	r3, [pc, #624]	; (80018dc <main+0x7dc>)
 800166c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			bitEdemNet=1;																		//старт ШиМ
 8001670:	4b9b      	ldr	r3, [pc, #620]	; (80018e0 <main+0x7e0>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e035      	b.n	80016e4 <main+0x5e4>
			}
		//движение по частовой в МАКС
		else if ( !(mb_data[IN_IST]&(1<<IN_ATR_MAX)) &&							//если АТР не на МАКС
 8001678:	4b98      	ldr	r3, [pc, #608]	; (80018dc <main+0x7dc>)
 800167a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	d12a      	bne.n	80016dc <main+0x5dc>
				//((mb_data[ATR_FSTP]==0) || 										//едем если ещё не сохранили МАКС или
				//(mb_data[ATR_POL_OTN]<=mb_data[ATR_FSTP]) ) &&					//не доехали до него
				( ((mb_data[IN_IST]&(1<<IN_STAT_START))&&(mb_data[IN_IST]&(1<<IN_STAT_NAPR))) ||//едем по командам или
 8001686:	4b95      	ldr	r3, [pc, #596]	; (80018dc <main+0x7dc>)
 8001688:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
		else if ( !(mb_data[IN_IST]&(1<<IN_ATR_MAX)) &&							//если АТР не на МАКС
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <main+0x5a2>
				( ((mb_data[IN_IST]&(1<<IN_STAT_START))&&(mb_data[IN_IST]&(1<<IN_STAT_NAPR))) ||//едем по командам или
 8001694:	4b91      	ldr	r3, [pc, #580]	; (80018dc <main+0x7dc>)
 8001696:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800169a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <main+0x5b0>
				(mb_data[IN_IST]&(1<<IN_AUTO_BOL)) ) )											//едем по по Авто Больше
 80016a2:	4b8e      	ldr	r3, [pc, #568]	; (80018dc <main+0x7dc>)
 80016a4:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80016a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
				( ((mb_data[IN_IST]&(1<<IN_STAT_START))&&(mb_data[IN_IST]&(1<<IN_STAT_NAPR))) ||//едем по командам или
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d015      	beq.n	80016dc <main+0x5dc>
			{
			mb_data[OUT_IST]|=(1<<OUT_ED_NAPR);													//по Часовой
 80016b0:	4b8a      	ldr	r3, [pc, #552]	; (80018dc <main+0x7dc>)
 80016b2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b87      	ldr	r3, [pc, #540]	; (80018dc <main+0x7dc>)
 80016be:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			mb_data[OUT_IST]&=~(1<<OUT_ED_ENAB);												//держим ЭД
 80016c2:	4b86      	ldr	r3, [pc, #536]	; (80018dc <main+0x7dc>)
 80016c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80016c8:	f023 0308 	bic.w	r3, r3, #8
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b83      	ldr	r3, [pc, #524]	; (80018dc <main+0x7dc>)
 80016d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			bitEdemNet=1;																		//старт Ш�?М
 80016d4:	4b82      	ldr	r3, [pc, #520]	; (80018e0 <main+0x7e0>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e003      	b.n	80016e4 <main+0x5e4>
			}
		else {bitEdemNet=0;}
 80016dc:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <main+0x7e0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
		if ( !(mb_data[IN_IST]&(1<<IN_ATR_MIN)) &&						//если АТР не на МиН
 80016e2:	e136      	b.n	8001952 <main+0x852>
 80016e4:	e135      	b.n	8001952 <main+0x852>
	}//end Авто-1

	// Авто-2. Работа от кнопок с отслеживанием просадки U
	// долгое М+Б=Х ; долгое М=Х ; долгое Б=Х
	// можно сохранять текущую уставку через 5 секунд, после уставки кнопками
	else if ( !(mb_data[IN_IST]&(1<<IN_AVTO1)) && (mb_data[IN_IST]&(1<<IN_AVTO2)) ){
 80016e6:	4b7d      	ldr	r3, [pc, #500]	; (80018dc <main+0x7dc>)
 80016e8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 8099 	bne.w	8001828 <main+0x728>
 80016f6:	4b79      	ldr	r3, [pc, #484]	; (80018dc <main+0x7dc>)
 80016f8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8091 	beq.w	8001828 <main+0x728>
		//********************** Функции долгих нажатий (долгое М или Б) **********************//
		if (mb_data[IN_IST] & (1<<IN_KN_MMMEN)) {mb_data[IN_IST]&=~(1<<IN_KN_MMMEN);}	//не назначено
 8001706:	4b75      	ldr	r3, [pc, #468]	; (80018dc <main+0x7dc>)
 8001708:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800170c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <main+0x626>
 8001714:	4b71      	ldr	r3, [pc, #452]	; (80018dc <main+0x7dc>)
 8001716:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800171a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b6e      	ldr	r3, [pc, #440]	; (80018dc <main+0x7dc>)
 8001722:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		if (mb_data[IN_IST] & (1<<IN_KN_BBBOL)) {mb_data[IN_IST]&=~(1<<IN_KN_BBBOL);}	//не назначено
 8001726:	4b6d      	ldr	r3, [pc, #436]	; (80018dc <main+0x7dc>)
 8001728:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800172c:	b21b      	sxth	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	da08      	bge.n	8001744 <main+0x644>
 8001732:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <main+0x7dc>)
 8001734:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001738:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <main+0x7dc>)
 8001740:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		mb_data[IN_IST]&=~(1<<IN_KN_MPB);
 8001744:	4b65      	ldr	r3, [pc, #404]	; (80018dc <main+0x7dc>)
 8001746:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800174a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b62      	ldr	r3, [pc, #392]	; (80018dc <main+0x7dc>)
 8001752:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

		//********************** движения ЭД с кнопок **********************//
		//движение против частовой в МиН
		if ( !(mb_data[IN_IST]&(1<<IN_ATR_MIN))&&								//если АТР не на МиН
 8001756:	4b61      	ldr	r3, [pc, #388]	; (80018dc <main+0x7dc>)
 8001758:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12b      	bne.n	80017bc <main+0x6bc>
				((mb_data[ATR_FSTP]==0) ||										//едем если не знаем общее количество шагов или
 8001764:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <main+0x7dc>)
 8001766:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
		if ( !(mb_data[IN_IST]&(1<<IN_ATR_MIN))&&								//если АТР не на МиН
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <main+0x682>
				((mb_data[ATR_FSTP])&&(mb_data[ATR_POL_OTN]>0))) &&				//    если знаем, но не доехали до 0
 800176e:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <main+0x7dc>)
 8001770:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
				((mb_data[ATR_FSTP]==0) ||										//едем если не знаем общее количество шагов или
 8001774:	2b00      	cmp	r3, #0
 8001776:	d021      	beq.n	80017bc <main+0x6bc>
				((mb_data[ATR_FSTP])&&(mb_data[ATR_POL_OTN]>0))) &&				//    если знаем, но не доехали до 0
 8001778:	4b58      	ldr	r3, [pc, #352]	; (80018dc <main+0x7dc>)
 800177a:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01c      	beq.n	80017bc <main+0x6bc>
				(mb_data[IN_IST]&(1<<IN_KN_MEN)) )								//едем по Кн М
 8001782:	4b56      	ldr	r3, [pc, #344]	; (80018dc <main+0x7dc>)
 8001784:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001788:	f003 0320 	and.w	r3, r3, #32
				((mb_data[ATR_FSTP])&&(mb_data[ATR_POL_OTN]>0))) &&				//    если знаем, но не доехали до 0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d015      	beq.n	80017bc <main+0x6bc>
			{
			mb_data[OUT_IST]&=~(1<<OUT_ED_NAPR);								//против Часовой
 8001790:	4b52      	ldr	r3, [pc, #328]	; (80018dc <main+0x7dc>)
 8001792:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8001796:	f023 0304 	bic.w	r3, r3, #4
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <main+0x7dc>)
 800179e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			mb_data[OUT_IST]&=~(1<<OUT_ED_ENAB);								//держим ЭД
 80017a2:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <main+0x7dc>)
 80017a4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80017a8:	f023 0308 	bic.w	r3, r3, #8
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <main+0x7dc>)
 80017b0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			bitEdemNet=1;														//старт ШиМ
 80017b4:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <main+0x7e0>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e034      	b.n	8001826 <main+0x726>
			}
		//движение по частовой в МАКС
		else if ( !(mb_data[IN_IST]&(1<<IN_ATR_MAX)) &&							//если АТР не на МАКС
 80017bc:	4b47      	ldr	r3, [pc, #284]	; (80018dc <main+0x7dc>)
 80017be:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d129      	bne.n	800181e <main+0x71e>
				((mb_data[ATR_FSTP]==0) ||										//едем если ещё не сохранили МАКС или
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <main+0x7dc>)
 80017cc:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
		else if ( !(mb_data[IN_IST]&(1<<IN_ATR_MAX)) &&							//если АТР не на МАКС
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <main+0x6e4>
				(mb_data[ATR_POL_OTN]<=mb_data[ATR_FSTP]) ) &&					//     не доехали до него
 80017d4:	4b41      	ldr	r3, [pc, #260]	; (80018dc <main+0x7dc>)
 80017d6:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <main+0x7dc>)
 80017dc:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
				((mb_data[ATR_FSTP]==0) ||										//едем если ещё не сохранили МАКС или
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d81c      	bhi.n	800181e <main+0x71e>
				(mb_data[IN_IST]&(1<<IN_KN_BOL)) )								//едем по Кн Б
 80017e4:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <main+0x7dc>)
 80017e6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80017ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
				(mb_data[ATR_POL_OTN]<=mb_data[ATR_FSTP]) ) &&					//     не доехали до него
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d015      	beq.n	800181e <main+0x71e>
			{
			mb_data[OUT_IST]|=(1<<OUT_ED_NAPR);									//по Часовой
 80017f2:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <main+0x7dc>)
 80017f4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <main+0x7dc>)
 8001800:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			mb_data[OUT_IST]&=~(1<<OUT_ED_ENAB);								//держим ЭД
 8001804:	4b35      	ldr	r3, [pc, #212]	; (80018dc <main+0x7dc>)
 8001806:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800180a:	f023 0308 	bic.w	r3, r3, #8
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <main+0x7dc>)
 8001812:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			bitEdemNet=1;														//старт ШиМ
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <main+0x7e0>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e003      	b.n	8001826 <main+0x726>
			}
		else {bitEdemNet=0;}
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <main+0x7e0>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
		if ( !(mb_data[IN_IST]&(1<<IN_ATR_MIN))&&								//если АТР не на МиН
 8001824:	e095      	b.n	8001952 <main+0x852>
 8001826:	e094      	b.n	8001952 <main+0x852>
	} // end Авто-2

	// Ручное управление. Отпускание ЭД! и вращение АТР за ручку
	// долгое М+Б=>0< ; долгое М=>220В< ; долгое Б=ВКЛ/ВЫКЛ слежения за напряжением
	else if ( !(mb_data[IN_IST]&(1<<IN_AVTO1)) && !(mb_data[IN_IST]&(1<<IN_AVTO2)) ){
 8001828:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <main+0x7dc>)
 800182a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 8084 	bne.w	8001940 <main+0x840>
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <main+0x7dc>)
 800183a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d17c      	bne.n	8001940 <main+0x840>
		bitEdemNet=0;
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <main+0x7e0>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
		mb_data[OUT_IST] |= (1<<OUT_ED_ENAB);
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <main+0x7dc>)
 800184e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <main+0x7dc>)
 800185a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		mb_data[IN_IST]&=~(1<<IN_AUTO_MEN);
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <main+0x7dc>)
 8001860:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <main+0x7dc>)
 800186c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		mb_data[IN_IST]&=~(1<<IN_AUTO_BOL);
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <main+0x7dc>)
 8001872:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <main+0x7dc>)
 800187e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		//********************** Функции долгих нажатий (долгое М или Б) **********************//
		if (mb_data[IN_IST]&(1<<IN_KN_MMMEN)) {		//Руками установили на >220В< и расчитали все другие переменные
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <main+0x7dc>)
 8001884:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00b      	beq.n	80018a8 <main+0x7a8>
			//mb_data[ATR_FSTP]=mb_data[ATR_FSTP_HD]; // так НЕНАДО!!!!!
			//mb_data[ATR_POL_OTN]=(22*mb_data[ATR_FSTP])/45;
			//atr_ZADAN_V=220.0;
			//mb_data[ATR_ZADAN_SH]=mb_data[ATR_POL_OTN];
			mb_data[IN_IST]&=~(1<<IN_KN_MMMEN);
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <main+0x7dc>)
 8001892:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <main+0x7dc>)
 800189e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			signal_1=1;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <main+0x7e4>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
		}
		if (mb_data[IN_IST]&(1<<IN_KN_BBBOL)) {		//ВКЛ/ОТКЛ слежения за U и отработка
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <main+0x7dc>)
 80018aa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da25      	bge.n	8001900 <main+0x800>
			mb_data[OUT_IST]^=(1<<OUT_SLEJEN);
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <main+0x7dc>)
 80018b6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80018ba:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <main+0x7dc>)
 80018c2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
			if (mb_data[OUT_IST]&(1<<OUT_SLEJEN)) {signal_1=1;} else {signal_0=1;}
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <main+0x7dc>)
 80018c8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d009      	beq.n	80018e8 <main+0x7e8>
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <main+0x7e4>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	e008      	b.n	80018ee <main+0x7ee>
 80018dc:	2000043c 	.word	0x2000043c
 80018e0:	200006a0 	.word	0x200006a0
 80018e4:	2000069f 	.word	0x2000069f
 80018e8:	4b7c      	ldr	r3, [pc, #496]	; (8001adc <main+0x9dc>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
			mb_data[IN_IST]&=~(1<<IN_KN_BBBOL);
 80018ee:	4b7c      	ldr	r3, [pc, #496]	; (8001ae0 <main+0x9e0>)
 80018f0:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80018f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b79      	ldr	r3, [pc, #484]	; (8001ae0 <main+0x9e0>)
 80018fc:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		}
		if (mb_data[IN_IST]&(1<<IN_KN_MPB)) {	//М+Б в ручном режиме = обнуление уставок и М�?Н МАКС
 8001900:	4b77      	ldr	r3, [pc, #476]	; (8001ae0 <main+0x9e0>)
 8001902:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	2b00      	cmp	r3, #0
 800190c:	d021      	beq.n	8001952 <main+0x852>
			mb_data[ATR_FSTP]=0;				//МАКС=0
 800190e:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <main+0x9e0>)
 8001910:	2200      	movs	r2, #0
 8001912:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
			mb_data[ATR_POL_OTN]=0;				//относительное положе=0
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <main+0x9e0>)
 8001918:	2200      	movs	r2, #0
 800191a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
			mb_data[ATR_ZADAN_SH]=0;			//уставка по шагам=0
 800191e:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <main+0x9e0>)
 8001920:	2200      	movs	r2, #0
 8001922:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
			count_stepHome=0;					//сброс функции "Домой"
 8001926:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <main+0x9e4>)
 8001928:	2200      	movs	r2, #0
 800192a:	801a      	strh	r2, [r3, #0]
			mb_data[IN_IST]&=~(1<<IN_KN_MPB);	//сброс М+Б
 800192c:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <main+0x9e0>)
 800192e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b69      	ldr	r3, [pc, #420]	; (8001ae0 <main+0x9e0>)
 800193a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		if (mb_data[IN_IST]&(1<<IN_KN_MPB)) {	//М+Б в ручном режиме = обнуление уставок и М�?Н МАКС
 800193e:	e008      	b.n	8001952 <main+0x852>
		}
	}
	// Аварийная комбинация (залип переключатель) НО! это комбинация может возникнуть при быстром переключении!
	else {GPIOC->ODR |= (1<<12); bitEdemNet=0;} //отпустить ЭД, отключить Ш�?М.
 8001940:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <main+0x9e8>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	4a68      	ldr	r2, [pc, #416]	; (8001ae8 <main+0x9e8>)
 8001946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194a:	6153      	str	r3, [r2, #20]
 800194c:	4b67      	ldr	r3, [pc, #412]	; (8001aec <main+0x9ec>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
		//if (mb_data[IN_IST]&(1<<IN_ATR_MAX)) {mb_data[ATR_FSTP]=mb_data[ATR_POL_OTN];}

////////////////////////////////////////////////////////////////////
//********************** Применение выходов **********************//
////////////////////////////////////////////////////////////////////
	if (mb_data[OUT_IST]&(1<<OUT_ED_NAPR))	{GPIOD->ODR |= (1<<2);}		// ЭД по частовой
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <main+0x9e0>)
 8001954:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <main+0x86e>
 8001960:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <main+0x9f0>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a62      	ldr	r2, [pc, #392]	; (8001af0 <main+0x9f0>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6153      	str	r3, [r2, #20]
 800196c:	e005      	b.n	800197a <main+0x87a>
	else									{GPIOD->ODR &=~ (1<<2);}	// ЭД против частовой
 800196e:	4b60      	ldr	r3, [pc, #384]	; (8001af0 <main+0x9f0>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	4a5f      	ldr	r2, [pc, #380]	; (8001af0 <main+0x9f0>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6153      	str	r3, [r2, #20]
	if (mb_data[OUT_IST]&(1<<OUT_ED_ENAB))	{GPIOC->ODR |= (1<<12);}	// ЭД отпущен
 800197a:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <main+0x9e0>)
 800197c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <main+0x896>
 8001988:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <main+0x9e8>)
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	4a56      	ldr	r2, [pc, #344]	; (8001ae8 <main+0x9e8>)
 800198e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001992:	6153      	str	r3, [r2, #20]
 8001994:	e005      	b.n	80019a2 <main+0x8a2>
	else									{GPIOC->ODR &=~ (1<<12);}	// ЭД держим
 8001996:	4b54      	ldr	r3, [pc, #336]	; (8001ae8 <main+0x9e8>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	4a53      	ldr	r2, [pc, #332]	; (8001ae8 <main+0x9e8>)
 800199c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019a0:	6153      	str	r3, [r2, #20]
	if (bitEdemNet) {HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);}		// ЭД едет
 80019a2:	4b52      	ldr	r3, [pc, #328]	; (8001aec <main+0x9ec>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <main+0x8b4>
 80019aa:	2104      	movs	r1, #4
 80019ac:	4851      	ldr	r0, [pc, #324]	; (8001af4 <main+0x9f4>)
 80019ae:	f003 fb77 	bl	80050a0 <HAL_TIM_PWM_Start_IT>
 80019b2:	e003      	b.n	80019bc <main+0x8bc>
	else {HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);}					// ЭД стоит
 80019b4:	2104      	movs	r1, #4
 80019b6:	484f      	ldr	r0, [pc, #316]	; (8001af4 <main+0x9f4>)
 80019b8:	f003 fcca 	bl	8005350 <HAL_TIM_PWM_Stop_IT>
	//errGPM=0;
	//}


	//********************** >Т35 **********************//
	if ( !MB_MyPac_OK && (MB_counT35>=MB_dT35) ) {
 80019bc:	4b4e      	ldr	r3, [pc, #312]	; (8001af8 <main+0x9f8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11b      	bne.n	80019fc <main+0x8fc>
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <main+0x9fc>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <main+0xa00>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d313      	bcc.n	80019fc <main+0x8fc>
		// СЮДА ПРОПИСАЛЬ ЗАЩИТУ ОТ ОБРЫВА СВЯЗИ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		MB_counT35=0;
 80019d4:	4b49      	ldr	r3, [pc, #292]	; (8001afc <main+0x9fc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
		MB_buffCount=0;
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <main+0xa04>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
		if (provSvyazCount2>=1000) {errGPM=1;}
 80019e0:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <main+0xa08>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019e8:	d302      	bcc.n	80019f0 <main+0x8f0>
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <main+0xa0c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
		//else {errGPM=0;}
		MB_BUFF[0]=0xff; MB_BUFF[1]=0xff;   //это стираем ID и COM навсякий, но это ОПАСНО!
 80019f0:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <main+0xa10>)
 80019f2:	22ff      	movs	r2, #255	; 0xff
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <main+0xa10>)
 80019f8:	22ff      	movs	r2, #255	; 0xff
 80019fa:	705a      	strb	r2, [r3, #1]
	}

//********************** (Tx) ОТВЕЧАЕМ КОГДА ПАКЕТ МОЙ и Т35 **********************//
	if ( MB_MyPac_OK && (MB_counT35>=MB_dT35) ) {
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <main+0x9f8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01a      	beq.n	8001a3a <main+0x93a>
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <main+0x9fc>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <main+0xa00>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d312      	bcc.n	8001a3a <main+0x93a>
		MB_counT35=0;
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <main+0x9fc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	801a      	strh	r2, [r3, #0]
		MB_buffCount=0;
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <main+0xa04>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
		MB_MyPac_OK=0;
 8001a20:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <main+0x9f8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)MB_BUFF, txPac);
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <main+0xa14>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4938      	ldr	r1, [pc, #224]	; (8001b10 <main+0xa10>)
 8001a2e:	483a      	ldr	r0, [pc, #232]	; (8001b18 <main+0xa18>)
 8001a30:	f004 fda2 	bl	8006578 <HAL_UART_Transmit_IT>
		MB_BUFF[0]=0xff;
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <main+0xa10>)
 8001a36:	22ff      	movs	r2, #255	; 0xff
 8001a38:	701a      	strb	r2, [r3, #0]
	}

//************** Подготовка данных пакета отправки китайскому ваттемтру **********//
	MB3_BUFF[0]=248; //id китайского ваттметра
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <main+0xa1c>)
 8001a3c:	22f8      	movs	r2, #248	; 0xf8
 8001a3e:	701a      	strb	r2, [r3, #0]
	MB3_BUFF[1]=4;   //0x04 код функции чтения регистров
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <main+0xa1c>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	705a      	strb	r2, [r3, #1]
	MB3_BUFF[2]=0; MB3_BUFF[3]=0; //адрес 1 регистра
 8001a46:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <main+0xa1c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	709a      	strb	r2, [r3, #2]
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <main+0xa1c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	70da      	strb	r2, [r3, #3]
	MB3_BUFF[4]=0; MB3_BUFF[5]=10; //количество регистров
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <main+0xa1c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	711a      	strb	r2, [r3, #4]
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <main+0xa1c>)
 8001a5a:	220a      	movs	r2, #10
 8001a5c:	715a      	strb	r2, [r3, #5]
	MB3_BUFF[7]=0x64; MB3_BUFF[6]=0x64; //crc-16
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <main+0xa1c>)
 8001a60:	2264      	movs	r2, #100	; 0x64
 8001a62:	71da      	strb	r2, [r3, #7]
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <main+0xa1c>)
 8001a66:	2264      	movs	r2, #100	; 0x64
 8001a68:	719a      	strb	r2, [r3, #6]
//********************* Опрашиваем китайский ваттметр ********************//
	if (MB3_count_Tx>=MB3_Tim_Tx){
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <main+0xa20>)
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <main+0xa24>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d310      	bcc.n	8001a98 <main+0x998>
		MB3_count_Tx=0;
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <main+0xa20>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*)MB3_preBUFF, rx3Pac); //запуск следующего приёма
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <main+0xa28>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	492a      	ldr	r1, [pc, #168]	; (8001b2c <main+0xa2c>)
 8001a84:	482a      	ldr	r0, [pc, #168]	; (8001b30 <main+0xa30>)
 8001a86:	f004 fde5 	bl	8006654 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart3,(uint8_t*)MB3_BUFF, tx3Pac);
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <main+0xa34>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4922      	ldr	r1, [pc, #136]	; (8001b1c <main+0xa1c>)
 8001a92:	4827      	ldr	r0, [pc, #156]	; (8001b30 <main+0xa30>)
 8001a94:	f004 fd70 	bl	8006578 <HAL_UART_Transmit_IT>
	}
//********************* Парсим что пришло от кит.ват. *********************//
	if ( (!MB3_MyPac_OK)&&(!Crc16(MB3_preBUFF, 25)) ){
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <main+0xa38>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 80b1 	bne.w	8001c04 <main+0xb04>
 8001aa2:	2119      	movs	r1, #25
 8001aa4:	4821      	ldr	r0, [pc, #132]	; (8001b2c <main+0xa2c>)
 8001aa6:	f7fe fecd 	bl	8000844 <Crc16>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 80a9 	bne.w	8001c04 <main+0xb04>
		MB3_Prot_adr1reg = KITW_YSTW;	//адресс первого регистра с которого начнём запись в stm
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <main+0xa3c>)
 8001ab4:	225a      	movs	r2, #90	; 0x5a
 8001ab6:	801a      	strh	r2, [r3, #0]
		MB3_Prot_kolreg = (MB3_BUFF[4]<<8)|MB3_BUFF[5];	//кол регистров
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <main+0xa1c>)
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b21a      	sxth	r2, r3
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <main+0xa1c>)
 8001ac2:	795b      	ldrb	r3, [r3, #5]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <main+0xa40>)
 8001ace:	801a      	strh	r2, [r3, #0]
		MB3_Prot_kolbyt = MB3_preBUFF[2];				//кол байт далее
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <main+0xa2c>)
 8001ad2:	789a      	ldrb	r2, [r3, #2]
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <main+0xa44>)
 8001ad6:	701a      	strb	r2, [r3, #0]
		while(MB3_Prot_kolreg)   //сохраняем того что пришло в регистры stm
 8001ad8:	e05d      	b.n	8001b96 <main+0xa96>
 8001ada:	bf00      	nop
 8001adc:	2000069e 	.word	0x2000069e
 8001ae0:	2000043c 	.word	0x2000043c
 8001ae4:	2000069c 	.word	0x2000069c
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	200006a0 	.word	0x200006a0
 8001af0:	48000c00 	.word	0x48000c00
 8001af4:	200008c8 	.word	0x200008c8
 8001af8:	20000637 	.word	0x20000637
 8001afc:	20000568 	.word	0x20000568
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000635 	.word	0x20000635
 8001b08:	200006a8 	.word	0x200006a8
 8001b0c:	200006c4 	.word	0x200006c4
 8001b10:	2000056c 	.word	0x2000056c
 8001b14:	20000004 	.word	0x20000004
 8001b18:	200007ec 	.word	0x200007ec
 8001b1c:	20000640 	.word	0x20000640
 8001b20:	20000684 	.word	0x20000684
 8001b24:	20000006 	.word	0x20000006
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000660 	.word	0x20000660
 8001b30:	200006cc 	.word	0x200006cc
 8001b34:	2000000a 	.word	0x2000000a
 8001b38:	2000067f 	.word	0x2000067f
 8001b3c:	20000680 	.word	0x20000680
 8001b40:	20000682 	.word	0x20000682
 8001b44:	2000067e 	.word	0x2000067e
			{
			mb_data[--MB3_Prot_kolreg + MB3_Prot_adr1reg] = (MB3_preBUFF[2 + MB3_Prot_kolbyt--]) |
 8001b48:	4bab      	ldr	r3, [pc, #684]	; (8001df8 <main+0xcf8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	b2d1      	uxtb	r1, r2
 8001b50:	4aa9      	ldr	r2, [pc, #676]	; (8001df8 <main+0xcf8>)
 8001b52:	7011      	strb	r1, [r2, #0]
 8001b54:	3302      	adds	r3, #2
 8001b56:	4aa9      	ldr	r2, [pc, #676]	; (8001dfc <main+0xcfc>)
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	b21a      	sxth	r2, r3
				(MB3_preBUFF[2 + MB3_Prot_kolbyt--]<<8);
 8001b5c:	4ba6      	ldr	r3, [pc, #664]	; (8001df8 <main+0xcf8>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	1e59      	subs	r1, r3, #1
 8001b62:	b2c8      	uxtb	r0, r1
 8001b64:	49a4      	ldr	r1, [pc, #656]	; (8001df8 <main+0xcf8>)
 8001b66:	7008      	strb	r0, [r1, #0]
 8001b68:	3302      	adds	r3, #2
 8001b6a:	49a4      	ldr	r1, [pc, #656]	; (8001dfc <main+0xcfc>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	021b      	lsls	r3, r3, #8
			mb_data[--MB3_Prot_kolreg + MB3_Prot_adr1reg] = (MB3_preBUFF[2 + MB3_Prot_kolbyt--]) |
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	4ba2      	ldr	r3, [pc, #648]	; (8001e00 <main+0xd00>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	4ba0      	ldr	r3, [pc, #640]	; (8001e00 <main+0xd00>)
 8001b80:	8019      	strh	r1, [r3, #0]
 8001b82:	4b9f      	ldr	r3, [pc, #636]	; (8001e00 <main+0xd00>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4b9e      	ldr	r3, [pc, #632]	; (8001e04 <main+0xd04>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	440b      	add	r3, r1
 8001b8e:	b291      	uxth	r1, r2
 8001b90:	4a9d      	ldr	r2, [pc, #628]	; (8001e08 <main+0xd08>)
 8001b92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		while(MB3_Prot_kolreg)   //сохраняем того что пришло в регистры stm
 8001b96:	4b9a      	ldr	r3, [pc, #616]	; (8001e00 <main+0xd00>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1d4      	bne.n	8001b48 <main+0xa48>
			}
		// Переворачивание H<->L регистров... китайцы! хуле!
		MB3_Prot_adr1reg=mb_data[81];mb_data[81]=mb_data[82];mb_data[82]=MB3_Prot_adr1reg;
 8001b9e:	4b9a      	ldr	r3, [pc, #616]	; (8001e08 <main+0xd08>)
 8001ba0:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8001ba4:	4b97      	ldr	r3, [pc, #604]	; (8001e04 <main+0xd04>)
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	4b97      	ldr	r3, [pc, #604]	; (8001e08 <main+0xd08>)
 8001baa:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8001bae:	4b96      	ldr	r3, [pc, #600]	; (8001e08 <main+0xd08>)
 8001bb0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001bb4:	4b93      	ldr	r3, [pc, #588]	; (8001e04 <main+0xd04>)
 8001bb6:	881a      	ldrh	r2, [r3, #0]
 8001bb8:	4b93      	ldr	r3, [pc, #588]	; (8001e08 <main+0xd08>)
 8001bba:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		MB3_Prot_adr1reg=mb_data[83];mb_data[83]=mb_data[84];mb_data[84]=MB3_Prot_adr1reg;
 8001bbe:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <main+0xd08>)
 8001bc0:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	; 0xa6
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <main+0xd04>)
 8001bc6:	801a      	strh	r2, [r3, #0]
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <main+0xd08>)
 8001bca:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 8001bce:	4b8e      	ldr	r3, [pc, #568]	; (8001e08 <main+0xd08>)
 8001bd0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8001bd4:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <main+0xd04>)
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	4b8b      	ldr	r3, [pc, #556]	; (8001e08 <main+0xd08>)
 8001bda:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		MB3_Prot_adr1reg=mb_data[85];mb_data[85]=mb_data[86];mb_data[86]=MB3_Prot_adr1reg;
 8001bde:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <main+0xd08>)
 8001be0:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 8001be4:	4b87      	ldr	r3, [pc, #540]	; (8001e04 <main+0xd04>)
 8001be6:	801a      	strh	r2, [r3, #0]
 8001be8:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <main+0xd08>)
 8001bea:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8001bee:	4b86      	ldr	r3, [pc, #536]	; (8001e08 <main+0xd08>)
 8001bf0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8001bf4:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <main+0xd04>)
 8001bf6:	881a      	ldrh	r2, [r3, #0]
 8001bf8:	4b83      	ldr	r3, [pc, #524]	; (8001e08 <main+0xd08>)
 8001bfa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		MB3_MyPac_OK=1;
 8001bfe:	4b83      	ldr	r3, [pc, #524]	; (8001e0c <main+0xd0c>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
	}

	zadan_v0.byte1 = mb_data[ATR_ZADAN_V_H];
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <main+0xd08>)
 8001c06:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b80      	ldr	r3, [pc, #512]	; (8001e10 <main+0xd10>)
 8001c0e:	701a      	strb	r2, [r3, #0]
	zadan_v0.byte2 = mb_data[ATR_ZADAN_V_H]>>8;
 8001c10:	4b7d      	ldr	r3, [pc, #500]	; (8001e08 <main+0xd08>)
 8001c12:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b7c      	ldr	r3, [pc, #496]	; (8001e10 <main+0xd10>)
 8001c1e:	705a      	strb	r2, [r3, #1]
	zadan_v0.byte3 = mb_data[ATR_ZADAN_V_L];
 8001c20:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <main+0xd08>)
 8001c22:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <main+0xd10>)
 8001c2a:	709a      	strb	r2, [r3, #2]
	zadan_v0.byte4 = mb_data[ATR_ZADAN_V_L]>>8;
 8001c2c:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <main+0xd08>)
 8001c2e:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b75      	ldr	r3, [pc, #468]	; (8001e10 <main+0xd10>)
 8001c3a:	70da      	strb	r2, [r3, #3]
	if (zadan_vZash != zadan_v0.zadan_v){
 8001c3c:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <main+0xd10>)
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	4b74      	ldr	r3, [pc, #464]	; (8001e14 <main+0xd14>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eeb4 7a67 	vcmp.f32	s14, s15
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	f000 8084 	beq.w	8001d5c <main+0xc5c>
		zadan_vZash = zadan_v0.zadan_v;
 8001c54:	4b6e      	ldr	r3, [pc, #440]	; (8001e10 <main+0xd10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6e      	ldr	r2, [pc, #440]	; (8001e14 <main+0xd14>)
 8001c5a:	6013      	str	r3, [r2, #0]
		zadan_v001p = zadan_v0.zadan_v + (zadan_v0.zadan_v * 0.005);
 8001c5c:	4b6c      	ldr	r3, [pc, #432]	; (8001e10 <main+0xd10>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fd47 	bl	80006f4 <__aeabi_f2d>
 8001c66:	4604      	mov	r4, r0
 8001c68:	460d      	mov	r5, r1
 8001c6a:	4b69      	ldr	r3, [pc, #420]	; (8001e10 <main+0xd10>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fd40 	bl	80006f4 <__aeabi_f2d>
 8001c74:	a35c      	add	r3, pc, #368	; (adr r3, 8001de8 <main+0xce8>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe faad 	bl	80001d8 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fbd7 	bl	8000438 <__adddf3>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe fd87 	bl	80007a4 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <main+0xd18>)
 8001c9a:	6013      	str	r3, [r2, #0]
		zadan_v001m = zadan_v0.zadan_v - (zadan_v0.zadan_v * 0.005);
 8001c9c:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <main+0xd10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fd27 	bl	80006f4 <__aeabi_f2d>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	460d      	mov	r5, r1
 8001caa:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <main+0xd10>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fd20 	bl	80006f4 <__aeabi_f2d>
 8001cb4:	a34c      	add	r3, pc, #304	; (adr r3, 8001de8 <main+0xce8>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fa8d 	bl	80001d8 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fbb5 	bl	8000434 <__aeabi_dsub>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe fd67 	bl	80007a4 <__aeabi_d2f>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a50      	ldr	r2, [pc, #320]	; (8001e1c <main+0xd1c>)
 8001cda:	6013      	str	r3, [r2, #0]
		zadan_v005p = zadan_v0.zadan_v + (zadan_v0.zadan_v * 0.05);
 8001cdc:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <main+0xd10>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fd07 	bl	80006f4 <__aeabi_f2d>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460d      	mov	r5, r1
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <main+0xd10>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fd00 	bl	80006f4 <__aeabi_f2d>
 8001cf4:	a33e      	add	r3, pc, #248	; (adr r3, 8001df0 <main+0xcf0>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fa6d 	bl	80001d8 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fb97 	bl	8000438 <__adddf3>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe fd47 	bl	80007a4 <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a41      	ldr	r2, [pc, #260]	; (8001e20 <main+0xd20>)
 8001d1a:	6013      	str	r3, [r2, #0]
		zadan_v005m = zadan_v0.zadan_v - (zadan_v0.zadan_v * 0.05);
 8001d1c:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <main+0xd10>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fce7 	bl	80006f4 <__aeabi_f2d>
 8001d26:	4604      	mov	r4, r0
 8001d28:	460d      	mov	r5, r1
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <main+0xd10>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fce0 	bl	80006f4 <__aeabi_f2d>
 8001d34:	a32e      	add	r3, pc, #184	; (adr r3, 8001df0 <main+0xcf0>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fa4d 	bl	80001d8 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f7fe fb75 	bl	8000434 <__aeabi_dsub>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7fe fd27 	bl	80007a4 <__aeabi_d2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <main+0xd24>)
 8001d5a:	6013      	str	r3, [r2, #0]


//***********************************************************************************
//************************ ОБРАБОТКА и СОХРАНЕНиЕ ДАННЫХ ПАКЕТА *********************
//***********************************************************************************
	if (!MB_MyPac_OK) {
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <main+0xd28>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f aa1c 	bne.w	800119e <main+0x9e>
		if ( (MB_BUFF[0]==0) || (MB_BUFF[0]==mb_data[0]) ) {
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <main+0xd2c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <main+0xc7e>
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <main+0xd2c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <main+0xd08>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f040 822c 	bne.w	80021d6 <main+0x10d6>

			provSvyazCount2=0;
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <main+0xd30>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	801a      	strh	r2, [r3, #0]

//********************** Команда 16(0x10) ЗАП�?СЬ нескольких регистров ******************
			if ( (MB_BUFF[1]==0x10) && (MB_buffCount==7) ){   //проверка команды и вычисление длины пакета
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <main+0xd2c>)
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d11f      	bne.n	8001dcc <main+0xccc>
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <main+0xd34>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b07      	cmp	r3, #7
 8001d92:	d11b      	bne.n	8001dcc <main+0xccc>
			   MB_Prot_adr1reg = (MB_BUFF[2]<<8)|MB_BUFF[3]; //адресс первого регистра
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <main+0xd2c>)
 8001d96:	789b      	ldrb	r3, [r3, #2]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <main+0xd2c>)
 8001d9e:	78db      	ldrb	r3, [r3, #3]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <main+0xd38>)
 8001daa:	801a      	strh	r2, [r3, #0]
			   MB_Prot_kolreg =  (MB_BUFF[4]<<8)|MB_BUFF[5]; //кол регистров
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <main+0xd2c>)
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <main+0xd2c>)
 8001db6:	795b      	ldrb	r3, [r3, #5]
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <main+0xd3c>)
 8001dc2:	801a      	strh	r2, [r3, #0]
			   MB_Prot_kolbyt = MB_BUFF[6];				     //кол байт далее
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <main+0xd2c>)
 8001dc6:	799a      	ldrb	r2, [r3, #6]
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <main+0xd40>)
 8001dca:	701a      	strb	r2, [r3, #0]
			}
			if ( (MB_buffCount==MB_Prot_kolbyt+7+2) && (!Crc16(MB_BUFF, MB_Prot_kolbyt+7+2)) ) {
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <main+0xd34>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <main+0xd40>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3309      	adds	r3, #9
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d17f      	bne.n	8001edc <main+0xddc>
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <main+0xd40>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3309      	adds	r3, #9
 8001de2:	4619      	mov	r1, r3
 8001de4:	e02e      	b.n	8001e44 <main+0xd44>
 8001de6:	bf00      	nop
 8001de8:	47ae147b 	.word	0x47ae147b
 8001dec:	3f747ae1 	.word	0x3f747ae1
 8001df0:	9999999a 	.word	0x9999999a
 8001df4:	3fa99999 	.word	0x3fa99999
 8001df8:	2000067e 	.word	0x2000067e
 8001dfc:	20000660 	.word	0x20000660
 8001e00:	20000682 	.word	0x20000682
 8001e04:	20000680 	.word	0x20000680
 8001e08:	2000043c 	.word	0x2000043c
 8001e0c:	2000067f 	.word	0x2000067f
 8001e10:	20000870 	.word	0x20000870
 8001e14:	200006b0 	.word	0x200006b0
 8001e18:	200006b4 	.word	0x200006b4
 8001e1c:	200006b8 	.word	0x200006b8
 8001e20:	200006bc 	.word	0x200006bc
 8001e24:	200006c0 	.word	0x200006c0
 8001e28:	20000637 	.word	0x20000637
 8001e2c:	2000056c 	.word	0x2000056c
 8001e30:	200006a8 	.word	0x200006a8
 8001e34:	20000635 	.word	0x20000635
 8001e38:	20000638 	.word	0x20000638
 8001e3c:	2000063a 	.word	0x2000063a
 8001e40:	20000636 	.word	0x20000636
 8001e44:	4859      	ldr	r0, [pc, #356]	; (8001fac <main+0xeac>)
 8001e46:	f7fe fcfd 	bl	8000844 <Crc16>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d145      	bne.n	8001edc <main+0xddc>
			   while(MB_Prot_kolreg)   //сохраняем положение регистров (реле)
 8001e50:	e026      	b.n	8001ea0 <main+0xda0>
			      {
			       mb_data[--MB_Prot_kolreg + MB_Prot_adr1reg] = (MB_BUFF[6 + MB_Prot_kolbyt--]) |
 8001e52:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <main+0xeb0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	b2d1      	uxtb	r1, r2
 8001e5a:	4a55      	ldr	r2, [pc, #340]	; (8001fb0 <main+0xeb0>)
 8001e5c:	7011      	strb	r1, [r2, #0]
 8001e5e:	3306      	adds	r3, #6
 8001e60:	4a52      	ldr	r2, [pc, #328]	; (8001fac <main+0xeac>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	b21a      	sxth	r2, r3
			    		   (MB_BUFF[6 + MB_Prot_kolbyt--]<<8);
 8001e66:	4b52      	ldr	r3, [pc, #328]	; (8001fb0 <main+0xeb0>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	1e59      	subs	r1, r3, #1
 8001e6c:	b2c8      	uxtb	r0, r1
 8001e6e:	4950      	ldr	r1, [pc, #320]	; (8001fb0 <main+0xeb0>)
 8001e70:	7008      	strb	r0, [r1, #0]
 8001e72:	3306      	adds	r3, #6
 8001e74:	494d      	ldr	r1, [pc, #308]	; (8001fac <main+0xeac>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	021b      	lsls	r3, r3, #8
			       mb_data[--MB_Prot_kolreg + MB_Prot_adr1reg] = (MB_BUFF[6 + MB_Prot_kolbyt--]) |
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <main+0xeb4>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b299      	uxth	r1, r3
 8001e88:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <main+0xeb4>)
 8001e8a:	8019      	strh	r1, [r3, #0]
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <main+0xeb4>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <main+0xeb8>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	440b      	add	r3, r1
 8001e98:	b291      	uxth	r1, r2
 8001e9a:	4a48      	ldr	r2, [pc, #288]	; (8001fbc <main+0xebc>)
 8001e9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			   while(MB_Prot_kolreg)   //сохраняем положение регистров (реле)
 8001ea0:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <main+0xeb4>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1d4      	bne.n	8001e52 <main+0xd52>
			      }
			   crc16rez = Crc16(MB_BUFF, 6);                  //расчёт crc16 для ответа
 8001ea8:	2106      	movs	r1, #6
 8001eaa:	4840      	ldr	r0, [pc, #256]	; (8001fac <main+0xeac>)
 8001eac:	f7fe fcca 	bl	8000844 <Crc16>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <main+0xec0>)
 8001eb6:	801a      	strh	r2, [r3, #0]
			   MB_BUFF[6] = crc16rez;                         //в ответ: Lo crc16
 8001eb8:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <main+0xec0>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <main+0xeac>)
 8001ec0:	719a      	strb	r2, [r3, #6]
			   MB_BUFF[7] = crc16rez>>8;                      //в ответ: Hi crc16
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <main+0xec0>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b37      	ldr	r3, [pc, #220]	; (8001fac <main+0xeac>)
 8001ece:	71da      	strb	r2, [r3, #7]
			   txPac = 8; //должен быть кол-во отправляемых байт -1
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <main+0xec4>)
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	801a      	strh	r2, [r3, #0]
			   MB_MyPac_OK=1;
 8001ed6:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <main+0xec8>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
			}//end Команда 0x10

//********************** Команда 06(0x06) ЗАП�?СЬ 1 регистра ******************
			if ( (MB_BUFF[1]==0x06) && (MB_buffCount==8) && (!Crc16(MB_BUFF, 8)) ) {
 8001edc:	4b33      	ldr	r3, [pc, #204]	; (8001fac <main+0xeac>)
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	2b06      	cmp	r3, #6
 8001ee2:	d12c      	bne.n	8001f3e <main+0xe3e>
 8001ee4:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <main+0xecc>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d128      	bne.n	8001f3e <main+0xe3e>
 8001eec:	2108      	movs	r1, #8
 8001eee:	482f      	ldr	r0, [pc, #188]	; (8001fac <main+0xeac>)
 8001ef0:	f7fe fca8 	bl	8000844 <Crc16>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d121      	bne.n	8001f3e <main+0xe3e>
			   MB_Prot_adr1reg = (MB_BUFF[2]<<8)|MB_BUFF[3];          //адресс первого регистра
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <main+0xeac>)
 8001efc:	789b      	ldrb	r3, [r3, #2]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <main+0xeac>)
 8001f04:	78db      	ldrb	r3, [r3, #3]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <main+0xeb8>)
 8001f10:	801a      	strh	r2, [r3, #0]
			   mb_data[MB_Prot_adr1reg] = (MB_BUFF[4]<<8)|MB_BUFF[5]; //сохраняем положение регистров (реле)
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <main+0xeac>)
 8001f14:	791b      	ldrb	r3, [r3, #4]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <main+0xeac>)
 8001f1c:	795b      	ldrb	r3, [r3, #5]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b219      	sxth	r1, r3
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <main+0xeb8>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	b289      	uxth	r1, r1
 8001f2c:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <main+0xebc>)
 8001f2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			   txPac = 8; //должен быть кол-во отправляемых байт -1
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <main+0xec4>)
 8001f34:	2208      	movs	r2, #8
 8001f36:	801a      	strh	r2, [r3, #0]
			   MB_MyPac_OK=1;
 8001f38:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <main+0xec8>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
			}//end Команда 0x06
		//}
		//if ( (MB_BUFF[0]==0) || (MB_BUFF[0]==mb_data[0]) || (MB_BUFF[0]==30) ) {
//********************** Команда 03 (0x03) ЧТЕНиЕ нескольких регистров ******************
			if ( (MB_BUFF[1]==0x03) && (MB_buffCount==8) && (!Crc16(MB_BUFF, 8)) ){   //проверка команды и вычисление длины пакета
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <main+0xeac>)
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	f040 80a1 	bne.w	800208a <main+0xf8a>
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <main+0xecc>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	f040 809c 	bne.w	800208a <main+0xf8a>
 8001f52:	2108      	movs	r1, #8
 8001f54:	4815      	ldr	r0, [pc, #84]	; (8001fac <main+0xeac>)
 8001f56:	f7fe fc75 	bl	8000844 <Crc16>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8094 	bne.w	800208a <main+0xf8a>
		   		MB_Prot_adr1reg = (MB_BUFF[2]<<8)|MB_BUFF[3]; //адресс первого регистра
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <main+0xeac>)
 8001f64:	789b      	ldrb	r3, [r3, #2]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <main+0xeac>)
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <main+0xeb8>)
 8001f78:	801a      	strh	r2, [r3, #0]
		   		MB_Prot_kolreg =  ( (MB_BUFF[4]<<8)|MB_BUFF[5] ); //кол регистров
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <main+0xeac>)
 8001f7c:	791b      	ldrb	r3, [r3, #4]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <main+0xeac>)
 8001f84:	795b      	ldrb	r3, [r3, #5]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <main+0xeb4>)
 8001f90:	801a      	strh	r2, [r3, #0]
		   		//далее формирование отвера (запрошеных регистров)
		   		MB_Prot_kolbyt = MB_Prot_kolreg*2;  //количество байт далее
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <main+0xeb4>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <main+0xeb0>)
 8001f9e:	701a      	strb	r2, [r3, #0]
		   		MB_BUFF[2] = MB_Prot_kolbyt;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <main+0xeb0>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b01      	ldr	r3, [pc, #4]	; (8001fac <main+0xeac>)
 8001fa6:	709a      	strb	r2, [r3, #2]
		   		while(MB_Prot_kolbyt)   //сохраняем положение регистров (реле)
 8001fa8:	e044      	b.n	8002034 <main+0xf34>
 8001faa:	bf00      	nop
 8001fac:	2000056c 	.word	0x2000056c
 8001fb0:	20000636 	.word	0x20000636
 8001fb4:	2000063a 	.word	0x2000063a
 8001fb8:	20000638 	.word	0x20000638
 8001fbc:	2000043c 	.word	0x2000043c
 8001fc0:	2000063c 	.word	0x2000063c
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	20000637 	.word	0x20000637
 8001fcc:	20000635 	.word	0x20000635
		   			{
		   			MB_BUFF[--MB_Prot_kolbyt+3] = mb_data[MB_Prot_kolreg + MB_Prot_adr1reg-1];
 8001fd0:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <main+0xff8>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b49      	ldr	r3, [pc, #292]	; (80020fc <main+0xffc>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	4a48      	ldr	r2, [pc, #288]	; (8002100 <main+0x1000>)
 8001fe0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fe4:	4b47      	ldr	r3, [pc, #284]	; (8002104 <main+0x1004>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b2d9      	uxtb	r1, r3
 8001fec:	4b45      	ldr	r3, [pc, #276]	; (8002104 <main+0x1004>)
 8001fee:	7019      	strb	r1, [r3, #0]
 8001ff0:	4b44      	ldr	r3, [pc, #272]	; (8002104 <main+0x1004>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	3303      	adds	r3, #3
 8001ff6:	b2d1      	uxtb	r1, r2
 8001ff8:	4a43      	ldr	r2, [pc, #268]	; (8002108 <main+0x1008>)
 8001ffa:	54d1      	strb	r1, [r2, r3]
		   			MB_BUFF[--MB_Prot_kolbyt+3] = (mb_data[MB_Prot_kolreg-- + MB_Prot_adr1reg-1])>>8;
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <main+0xff8>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	b291      	uxth	r1, r2
 8002004:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <main+0xff8>)
 8002006:	8011      	strh	r1, [r2, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <main+0xffc>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	3b01      	subs	r3, #1
 8002012:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <main+0x1000>)
 8002014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <main+0x1004>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	b2d9      	uxtb	r1, r3
 8002024:	4b37      	ldr	r3, [pc, #220]	; (8002104 <main+0x1004>)
 8002026:	7019      	strb	r1, [r3, #0]
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <main+0x1004>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	3303      	adds	r3, #3
 800202e:	b2d1      	uxtb	r1, r2
 8002030:	4a35      	ldr	r2, [pc, #212]	; (8002108 <main+0x1008>)
 8002032:	54d1      	strb	r1, [r2, r3]
		   		while(MB_Prot_kolbyt)   //сохраняем положение регистров (реле)
 8002034:	4b33      	ldr	r3, [pc, #204]	; (8002104 <main+0x1004>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1c9      	bne.n	8001fd0 <main+0xed0>
		   			}
		   		crc16rez = Crc16(MB_BUFF, 3+MB_BUFF[2]);                  //расчёт crc16 для ответа
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <main+0x1008>)
 800203e:	789b      	ldrb	r3, [r3, #2]
 8002040:	3303      	adds	r3, #3
 8002042:	4619      	mov	r1, r3
 8002044:	4830      	ldr	r0, [pc, #192]	; (8002108 <main+0x1008>)
 8002046:	f7fe fbfd 	bl	8000844 <Crc16>
 800204a:	4603      	mov	r3, r0
 800204c:	b29a      	uxth	r2, r3
 800204e:	4b2f      	ldr	r3, [pc, #188]	; (800210c <main+0x100c>)
 8002050:	801a      	strh	r2, [r3, #0]
		   		MB_BUFF[3+MB_BUFF[2]] = crc16rez;                         //в ответ: Lo crc16
 8002052:	4b2e      	ldr	r3, [pc, #184]	; (800210c <main+0x100c>)
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <main+0x1008>)
 8002058:	789b      	ldrb	r3, [r3, #2]
 800205a:	3303      	adds	r3, #3
 800205c:	b2d1      	uxtb	r1, r2
 800205e:	4a2a      	ldr	r2, [pc, #168]	; (8002108 <main+0x1008>)
 8002060:	54d1      	strb	r1, [r2, r3]
		   		MB_BUFF[4+MB_BUFF[2]] = crc16rez>>8;                      //в ответ: Hi crc16
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <main+0x100c>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b29a      	uxth	r2, r3
 800206a:	4b27      	ldr	r3, [pc, #156]	; (8002108 <main+0x1008>)
 800206c:	789b      	ldrb	r3, [r3, #2]
 800206e:	3304      	adds	r3, #4
 8002070:	b2d1      	uxtb	r1, r2
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <main+0x1008>)
 8002074:	54d1      	strb	r1, [r2, r3]
		   		txPac = 5+MB_BUFF[2]; //должен быть кол-во отправляемых байт -1
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <main+0x1008>)
 8002078:	789b      	ldrb	r3, [r3, #2]
 800207a:	b29b      	uxth	r3, r3
 800207c:	3305      	adds	r3, #5
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <main+0x1010>)
 8002082:	801a      	strh	r2, [r3, #0]
		   		MB_MyPac_OK=1;
 8002084:	4b23      	ldr	r3, [pc, #140]	; (8002114 <main+0x1014>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
			}//end Команда 0x03

//********************** Команда 04 (0x04) ЧТЕНиЕ нескольких регистров ******************
			if ( (MB_BUFF[1]==0x04) && (MB_buffCount==8) && (!Crc16(MB_BUFF, 8)) ){   //проверка команды и вычисление длины пакета
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <main+0x1008>)
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	2b04      	cmp	r3, #4
 8002090:	f040 80a1 	bne.w	80021d6 <main+0x10d6>
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <main+0x1018>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b08      	cmp	r3, #8
 800209a:	f040 809c 	bne.w	80021d6 <main+0x10d6>
 800209e:	2108      	movs	r1, #8
 80020a0:	4819      	ldr	r0, [pc, #100]	; (8002108 <main+0x1008>)
 80020a2:	f7fe fbcf 	bl	8000844 <Crc16>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 8094 	bne.w	80021d6 <main+0x10d6>
		   		MB_Prot_adr1reg = (MB_BUFF[2]<<8)|MB_BUFF[3]; //адресс первого регистра
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <main+0x1008>)
 80020b0:	789b      	ldrb	r3, [r3, #2]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <main+0x1008>)
 80020b8:	78db      	ldrb	r3, [r3, #3]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <main+0xffc>)
 80020c4:	801a      	strh	r2, [r3, #0]
		   		MB_Prot_kolreg =  ( (MB_BUFF[4]<<8)|MB_BUFF[5] ); //кол регистров
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <main+0x1008>)
 80020c8:	791b      	ldrb	r3, [r3, #4]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <main+0x1008>)
 80020d0:	795b      	ldrb	r3, [r3, #5]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <main+0xff8>)
 80020dc:	801a      	strh	r2, [r3, #0]
		   		//далее формирование отвера (запрошеных регистров)
		   		MB_Prot_kolbyt = MB_Prot_kolreg*2;  //количество байт далее
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <main+0xff8>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <main+0x1004>)
 80020ea:	701a      	strb	r2, [r3, #0]
		   		MB_BUFF[2] = MB_Prot_kolbyt;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <main+0x1004>)
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <main+0x1008>)
 80020f2:	709a      	strb	r2, [r3, #2]
		   		while(MB_Prot_kolbyt)   //сохраняем положение регистров (реле)
 80020f4:	e044      	b.n	8002180 <main+0x1080>
 80020f6:	bf00      	nop
 80020f8:	2000063a 	.word	0x2000063a
 80020fc:	20000638 	.word	0x20000638
 8002100:	2000043c 	.word	0x2000043c
 8002104:	20000636 	.word	0x20000636
 8002108:	2000056c 	.word	0x2000056c
 800210c:	2000063c 	.word	0x2000063c
 8002110:	20000004 	.word	0x20000004
 8002114:	20000637 	.word	0x20000637
 8002118:	20000635 	.word	0x20000635
		   			{
					MB_BUFF[--MB_Prot_kolbyt+3] = mb_data[MB_Prot_kolreg + MB_Prot_adr1reg-1];
 800211c:	4b67      	ldr	r3, [pc, #412]	; (80022bc <main+0x11bc>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <main+0x11c0>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	3b01      	subs	r3, #1
 800212a:	4a66      	ldr	r2, [pc, #408]	; (80022c4 <main+0x11c4>)
 800212c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002130:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <main+0x11c8>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	3b01      	subs	r3, #1
 8002136:	b2d9      	uxtb	r1, r3
 8002138:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <main+0x11c8>)
 800213a:	7019      	strb	r1, [r3, #0]
 800213c:	4b62      	ldr	r3, [pc, #392]	; (80022c8 <main+0x11c8>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3303      	adds	r3, #3
 8002142:	b2d1      	uxtb	r1, r2
 8002144:	4a61      	ldr	r2, [pc, #388]	; (80022cc <main+0x11cc>)
 8002146:	54d1      	strb	r1, [r2, r3]
		   			MB_BUFF[--MB_Prot_kolbyt+3] = (mb_data[MB_Prot_kolreg-- + MB_Prot_adr1reg-1])>>8;
 8002148:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <main+0x11bc>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	b291      	uxth	r1, r2
 8002150:	4a5a      	ldr	r2, [pc, #360]	; (80022bc <main+0x11bc>)
 8002152:	8011      	strh	r1, [r2, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <main+0x11c0>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	3b01      	subs	r3, #1
 800215e:	4a59      	ldr	r2, [pc, #356]	; (80022c4 <main+0x11c4>)
 8002160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	b29a      	uxth	r2, r3
 8002168:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <main+0x11c8>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	3b01      	subs	r3, #1
 800216e:	b2d9      	uxtb	r1, r3
 8002170:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <main+0x11c8>)
 8002172:	7019      	strb	r1, [r3, #0]
 8002174:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <main+0x11c8>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	3303      	adds	r3, #3
 800217a:	b2d1      	uxtb	r1, r2
 800217c:	4a53      	ldr	r2, [pc, #332]	; (80022cc <main+0x11cc>)
 800217e:	54d1      	strb	r1, [r2, r3]
		   		while(MB_Prot_kolbyt)   //сохраняем положение регистров (реле)
 8002180:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <main+0x11c8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1c9      	bne.n	800211c <main+0x101c>
		   			}
		   		crc16rez = Crc16(MB_BUFF, 3+MB_BUFF[2]);                  //расчёт crc16 для ответа
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <main+0x11cc>)
 800218a:	789b      	ldrb	r3, [r3, #2]
 800218c:	3303      	adds	r3, #3
 800218e:	4619      	mov	r1, r3
 8002190:	484e      	ldr	r0, [pc, #312]	; (80022cc <main+0x11cc>)
 8002192:	f7fe fb57 	bl	8000844 <Crc16>
 8002196:	4603      	mov	r3, r0
 8002198:	b29a      	uxth	r2, r3
 800219a:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <main+0x11d0>)
 800219c:	801a      	strh	r2, [r3, #0]
		   		MB_BUFF[3+MB_BUFF[2]] = crc16rez;                         //в ответ: Lo crc16
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <main+0x11d0>)
 80021a0:	881a      	ldrh	r2, [r3, #0]
 80021a2:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <main+0x11cc>)
 80021a4:	789b      	ldrb	r3, [r3, #2]
 80021a6:	3303      	adds	r3, #3
 80021a8:	b2d1      	uxtb	r1, r2
 80021aa:	4a48      	ldr	r2, [pc, #288]	; (80022cc <main+0x11cc>)
 80021ac:	54d1      	strb	r1, [r2, r3]
		   		MB_BUFF[4+MB_BUFF[2]] = crc16rez>>8;                      //в ответ: Hi crc16
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <main+0x11d0>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <main+0x11cc>)
 80021b8:	789b      	ldrb	r3, [r3, #2]
 80021ba:	3304      	adds	r3, #4
 80021bc:	b2d1      	uxtb	r1, r2
 80021be:	4a43      	ldr	r2, [pc, #268]	; (80022cc <main+0x11cc>)
 80021c0:	54d1      	strb	r1, [r2, r3]
		   		txPac = 5+MB_BUFF[2]; //должен быть кол-во отправляемых байт -1
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <main+0x11cc>)
 80021c4:	789b      	ldrb	r3, [r3, #2]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3305      	adds	r3, #5
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <main+0x11d4>)
 80021ce:	801a      	strh	r2, [r3, #0]
		   		MB_MyPac_OK=1;
 80021d0:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <main+0x11d8>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
			}//end Команда 0x04
		}//end MB_BUFF[0] (My ID)
//********************** Команда 04 (0x04) ЧТЕНиЕ нескольких регистров ID=30 ******************
		if (MB_BUFF[0]==30) {
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <main+0x11cc>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b1e      	cmp	r3, #30
 80021dc:	f47e afdf 	bne.w	800119e <main+0x9e>
			//mb_data[OUT_IST] |= (1<<5);
			if ( (MB_BUFF[1]==0x03) && (MB_buffCount==9) && (!Crc16(MB_BUFF, 9)) ) {
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <main+0x11cc>)
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	f47e afda 	bne.w	800119e <main+0x9e>
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <main+0x11dc>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	f47e afd5 	bne.w	800119e <main+0x9e>
 80021f4:	2109      	movs	r1, #9
 80021f6:	4835      	ldr	r0, [pc, #212]	; (80022cc <main+0x11cc>)
 80021f8:	f7fe fb24 	bl	8000844 <Crc16>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f47e afcd 	bne.w	800119e <main+0x9e>
				//mb_data[OUT_IST] |= (1<<4);
				mb_data[GPM_V_L] = ( (MB_BUFF[3]<<8)|(MB_BUFF[4]) ); //GPM_V_H    123  // Напряжение с GPM-78213 (H)
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <main+0x11cc>)
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	b21a      	sxth	r2, r3
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <main+0x11cc>)
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21b      	sxth	r3, r3
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <main+0x11c4>)
 800221a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
				mb_data[GPM_V_H] = ( (MB_BUFF[5]<<8)|(MB_BUFF[6]) );
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <main+0x11cc>)
 8002220:	795b      	ldrb	r3, [r3, #5]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b21a      	sxth	r2, r3
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <main+0x11cc>)
 8002228:	799b      	ldrb	r3, [r3, #6]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b21b      	sxth	r3, r3
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <main+0x11c4>)
 8002234:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
				tekysheeNapr.byte1 = mb_data[GPM_V_H];
 8002238:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <main+0x11c4>)
 800223a:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <main+0x11e0>)
 8002242:	701a      	strb	r2, [r3, #0]
				tekysheeNapr.byte2 = mb_data[GPM_V_H]>>8;
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <main+0x11c4>)
 8002246:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <main+0x11e0>)
 8002252:	705a      	strb	r2, [r3, #1]
				tekysheeNapr.byte3 = mb_data[GPM_V_L];
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <main+0x11c4>)
 8002256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <main+0x11e0>)
 800225e:	709a      	strb	r2, [r3, #2]
				tekysheeNapr.byte4 = mb_data[GPM_V_L]>>8;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <main+0x11c4>)
 8002262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	b29b      	uxth	r3, r3
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <main+0x11e0>)
 800226e:	70da      	strb	r2, [r3, #3]
				// Проверка изменения напряжения
				if (tekysheeNapr.tekysheeU==provSvyaz) {provSvyazCount++;}//provSvyazCount
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <main+0x11e0>)
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <main+0x11e4>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002284:	d106      	bne.n	8002294 <main+0x1194>
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <main+0x11e8>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <main+0x11e8>)
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	e005      	b.n	80022a0 <main+0x11a0>
				else {provSvyazCount=0; errGPM=0;}
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <main+0x11e8>)
 8002296:	2200      	movs	r2, #0
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <main+0x11ec>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
				if (provSvyazCount>=1000) {errGPM=1;}
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <main+0x11e8>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a8:	d302      	bcc.n	80022b0 <main+0x11b0>
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <main+0x11ec>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
				provSvyaz = tekysheeNapr.tekysheeU;
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <main+0x11e0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <main+0x11e4>)
 80022b6:	6013      	str	r3, [r2, #0]
  while (1){
 80022b8:	f7fe bf71 	b.w	800119e <main+0x9e>
 80022bc:	2000063a 	.word	0x2000063a
 80022c0:	20000638 	.word	0x20000638
 80022c4:	2000043c 	.word	0x2000043c
 80022c8:	20000636 	.word	0x20000636
 80022cc:	2000056c 	.word	0x2000056c
 80022d0:	2000063c 	.word	0x2000063c
 80022d4:	20000004 	.word	0x20000004
 80022d8:	20000637 	.word	0x20000637
 80022dc:	20000635 	.word	0x20000635
 80022e0:	200008c0 	.word	0x200008c0
 80022e4:	200006ac 	.word	0x200006ac
 80022e8:	200006a6 	.word	0x200006a6
 80022ec:	200006c4 	.word	0x200006c4

080022f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0a6      	sub	sp, #152	; 0x98
 80022f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022fa:	2228      	movs	r2, #40	; 0x28
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f005 fc68 	bl	8007bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002304:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2258      	movs	r2, #88	; 0x58
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f005 fc5a 	bl	8007bd4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002320:	2303      	movs	r3, #3
 8002322:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002328:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800232a:	2301      	movs	r3, #1
 800232c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800232e:	2310      	movs	r3, #16
 8002330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800233a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002342:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002350:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002354:	4618      	mov	r0, r3
 8002356:	f001 fa0f 	bl	8003778 <HAL_RCC_OscConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002360:	f000 face 	bl	8002900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002364:	230f      	movs	r3, #15
 8002366:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002368:	2302      	movs	r3, #2
 800236a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002374:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002376:	2300      	movs	r3, #0
 8002378:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800237a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800237e:	2102      	movs	r1, #2
 8002380:	4618      	mov	r0, r3
 8002382:	f002 f90f 	bl	80045a4 <HAL_RCC_ClockConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800238c:	f000 fab8 	bl	8002900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <SystemClock_Config+0xd8>)
 8002392:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 fb2e 	bl	8004a10 <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SystemClock_Config+0xce>
  {
    Error_Handler();
 80023ba:	f000 faa1 	bl	8002900 <Error_Handler>
  }
}
 80023be:	bf00      	nop
 80023c0:	3798      	adds	r7, #152	; 0x98
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	00301025 	.word	0x00301025

080023cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <MX_I2C1_Init+0x74>)
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <MX_I2C1_Init+0x78>)
 80023d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <MX_I2C1_Init+0x74>)
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <MX_I2C1_Init+0x7c>)
 80023da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <MX_I2C1_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <MX_I2C1_Init+0x74>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <MX_I2C1_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <MX_I2C1_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <MX_I2C1_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_I2C1_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MX_I2C1_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002406:	480e      	ldr	r0, [pc, #56]	; (8002440 <MX_I2C1_Init+0x74>)
 8002408:	f001 f890 	bl	800352c <HAL_I2C_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002412:	f000 fa75 	bl	8002900 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002416:	2100      	movs	r1, #0
 8002418:	4809      	ldr	r0, [pc, #36]	; (8002440 <MX_I2C1_Init+0x74>)
 800241a:	f001 f916 	bl	800364a <HAL_I2CEx_ConfigAnalogFilter>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002424:	f000 fa6c 	bl	8002900 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002428:	2100      	movs	r1, #0
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_I2C1_Init+0x74>)
 800242c:	f001 f958 	bl	80036e0 <HAL_I2CEx_ConfigDigitalFilter>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002436:	f000 fa63 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000750 	.word	0x20000750
 8002444:	40005400 	.word	0x40005400
 8002448:	2000090e 	.word	0x2000090e

0800244c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <MX_TIM1_Init+0x9c>)
 800246c:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <MX_TIM1_Init+0xa0>)
 800246e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <MX_TIM1_Init+0x9c>)
 8002472:	2263      	movs	r2, #99	; 0x63
 8002474:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <MX_TIM1_Init+0x9c>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 53;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <MX_TIM1_Init+0x9c>)
 800247e:	2235      	movs	r2, #53	; 0x35
 8002480:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <MX_TIM1_Init+0x9c>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <MX_TIM1_Init+0x9c>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <MX_TIM1_Init+0x9c>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002494:	4814      	ldr	r0, [pc, #80]	; (80024e8 <MX_TIM1_Init+0x9c>)
 8002496:	f002 fcd9 	bl	8004e4c <HAL_TIM_Base_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024a0:	f000 fa2e 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	480d      	ldr	r0, [pc, #52]	; (80024e8 <MX_TIM1_Init+0x9c>)
 80024b2:	f003 fa6b 	bl	800598c <HAL_TIM_ConfigClockSource>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024bc:	f000 fa20 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_TIM1_Init+0x9c>)
 80024d2:	f003 ffa7 	bl	8006424 <HAL_TIMEx_MasterConfigSynchronization>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80024dc:	f000 fa10 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000874 	.word	0x20000874
 80024ec:	40012c00 	.word	0x40012c00

080024f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08e      	sub	sp, #56	; 0x38
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002510:	463b      	mov	r3, r7
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  //htim2.Instance->ARR = 1699;
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002522:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <MX_TIM2_Init+0xe8>)
 8002524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <MX_TIM2_Init+0xe8>)
 800252c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002530:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <MX_TIM2_Init+0xe8>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169;
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <MX_TIM2_Init+0xe8>)
 800253a:	22a9      	movs	r2, #169	; 0xa9
 800253c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <MX_TIM2_Init+0xe8>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <MX_TIM2_Init+0xe8>)
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800254a:	4823      	ldr	r0, [pc, #140]	; (80025d8 <MX_TIM2_Init+0xe8>)
 800254c:	f002 fc7e 	bl	8004e4c <HAL_TIM_Base_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002556:	f000 f9d3 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800255a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002564:	4619      	mov	r1, r3
 8002566:	481c      	ldr	r0, [pc, #112]	; (80025d8 <MX_TIM2_Init+0xe8>)
 8002568:	f003 fa10 	bl	800598c <HAL_TIM_ConfigClockSource>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002572:	f000 f9c5 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002576:	4818      	ldr	r0, [pc, #96]	; (80025d8 <MX_TIM2_Init+0xe8>)
 8002578:	f002 fd30 	bl	8004fdc <HAL_TIM_PWM_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002582:	f000 f9bd 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4810      	ldr	r0, [pc, #64]	; (80025d8 <MX_TIM2_Init+0xe8>)
 8002596:	f003 ff45 	bl	8006424 <HAL_TIMEx_MasterConfigSynchronization>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80025a0:	f000 f9ae 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a4:	2360      	movs	r3, #96	; 0x60
 80025a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 79;
 80025a8:	234f      	movs	r3, #79	; 0x4f
 80025aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b4:	463b      	mov	r3, r7
 80025b6:	2204      	movs	r2, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4807      	ldr	r0, [pc, #28]	; (80025d8 <MX_TIM2_Init+0xe8>)
 80025bc:	f003 f8d2 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80025c6:	f000 f99b 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025ca:	4803      	ldr	r0, [pc, #12]	; (80025d8 <MX_TIM2_Init+0xe8>)
 80025cc:	f000 fa72 	bl	8002ab4 <HAL_TIM_MspPostInit>

}
 80025d0:	bf00      	nop
 80025d2:	3738      	adds	r7, #56	; 0x38
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200008c8 	.word	0x200008c8

080025dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e2:	f107 0310 	add.w	r3, r7, #16
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <MX_TIM3_Init+0x98>)
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <MX_TIM3_Init+0x9c>)
 80025fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002600:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <MX_TIM3_Init+0x98>)
 8002602:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002606:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002608:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <MX_TIM3_Init+0x98>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800260e:	4b19      	ldr	r3, [pc, #100]	; (8002674 <MX_TIM3_Init+0x98>)
 8002610:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002614:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_TIM3_Init+0x98>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <MX_TIM3_Init+0x98>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002622:	4814      	ldr	r0, [pc, #80]	; (8002674 <MX_TIM3_Init+0x98>)
 8002624:	f002 fc12 	bl	8004e4c <HAL_TIM_Base_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800262e:	f000 f967 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002636:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	4619      	mov	r1, r3
 800263e:	480d      	ldr	r0, [pc, #52]	; (8002674 <MX_TIM3_Init+0x98>)
 8002640:	f003 f9a4 	bl	800598c <HAL_TIM_ConfigClockSource>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800264a:	f000 f959 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	; (8002674 <MX_TIM3_Init+0x98>)
 800265c:	f003 fee2 	bl	8006424 <HAL_TIMEx_MasterConfigSynchronization>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002666:	f000 f94b 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200007a0 	.word	0x200007a0
 8002678:	40000400 	.word	0x40000400

0800267c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 8002682:	4a16      	ldr	r2, [pc, #88]	; (80026dc <MX_USART1_UART_Init+0x60>)
 8002684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 8002688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800268c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 80026a2:	220c      	movs	r2, #12
 80026a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80026be:	2300      	movs	r3, #0
 80026c0:	2200      	movs	r2, #0
 80026c2:	2100      	movs	r1, #0
 80026c4:	4804      	ldr	r0, [pc, #16]	; (80026d8 <MX_USART1_UART_Init+0x5c>)
 80026c6:	f005 f9f0 	bl	8007aaa <HAL_RS485Ex_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80026d0:	f000 f916 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200007ec 	.word	0x200007ec
 80026dc:	40013800 	.word	0x40013800

080026e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <MX_USART3_UART_Init+0x5c>)
 80026e6:	4a16      	ldr	r2, [pc, #88]	; (8002740 <MX_USART3_UART_Init+0x60>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <MX_USART3_UART_Init+0x5c>)
 80026ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <MX_USART3_UART_Init+0x5c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <MX_USART3_UART_Init+0x5c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <MX_USART3_UART_Init+0x5c>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <MX_USART3_UART_Init+0x5c>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <MX_USART3_UART_Init+0x5c>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <MX_USART3_UART_Init+0x5c>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <MX_USART3_UART_Init+0x5c>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <MX_USART3_UART_Init+0x5c>)
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002722:	2300      	movs	r3, #0
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	4804      	ldr	r0, [pc, #16]	; (800273c <MX_USART3_UART_Init+0x5c>)
 800272a:	f005 f9be 	bl	8007aaa <HAL_RS485Ex_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002734:	f000 f8e4 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200006cc 	.word	0x200006cc
 8002740:	40004800 	.word	0x40004800

08002744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800275a:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4a64      	ldr	r2, [pc, #400]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 8002760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002764:	6153      	str	r3, [r2, #20]
 8002766:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	4a5e      	ldr	r2, [pc, #376]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 8002778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800277c:	6153      	str	r3, [r2, #20]
 800277e:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 8002790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002794:	6153      	str	r3, [r2, #20]
 8002796:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ac:	6153      	str	r3, [r2, #20]
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ba:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	4a4c      	ldr	r2, [pc, #304]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 80027c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c4:	6153      	str	r3, [r2, #20]
 80027c6:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <MX_GPIO_Init+0x1ac>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepD3_GPIO_Port, StepD3_Pin, GPIO_PIN_RESET);
 80027d2:	2200      	movs	r2, #0
 80027d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027d8:	4846      	ldr	r0, [pc, #280]	; (80028f4 <MX_GPIO_Init+0x1b0>)
 80027da:	f000 fe8f 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepD2_GPIO_Port, StepD2_Pin, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	2104      	movs	r1, #4
 80027e2:	4845      	ldr	r0, [pc, #276]	; (80028f8 <MX_GPIO_Init+0x1b4>)
 80027e4:	f000 fe8a 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OutRezerv1_Pin|PinLEDdebug_Pin, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2130      	movs	r1, #48	; 0x30
 80027ec:	4843      	ldr	r0, [pc, #268]	; (80028fc <MX_GPIO_Init+0x1b8>)
 80027ee:	f000 fe85 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MBadr6_Pin MBadr4_Pin MBadr3_Pin MBadr2_Pin
                           MBadr1_Pin */
  GPIO_InitStruct.Pin = MBadr6_Pin|MBadr4_Pin|MBadr3_Pin|MBadr2_Pin
 80027f2:	f242 030f 	movw	r3, #8207	; 0x200f
 80027f6:	617b      	str	r3, [r7, #20]
                          |MBadr1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027fc:	2301      	movs	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	4619      	mov	r1, r3
 8002806:	483b      	ldr	r0, [pc, #236]	; (80028f4 <MX_GPIO_Init+0x1b0>)
 8002808:	f000 fcee 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MBadr7_Pin */
  GPIO_InitStruct.Pin = MBadr7_Pin;
 800280c:	2301      	movs	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002814:	2301      	movs	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MBadr7_GPIO_Port, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002822:	f000 fce1 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : InKnB_Pin */
  GPIO_InitStruct.Pin = InKnB_Pin;
 8002826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800282a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(InKnB_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4830      	ldr	r0, [pc, #192]	; (80028fc <MX_GPIO_Init+0x1b8>)
 800283c:	f000 fcd4 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : InKnM_Pin InLatrMax_Pin InLatrMin_Pin InRezerv2_Pin */
  GPIO_InitStruct.Pin = InKnM_Pin|InLatrMax_Pin|InLatrMin_Pin|InRezerv2_Pin;
 8002840:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	4827      	ldr	r0, [pc, #156]	; (80028f4 <MX_GPIO_Init+0x1b0>)
 8002856:	f000 fcc7 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : InAuto2_Pin InAuto1_Pin */
  GPIO_InitStruct.Pin = InAuto2_Pin|InAuto1_Pin;
 800285a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800285e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002872:	f000 fcb9 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : StepD3_Pin */
  GPIO_InitStruct.Pin = StepD3_Pin;
 8002876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287c:	2301      	movs	r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(StepD3_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4819      	ldr	r0, [pc, #100]	; (80028f4 <MX_GPIO_Init+0x1b0>)
 8002890:	f000 fcaa 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : StepD2_Pin */
  GPIO_InitStruct.Pin = StepD2_Pin;
 8002894:	2304      	movs	r3, #4
 8002896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002898:	2301      	movs	r3, #1
 800289a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(StepD2_GPIO_Port, &GPIO_InitStruct);
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	4619      	mov	r1, r3
 80028aa:	4813      	ldr	r0, [pc, #76]	; (80028f8 <MX_GPIO_Init+0x1b4>)
 80028ac:	f000 fc9c 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OutRezerv1_Pin PinLEDdebug_Pin */
  GPIO_InitStruct.Pin = OutRezerv1_Pin|PinLEDdebug_Pin;
 80028b0:	2330      	movs	r3, #48	; 0x30
 80028b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	480d      	ldr	r0, [pc, #52]	; (80028fc <MX_GPIO_Init+0x1b8>)
 80028c8:	f000 fc8e 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MBadr5_Pin MBadr0_Pin */
  GPIO_InitStruct.Pin = MBadr5_Pin|MBadr0_Pin;
 80028cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	4806      	ldr	r0, [pc, #24]	; (80028fc <MX_GPIO_Init+0x1b8>)
 80028e2:	f000 fc81 	bl	80031e8 <HAL_GPIO_Init>

}
 80028e6:	bf00      	nop
 80028e8:	3728      	adds	r7, #40	; 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000c00 	.word	0x48000c00
 80028fc:	48000400 	.word	0x48000400

08002900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002908:	e7fe      	b.n	8002908 <Error_Handler+0x8>
	...

0800290c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_MspInit+0x44>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_MspInit+0x44>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6193      	str	r3, [r2, #24]
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_MspInit+0x44>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_MspInit+0x44>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_MspInit+0x44>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_MspInit+0x44>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_I2C_MspInit+0x7c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d127      	bne.n	80029c6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_I2C_MspInit+0x80>)
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_I2C_MspInit+0x80>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6153      	str	r3, [r2, #20]
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_I2C_MspInit+0x80>)
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800298e:	23c0      	movs	r3, #192	; 0xc0
 8002990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002992:	2312      	movs	r3, #18
 8002994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002996:	2301      	movs	r3, #1
 8002998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800299e:	2304      	movs	r3, #4
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	480b      	ldr	r0, [pc, #44]	; (80029d8 <HAL_I2C_MspInit+0x84>)
 80029aa:	f000 fc1d 	bl	80031e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_I2C_MspInit+0x80>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <HAL_I2C_MspInit+0x80>)
 80029b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b8:	61d3      	str	r3, [r2, #28]
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_I2C_MspInit+0x80>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3728      	adds	r7, #40	; 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40005400 	.word	0x40005400
 80029d4:	40021000 	.word	0x40021000
 80029d8:	48000400 	.word	0x48000400

080029dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2f      	ldr	r2, [pc, #188]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d124      	bne.n	8002a38 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4a2e      	ldr	r2, [pc, #184]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 80029f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029f8:	6193      	str	r3, [r2, #24]
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2018      	movs	r0, #24
 8002a0c:	f000 fb3f 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002a10:	2018      	movs	r0, #24
 8002a12:	f000 fb58 	bl	80030c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2019      	movs	r0, #25
 8002a1c:	f000 fb37 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a20:	2019      	movs	r0, #25
 8002a22:	f000 fb50 	bl	80030c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	201a      	movs	r0, #26
 8002a2c:	f000 fb2f 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002a30:	201a      	movs	r0, #26
 8002a32:	f000 fb48 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a36:	e032      	b.n	8002a9e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d114      	bne.n	8002a6c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	201c      	movs	r0, #28
 8002a60:	f000 fb15 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a64:	201c      	movs	r0, #28
 8002a66:	f000 fb2e 	bl	80030c6 <HAL_NVIC_EnableIRQ>
}
 8002a6a:	e018      	b.n	8002a9e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <HAL_TIM_Base_MspInit+0xd4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d113      	bne.n	8002a9e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	201d      	movs	r0, #29
 8002a94:	f000 fafb 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a98:	201d      	movs	r0, #29
 8002a9a:	f000 fb14 	bl	80030c6 <HAL_NVIC_EnableIRQ>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40000400 	.word	0x40000400

08002ab4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad4:	d11b      	bne.n	8002b0e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_TIM_MspPostInit+0x64>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_TIM_MspPostInit+0x64>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae0:	6153      	str	r3, [r2, #20]
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_TIM_MspPostInit+0x64>)
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aee:	2308      	movs	r3, #8
 8002af0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002afe:	2301      	movs	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	4619      	mov	r1, r3
 8002b08:	4804      	ldr	r0, [pc, #16]	; (8002b1c <HAL_TIM_MspPostInit+0x68>)
 8002b0a:	f000 fb6d 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	48000400 	.word	0x48000400

08002b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a46      	ldr	r2, [pc, #280]	; (8002c58 <HAL_UART_MspInit+0x138>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d132      	bne.n	8002ba8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b42:	4b46      	ldr	r3, [pc, #280]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4a45      	ldr	r2, [pc, #276]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6193      	str	r3, [r2, #24]
 8002b4e:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4a3f      	ldr	r2, [pc, #252]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b64:	6153      	str	r3, [r2, #20]
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8002b72:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8002b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b84:	2307      	movs	r3, #7
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b92:	f000 fb29 	bl	80031e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	2025      	movs	r0, #37	; 0x25
 8002b9c:	f000 fa77 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ba0:	2025      	movs	r0, #37	; 0x25
 8002ba2:	f000 fa90 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ba6:	e052      	b.n	8002c4e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <HAL_UART_MspInit+0x140>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d14d      	bne.n	8002c4e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbc:	61d3      	str	r3, [r2, #28]
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd4:	6153      	str	r3, [r2, #20]
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bec:	6153      	str	r3, [r2, #20]
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_UART_MspInit+0x13c>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c0c:	2307      	movs	r3, #7
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c10:	f107 031c 	add.w	r3, r7, #28
 8002c14:	4619      	mov	r1, r3
 8002c16:	4813      	ldr	r0, [pc, #76]	; (8002c64 <HAL_UART_MspInit+0x144>)
 8002c18:	f000 fae6 	bl	80031e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c2e:	2307      	movs	r3, #7
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	480b      	ldr	r0, [pc, #44]	; (8002c68 <HAL_UART_MspInit+0x148>)
 8002c3a:	f000 fad5 	bl	80031e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	2027      	movs	r0, #39	; 0x27
 8002c44:	f000 fa23 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c48:	2027      	movs	r0, #39	; 0x27
 8002c4a:	f000 fa3c 	bl	80030c6 <HAL_NVIC_EnableIRQ>
}
 8002c4e:	bf00      	nop
 8002c50:	3730      	adds	r7, #48	; 0x30
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40004800 	.word	0x40004800
 8002c64:	48000400 	.word	0x48000400
 8002c68:	48000800 	.word	0x48000800

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler+0x4>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb8:	f000 f8ca 	bl	8002e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002cc6:	f002 fc2d 	bl	8005524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000874 	.word	0x20000874

08002cd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002cda:	f002 fc23 	bl	8005524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000874 	.word	0x20000874

08002ce8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002cee:	f002 fc19 	bl	8005524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000874 	.word	0x20000874

08002cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <TIM2_IRQHandler+0x10>)
 8002d02:	f002 fc0f 	bl	8005524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200008c8 	.word	0x200008c8

08002d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <TIM3_IRQHandler+0x10>)
 8002d16:	f002 fc05 	bl	8005524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200007a0 	.word	0x200007a0

08002d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <USART1_IRQHandler+0x10>)
 8002d2a:	f003 fce1 	bl	80066f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200007ec 	.word	0x200007ec

08002d38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d3c:	4802      	ldr	r0, [pc, #8]	; (8002d48 <USART3_IRQHandler+0x10>)
 8002d3e:	f003 fcd7 	bl	80066f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200006cc 	.word	0x200006cc

08002d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <SystemInit+0x20>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <SystemInit+0x20>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d74:	480d      	ldr	r0, [pc, #52]	; (8002dac <LoopForever+0x6>)
  ldr r1, =_edata
 8002d76:	490e      	ldr	r1, [pc, #56]	; (8002db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d78:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <LoopForever+0xe>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d8c:	4c0b      	ldr	r4, [pc, #44]	; (8002dbc <LoopForever+0x16>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d9a:	f7ff ffd7 	bl	8002d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f004 fef5 	bl	8007b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002da2:	f7fe f9ad 	bl	8001100 <main>

08002da6 <LoopForever>:

LoopForever:
    b LoopForever
 8002da6:	e7fe      	b.n	8002da6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002da8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db0:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8002db4:	08007c3c 	.word	0x08007c3c
  ldr r2, =_sbss
 8002db8:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8002dbc:	20000918 	.word	0x20000918

08002dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <ADC1_2_IRQHandler>
	...

08002dc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_Init+0x28>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a07      	ldr	r2, [pc, #28]	; (8002dec <HAL_Init+0x28>)
 8002dce:	f043 0310 	orr.w	r3, r3, #16
 8002dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f000 f94f 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f000 f808 	bl	8002df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de0:	f7ff fd94 	bl	800290c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40022000 	.word	0x40022000

08002df0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_InitTick+0x54>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_InitTick+0x58>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f967 	bl	80030e2 <HAL_SYSTICK_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00e      	b.n	8002e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b0f      	cmp	r3, #15
 8002e22:	d80a      	bhi.n	8002e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e24:	2200      	movs	r2, #0
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	f000 f92f 	bl	800308e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e30:	4a06      	ldr	r2, [pc, #24]	; (8002e4c <HAL_InitTick+0x5c>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000414 	.word	0x20000414
 8002e48:	2000041c 	.word	0x2000041c
 8002e4c:	20000418 	.word	0x20000418

08002e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_IncTick+0x20>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_IncTick+0x24>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_IncTick+0x24>)
 8002e62:	6013      	str	r3, [r2, #0]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	2000041c 	.word	0x2000041c
 8002e74:	20000914 	.word	0x20000914

08002e78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_GetTick+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000914 	.word	0x20000914

08002e90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff ffee 	bl	8002e78 <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d005      	beq.n	8002eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_Delay+0x44>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002eb6:	bf00      	nop
 8002eb8:	f7ff ffde 	bl	8002e78 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d8f7      	bhi.n	8002eb8 <HAL_Delay+0x28>
  {
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000041c 	.word	0x2000041c

08002ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0a:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	60d3      	str	r3, [r2, #12]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <__NVIC_GetPriorityGrouping+0x18>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 0307 	and.w	r3, r3, #7
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	db0b      	blt.n	8002f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4907      	ldr	r1, [pc, #28]	; (8002f74 <__NVIC_EnableIRQ+0x38>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000e100 	.word	0xe000e100

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db0a      	blt.n	8002fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	490c      	ldr	r1, [pc, #48]	; (8002fc4 <__NVIC_SetPriority+0x4c>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa0:	e00a      	b.n	8002fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4908      	ldr	r1, [pc, #32]	; (8002fc8 <__NVIC_SetPriority+0x50>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	761a      	strb	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2304      	movcs	r3, #4
 8002fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d902      	bls.n	8002ffc <NVIC_EncodePriority+0x30>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3b03      	subs	r3, #3
 8002ffa:	e000      	b.n	8002ffe <NVIC_EncodePriority+0x32>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	401a      	ands	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003014:	f04f 31ff 	mov.w	r1, #4294967295
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	4313      	orrs	r3, r2
         );
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003044:	d301      	bcc.n	800304a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003046:	2301      	movs	r3, #1
 8003048:	e00f      	b.n	800306a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <SysTick_Config+0x40>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003052:	210f      	movs	r1, #15
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	f7ff ff8e 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <SysTick_Config+0x40>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <SysTick_Config+0x40>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000e010 	.word	0xe000e010

08003078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff29 	bl	8002ed8 <__NVIC_SetPriorityGrouping>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a0:	f7ff ff3e 	bl	8002f20 <__NVIC_GetPriorityGrouping>
 80030a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff8e 	bl	8002fcc <NVIC_EncodePriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff5d 	bl	8002f78 <__NVIC_SetPriority>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff31 	bl	8002f3c <__NVIC_EnableIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffa2 	bl	8003034 <SysTick_Config>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003108:	2b02      	cmp	r3, #2
 800310a:	d008      	beq.n	800311e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2204      	movs	r2, #4
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e020      	b.n	8003160 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 020e 	bic.w	r2, r2, #14
 800312c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800317e:	2b02      	cmp	r3, #2
 8003180:	d005      	beq.n	800318e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e027      	b.n	80031de <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 020e 	bic.w	r2, r2, #14
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f202 	lsl.w	r2, r1, r2
 80031bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
    } 
  }
  return status;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f6:	e160      	b.n	80034ba <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2101      	movs	r1, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8152 	beq.w	80034b4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d005      	beq.n	8003228 <HAL_GPIO_Init+0x40>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d130      	bne.n	800328a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800325e:	2201      	movs	r2, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 0201 	and.w	r2, r3, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b03      	cmp	r3, #3
 8003294:	d017      	beq.n	80032c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d123      	bne.n	800331a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	08da      	lsrs	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3208      	adds	r2, #8
 8003314:	6939      	ldr	r1, [r7, #16]
 8003316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0203 	and.w	r2, r3, #3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80ac 	beq.w	80034b4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335c:	4b5e      	ldr	r3, [pc, #376]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	4a5d      	ldr	r2, [pc, #372]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6193      	str	r3, [r2, #24]
 8003368:	4b5b      	ldr	r3, [pc, #364]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003374:	4a59      	ldr	r2, [pc, #356]	; (80034dc <HAL_GPIO_Init+0x2f4>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800339e:	d025      	beq.n	80033ec <HAL_GPIO_Init+0x204>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a4f      	ldr	r2, [pc, #316]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01f      	beq.n	80033e8 <HAL_GPIO_Init+0x200>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a4e      	ldr	r2, [pc, #312]	; (80034e4 <HAL_GPIO_Init+0x2fc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d019      	beq.n	80033e4 <HAL_GPIO_Init+0x1fc>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a4d      	ldr	r2, [pc, #308]	; (80034e8 <HAL_GPIO_Init+0x300>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_GPIO_Init+0x1f8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a4c      	ldr	r2, [pc, #304]	; (80034ec <HAL_GPIO_Init+0x304>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00d      	beq.n	80033dc <HAL_GPIO_Init+0x1f4>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a4b      	ldr	r2, [pc, #300]	; (80034f0 <HAL_GPIO_Init+0x308>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <HAL_GPIO_Init+0x1f0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <HAL_GPIO_Init+0x30c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_GPIO_Init+0x1ec>
 80033d0:	2306      	movs	r3, #6
 80033d2:	e00c      	b.n	80033ee <HAL_GPIO_Init+0x206>
 80033d4:	2307      	movs	r3, #7
 80033d6:	e00a      	b.n	80033ee <HAL_GPIO_Init+0x206>
 80033d8:	2305      	movs	r3, #5
 80033da:	e008      	b.n	80033ee <HAL_GPIO_Init+0x206>
 80033dc:	2304      	movs	r3, #4
 80033de:	e006      	b.n	80033ee <HAL_GPIO_Init+0x206>
 80033e0:	2303      	movs	r3, #3
 80033e2:	e004      	b.n	80033ee <HAL_GPIO_Init+0x206>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e002      	b.n	80033ee <HAL_GPIO_Init+0x206>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_GPIO_Init+0x206>
 80033ec:	2300      	movs	r3, #0
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	f002 0203 	and.w	r2, r2, #3
 80033f4:	0092      	lsls	r2, r2, #2
 80033f6:	4093      	lsls	r3, r2
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033fe:	4937      	ldr	r1, [pc, #220]	; (80034dc <HAL_GPIO_Init+0x2f4>)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_GPIO_Init+0x310>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003430:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <HAL_GPIO_Init+0x310>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003436:	4b30      	ldr	r3, [pc, #192]	; (80034f8 <HAL_GPIO_Init+0x310>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800345a:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_GPIO_Init+0x310>)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_GPIO_Init+0x310>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <HAL_GPIO_Init+0x310>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_GPIO_Init+0x310>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <HAL_GPIO_Init+0x310>)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3301      	adds	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f ae97 	bne.w	80031f8 <HAL_GPIO_Init+0x10>
  }
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40010000 	.word	0x40010000
 80034e0:	48000400 	.word	0x48000400
 80034e4:	48000800 	.word	0x48000800
 80034e8:	48000c00 	.word	0x48000c00
 80034ec:	48001000 	.word	0x48001000
 80034f0:	48001400 	.word	0x48001400
 80034f4:	48001800 	.word	0x48001800
 80034f8:	40010400 	.word	0x40010400

080034fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
 8003508:	4613      	mov	r3, r2
 800350a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003518:	e002      	b.n	8003520 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e081      	b.n	8003642 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff f9fe 	bl	8002954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	; 0x24
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800357c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800358c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	e006      	b.n	80035b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d104      	bne.n	80035c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69d9      	ldr	r1, [r3, #28]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b20      	cmp	r3, #32
 800365e:	d138      	bne.n	80036d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800366a:	2302      	movs	r3, #2
 800366c:	e032      	b.n	80036d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2224      	movs	r2, #36	; 0x24
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800369c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d139      	bne.n	800376a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003700:	2302      	movs	r3, #2
 8003702:	e033      	b.n	800376c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	; 0x24
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003732:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800377e:	af00      	add	r7, sp, #0
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f000 bf01 	b.w	8004594 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8160 	beq.w	8003a62 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037a2:	4bae      	ldr	r3, [pc, #696]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d00c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037ae:	4bab      	ldr	r3, [pc, #684]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d159      	bne.n	800386e <HAL_RCC_OscConfig+0xf6>
 80037ba:	4ba8      	ldr	r3, [pc, #672]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d152      	bne.n	800386e <HAL_RCC_OscConfig+0xf6>
 80037c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_OscConfig+0x82>
 80037f4:	4b99      	ldr	r3, [pc, #612]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0xae>
 80037fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800380e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003812:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003816:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003822:	4b8e      	ldr	r3, [pc, #568]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800382a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800382e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003832:	fa92 f2a2 	rbit	r2, r2
 8003836:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800383a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800383e:	fab2 f282 	clz	r2, r2
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f042 0220 	orr.w	r2, r2, #32
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f002 021f 	and.w	r2, r2, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8102 	beq.w	8003a60 <HAL_RCC_OscConfig+0x2e8>
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f040 80fc 	bne.w	8003a60 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	f000 be93 	b.w	8004594 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d106      	bne.n	8003888 <HAL_RCC_OscConfig+0x110>
 800387a:	4b78      	ldr	r3, [pc, #480]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a77      	ldr	r2, [pc, #476]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e030      	b.n	80038ea <HAL_RCC_OscConfig+0x172>
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x134>
 8003892:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a71      	ldr	r2, [pc, #452]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 8003898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b6f      	ldr	r3, [pc, #444]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6e      	ldr	r2, [pc, #440]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01e      	b.n	80038ea <HAL_RCC_OscConfig+0x172>
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b6:	d10c      	bne.n	80038d2 <HAL_RCC_OscConfig+0x15a>
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a67      	ldr	r2, [pc, #412]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a64      	ldr	r2, [pc, #400]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e00b      	b.n	80038ea <HAL_RCC_OscConfig+0x172>
 80038d2:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a61      	ldr	r2, [pc, #388]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b5f      	ldr	r3, [pc, #380]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80038e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d059      	beq.n	80039a8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7ff fac0 	bl	8002e78 <HAL_GetTick>
 80038f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fe:	f7ff fabb 	bl	8002e78 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d902      	bls.n	8003914 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	f000 be40 	b.w	8004594 <HAL_RCC_OscConfig+0xe1c>
 8003914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003918:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003928:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d102      	bne.n	8003946 <HAL_RCC_OscConfig+0x1ce>
 8003940:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x1fa>
 8003946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800394a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800395a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800395e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003962:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800396e:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003976:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800397a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800397e:	fa92 f2a2 	rbit	r2, r2
 8003982:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003986:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800398a:	fab2 f282 	clz	r2, r2
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f042 0220 	orr.w	r2, r2, #32
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f002 021f 	and.w	r2, r2, #31
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ab      	beq.n	80038fe <HAL_RCC_OscConfig+0x186>
 80039a6:	e05c      	b.n	8003a62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7ff fa66 	bl	8002e78 <HAL_GetTick>
 80039ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b0:	e00a      	b.n	80039c8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b2:	f7ff fa61 	bl	8002e78 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d902      	bls.n	80039c8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	f000 bde6 	b.w	8004594 <HAL_RCC_OscConfig+0xe1c>
 80039c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80039d4:	fa93 f3a3 	rbit	r3, r3
 80039d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80039dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_OscConfig+0x282>
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x2ae>
 80039fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003a16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <HAL_RCC_OscConfig+0x2e4>)
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a2a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003a2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003a3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003a3e:	fab2 f282 	clz	r2, r2
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f042 0220 	orr.w	r2, r2, #32
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	f002 021f 	and.w	r2, r2, #31
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ab      	bne.n	80039b2 <HAL_RCC_OscConfig+0x23a>
 8003a5a:	e002      	b.n	8003a62 <HAL_RCC_OscConfig+0x2ea>
 8003a5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8170 	beq.w	8003d52 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a72:	4bd0      	ldr	r3, [pc, #832]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a7e:	4bcd      	ldr	r3, [pc, #820]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d16d      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3ee>
 8003a8a:	4bca      	ldr	r3, [pc, #808]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a96:	d166      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3ee>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003aaa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d102      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x350>
 8003ac2:	4bbc      	ldr	r3, [pc, #752]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	e013      	b.n	8003af0 <HAL_RCC_OscConfig+0x378>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003ada:	2302      	movs	r3, #2
 8003adc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ae0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003aec:	4bb1      	ldr	r3, [pc, #708]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2202      	movs	r2, #2
 8003af2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003af6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003afa:	fa92 f2a2 	rbit	r2, r2
 8003afe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003b02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b06:	fab2 f282 	clz	r2, r2
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	f042 0220 	orr.w	r2, r2, #32
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f002 021f 	and.w	r2, r2, #31
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_RCC_OscConfig+0x3ba>
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d002      	beq.n	8003b32 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f000 bd31 	b.w	8004594 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4ba0      	ldr	r3, [pc, #640]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	21f8      	movs	r1, #248	; 0xf8
 8003b42:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003b4a:	fa91 f1a1 	rbit	r1, r1
 8003b4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003b52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b56:	fab1 f181 	clz	r1, r1
 8003b5a:	b2c9      	uxtb	r1, r1
 8003b5c:	408b      	lsls	r3, r1
 8003b5e:	4995      	ldr	r1, [pc, #596]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b64:	e0f5      	b.n	8003d52 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b66:	1d3b      	adds	r3, r7, #4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8085 	beq.w	8003c7c <HAL_RCC_OscConfig+0x504>
 8003b72:	2301      	movs	r3, #1
 8003b74:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003b84:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b88:	fab3 f383 	clz	r3, r3
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7ff f96b 	bl	8002e78 <HAL_GetTick>
 8003ba2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba8:	f7ff f966 	bl	8002e78 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d902      	bls.n	8003bbe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	f000 bceb 	b.w	8004594 <HAL_RCC_OscConfig+0xe1c>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003bd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_OscConfig+0x476>
 8003be8:	4b72      	ldr	r3, [pc, #456]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	e013      	b.n	8003c16 <HAL_RCC_OscConfig+0x49e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003c00:	2302      	movs	r3, #2
 8003c02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c06:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c12:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2202      	movs	r2, #2
 8003c18:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003c1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003c20:	fa92 f2a2 	rbit	r2, r2
 8003c24:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003c28:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c2c:	fab2 f282 	clz	r2, r2
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	f042 0220 	orr.w	r2, r2, #32
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	f002 021f 	and.w	r2, r2, #31
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0af      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c48:	4b5a      	ldr	r3, [pc, #360]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	21f8      	movs	r1, #248	; 0xf8
 8003c58:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003c60:	fa91 f1a1 	rbit	r1, r1
 8003c64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003c68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c6c:	fab1 f181 	clz	r1, r1
 8003c70:	b2c9      	uxtb	r1, r1
 8003c72:	408b      	lsls	r3, r1
 8003c74:	494f      	ldr	r1, [pc, #316]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
 8003c7a:	e06a      	b.n	8003d52 <HAL_RCC_OscConfig+0x5da>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003c8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7ff f8e6 	bl	8002e78 <HAL_GetTick>
 8003cac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7ff f8e1 	bl	8002e78 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d902      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	f000 bc66 	b.w	8004594 <HAL_RCC_OscConfig+0xe1c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003cda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x580>
 8003cf2:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	e013      	b.n	8003d20 <HAL_RCC_OscConfig+0x5a8>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_RCC_OscConfig+0x63c>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	2202      	movs	r2, #2
 8003d22:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003d26:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003d2a:	fa92 f2a2 	rbit	r2, r2
 8003d2e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003d32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d36:	fab2 f282 	clz	r2, r2
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	f042 0220 	orr.w	r2, r2, #32
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f002 021f 	and.w	r2, r2, #31
 8003d46:	2101      	movs	r1, #1
 8003d48:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1af      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80da 	beq.w	8003f16 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d069      	beq.n	8003e40 <HAL_RCC_OscConfig+0x6c8>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003d7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	fab3 f383 	clz	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_OscConfig+0x640>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	461a      	mov	r2, r3
 8003d92:	2301      	movs	r3, #1
 8003d94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d96:	f7ff f86f 	bl	8002e78 <HAL_GetTick>
 8003d9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	e00d      	b.n	8003dbc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da0:	f7ff f86a 	bl	8002e78 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d905      	bls.n	8003dbc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e3ef      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
 8003db4:	40021000 	.word	0x40021000
 8003db8:	10908120 	.word	0x10908120
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc6:	fa93 f2a3 	rbit	r2, r3
 8003dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	fa93 f2a3 	rbit	r2, r3
 8003de2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003dec:	2202      	movs	r2, #2
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	fa93 f2a3 	rbit	r2, r3
 8003dfa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003dfe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e00:	4ba4      	ldr	r3, [pc, #656]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e08:	2102      	movs	r1, #2
 8003e0a:	6019      	str	r1, [r3, #0]
 8003e0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	fa93 f1a3 	rbit	r1, r3
 8003e16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003e1a:	6019      	str	r1, [r3, #0]
  return result;
 8003e1c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	2101      	movs	r1, #1
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0b0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x628>
 8003e3e:	e06a      	b.n	8003f16 <HAL_RCC_OscConfig+0x79e>
 8003e40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fa93 f2a3 	rbit	r2, r3
 8003e52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e56:	601a      	str	r2, [r3, #0]
  return result;
 8003e58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b8c      	ldr	r3, [pc, #560]	; (8004098 <HAL_RCC_OscConfig+0x920>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7ff f801 	bl	8002e78 <HAL_GetTick>
 8003e76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7a:	e009      	b.n	8003e90 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fe fffc 	bl	8002e78 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e381      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
 8003e90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e94:	2202      	movs	r2, #2
 8003e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	fa93 f2a3 	rbit	r2, r3
 8003ea2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003eac:	2202      	movs	r2, #2
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	fa93 f2a3 	rbit	r2, r3
 8003eba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	fa93 f2a3 	rbit	r2, r3
 8003ed2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ed6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed8:	4b6e      	ldr	r3, [pc, #440]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	6019      	str	r1, [r3, #0]
 8003ee4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f1a3 	rbit	r1, r3
 8003eee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ef2:	6019      	str	r1, [r3, #0]
  return result;
 8003ef4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1b2      	bne.n	8003e7c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8157 	beq.w	80041d4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d112      	bne.n	8003f5e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4a55      	ldr	r2, [pc, #340]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f42:	61d3      	str	r3, [r2, #28]
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f4c:	f107 030c 	add.w	r3, r7, #12
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f107 030c 	add.w	r3, r7, #12
 8003f56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	4b4f      	ldr	r3, [pc, #316]	; (800409c <HAL_RCC_OscConfig+0x924>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11a      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6a:	4b4c      	ldr	r3, [pc, #304]	; (800409c <HAL_RCC_OscConfig+0x924>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a4b      	ldr	r2, [pc, #300]	; (800409c <HAL_RCC_OscConfig+0x924>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f76:	f7fe ff7f 	bl	8002e78 <HAL_GetTick>
 8003f7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	e009      	b.n	8003f94 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f80:	f7fe ff7a 	bl	8002e78 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b64      	cmp	r3, #100	; 0x64
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e2ff      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCC_OscConfig+0x924>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ef      	beq.n	8003f80 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa0:	1d3b      	adds	r3, r7, #4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x840>
 8003faa:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	4a39      	ldr	r2, [pc, #228]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	6213      	str	r3, [r2, #32]
 8003fb6:	e02f      	b.n	8004018 <HAL_RCC_OscConfig+0x8a0>
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x864>
 8003fc2:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4a33      	ldr	r2, [pc, #204]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6213      	str	r3, [r2, #32]
 8003fce:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4a30      	ldr	r2, [pc, #192]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	6213      	str	r3, [r2, #32]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0x8a0>
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x888>
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a27      	ldr	r2, [pc, #156]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6213      	str	r3, [r2, #32]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0x8a0>
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4a23      	ldr	r2, [pc, #140]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6213      	str	r3, [r2, #32]
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8004012:	f023 0304 	bic.w	r3, r3, #4
 8004016:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004018:	1d3b      	adds	r3, r7, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d06a      	beq.n	80040f8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004022:	f7fe ff29 	bl	8002e78 <HAL_GetTick>
 8004026:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402c:	f7fe ff24 	bl	8002e78 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e2a7      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
 8004044:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004048:	2202      	movs	r2, #2
 800404a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	fa93 f2a3 	rbit	r2, r3
 8004056:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004060:	2202      	movs	r2, #2
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	fa93 f2a3 	rbit	r2, r3
 800406e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004072:	601a      	str	r2, [r3, #0]
  return result;
 8004074:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004078:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d108      	bne.n	80040a0 <HAL_RCC_OscConfig+0x928>
 800408e:	4b01      	ldr	r3, [pc, #4]	; (8004094 <HAL_RCC_OscConfig+0x91c>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	e013      	b.n	80040bc <HAL_RCC_OscConfig+0x944>
 8004094:	40021000 	.word	0x40021000
 8004098:	10908120 	.word	0x10908120
 800409c:	40007000 	.word	0x40007000
 80040a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040a4:	2202      	movs	r2, #2
 80040a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	fa93 f2a3 	rbit	r2, r3
 80040b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	4bc0      	ldr	r3, [pc, #768]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80040c0:	2102      	movs	r1, #2
 80040c2:	6011      	str	r1, [r2, #0]
 80040c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	fa92 f1a2 	rbit	r1, r2
 80040ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80040d2:	6011      	str	r1, [r2, #0]
  return result;
 80040d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	fab2 f282 	clz	r2, r2
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	f002 021f 	and.w	r2, r2, #31
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d09a      	beq.n	800402c <HAL_RCC_OscConfig+0x8b4>
 80040f6:	e063      	b.n	80041c0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f8:	f7fe febe 	bl	8002e78 <HAL_GetTick>
 80040fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	e00b      	b.n	800411a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fe feb9 	bl	8002e78 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e23c      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
 800411a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800411e:	2202      	movs	r2, #2
 8004120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004136:	2202      	movs	r2, #2
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	fa93 f2a3 	rbit	r2, r3
 8004144:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004148:	601a      	str	r2, [r3, #0]
  return result;
 800414a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800414e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	fab3 f383 	clz	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f043 0302 	orr.w	r3, r3, #2
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d102      	bne.n	800416a <HAL_RCC_OscConfig+0x9f2>
 8004164:	4b95      	ldr	r3, [pc, #596]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	e00d      	b.n	8004186 <HAL_RCC_OscConfig+0xa0e>
 800416a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800416e:	2202      	movs	r2, #2
 8004170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	fa93 f2a3 	rbit	r2, r3
 800417c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	4b8e      	ldr	r3, [pc, #568]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800418a:	2102      	movs	r1, #2
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	fa92 f1a2 	rbit	r1, r2
 8004198:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800419c:	6011      	str	r1, [r2, #0]
  return result;
 800419e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	fab2 f282 	clz	r2, r2
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	f002 021f 	and.w	r2, r2, #31
 80041b4:	2101      	movs	r1, #1
 80041b6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1a0      	bne.n	8004102 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041c0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c8:	4b7c      	ldr	r3, [pc, #496]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4a7b      	ldr	r2, [pc, #492]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 80041ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 81d9 	beq.w	8004592 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e0:	4b76      	ldr	r3, [pc, #472]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	f000 81a6 	beq.w	800453a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	f040 811e 	bne.w	8004436 <HAL_RCC_OscConfig+0xcbe>
 80041fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80041fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	fa93 f2a3 	rbit	r2, r3
 800420e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004212:	601a      	str	r2, [r3, #0]
  return result;
 8004214:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004218:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	461a      	mov	r2, r3
 800422c:	2300      	movs	r3, #0
 800422e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fe fe22 	bl	8002e78 <HAL_GetTick>
 8004234:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004238:	e009      	b.n	800424e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423a:	f7fe fe1d 	bl	8002e78 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e1a2      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
 800424e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	fa93 f2a3 	rbit	r2, r3
 8004262:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004266:	601a      	str	r2, [r3, #0]
  return result;
 8004268:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800426c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_RCC_OscConfig+0xb10>
 8004282:	4b4e      	ldr	r3, [pc, #312]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	e01b      	b.n	80042c0 <HAL_RCC_OscConfig+0xb48>
 8004288:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800428c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	fa93 f2a3 	rbit	r2, r3
 800429c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	fa93 f2a3 	rbit	r2, r3
 80042b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80042c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	fa92 f1a2 	rbit	r1, r2
 80042d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042d8:	6011      	str	r1, [r2, #0]
  return result;
 80042da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	fab2 f282 	clz	r2, r2
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	f002 021f 	and.w	r2, r2, #31
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d19e      	bne.n	800423a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	f023 020f 	bic.w	r2, r3, #15
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	492c      	ldr	r1, [pc, #176]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 800430c:	4313      	orrs	r3, r2
 800430e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004310:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a19      	ldr	r1, [r3, #32]
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	430b      	orrs	r3, r1
 8004326:	4925      	ldr	r1, [pc, #148]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
 800432c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	fa93 f2a3 	rbit	r2, r3
 8004340:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004344:	601a      	str	r2, [r3, #0]
  return result;
 8004346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800434a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004356:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	461a      	mov	r2, r3
 800435e:	2301      	movs	r3, #1
 8004360:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fe fd89 	bl	8002e78 <HAL_GetTick>
 8004366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800436a:	e009      	b.n	8004380 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436c:	f7fe fd84 	bl	8002e78 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e109      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
 8004380:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	fa93 f2a3 	rbit	r2, r3
 8004394:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004398:	601a      	str	r2, [r3, #0]
  return result;
 800439a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800439e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_RCC_OscConfig+0xc48>
 80043b4:	4b01      	ldr	r3, [pc, #4]	; (80043bc <HAL_RCC_OscConfig+0xc44>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	e01e      	b.n	80043f8 <HAL_RCC_OscConfig+0xc80>
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	fa93 f2a3 	rbit	r2, r3
 80043d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	fa93 f2a3 	rbit	r2, r3
 80043ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <HAL_RCC_OscConfig+0xe28>)
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80043fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004400:	6011      	str	r1, [r2, #0]
 8004402:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	fa92 f1a2 	rbit	r1, r2
 800440c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004410:	6011      	str	r1, [r2, #0]
  return result;
 8004412:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	fab2 f282 	clz	r2, r2
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	f042 0220 	orr.w	r2, r2, #32
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	f002 021f 	and.w	r2, r2, #31
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f202 	lsl.w	r2, r1, r2
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d09b      	beq.n	800436c <HAL_RCC_OscConfig+0xbf4>
 8004434:	e0ad      	b.n	8004592 <HAL_RCC_OscConfig+0xe1a>
 8004436:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800443a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800443e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	fa93 f2a3 	rbit	r2, r3
 800444a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800444e:	601a      	str	r2, [r3, #0]
  return result;
 8004450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004454:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	461a      	mov	r2, r3
 8004468:	2300      	movs	r3, #0
 800446a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fe fd04 	bl	8002e78 <HAL_GetTick>
 8004470:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004474:	e009      	b.n	800448a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004476:	f7fe fcff 	bl	8002e78 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e084      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
 800448a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800448e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	fa93 f2a3 	rbit	r2, r3
 800449e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a2:	601a      	str	r2, [r3, #0]
  return result;
 80044a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d102      	bne.n	80044c4 <HAL_RCC_OscConfig+0xd4c>
 80044be:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <HAL_RCC_OscConfig+0xe28>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	e01b      	b.n	80044fc <HAL_RCC_OscConfig+0xd84>
 80044c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	fa93 f2a3 	rbit	r2, r3
 80044d8:	f107 0320 	add.w	r3, r7, #32
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	f107 031c 	add.w	r3, r7, #28
 80044e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f107 031c 	add.w	r3, r7, #28
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	fa93 f2a3 	rbit	r2, r3
 80044f2:	f107 0318 	add.w	r3, r7, #24
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <HAL_RCC_OscConfig+0xe28>)
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f107 0214 	add.w	r2, r7, #20
 8004500:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	f107 0214 	add.w	r2, r7, #20
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	fa92 f1a2 	rbit	r1, r2
 8004510:	f107 0210 	add.w	r2, r7, #16
 8004514:	6011      	str	r1, [r2, #0]
  return result;
 8004516:	f107 0210 	add.w	r2, r7, #16
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	fab2 f282 	clz	r2, r2
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	f042 0220 	orr.w	r2, r2, #32
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	f002 021f 	and.w	r2, r2, #31
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f202 	lsl.w	r2, r1, r2
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d19e      	bne.n	8004476 <HAL_RCC_OscConfig+0xcfe>
 8004538:	e02b      	b.n	8004592 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e025      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004548:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_RCC_OscConfig+0xe28>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004550:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <HAL_RCC_OscConfig+0xe28>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004558:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800455c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	429a      	cmp	r2, r3
 8004568:	d111      	bne.n	800458e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800456a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800456e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004572:	1d3b      	adds	r3, r7, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004578:	429a      	cmp	r2, r3
 800457a:	d108      	bne.n	800458e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800457c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004580:	f003 020f 	and.w	r2, r3, #15
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800458a:	429a      	cmp	r2, r3
 800458c:	d001      	beq.n	8004592 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000

080045a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b09e      	sub	sp, #120	; 0x78
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e162      	b.n	8004882 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045bc:	4b90      	ldr	r3, [pc, #576]	; (8004800 <HAL_RCC_ClockConfig+0x25c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d910      	bls.n	80045ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b8d      	ldr	r3, [pc, #564]	; (8004800 <HAL_RCC_ClockConfig+0x25c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 0207 	bic.w	r2, r3, #7
 80045d2:	498b      	ldr	r1, [pc, #556]	; (8004800 <HAL_RCC_ClockConfig+0x25c>)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b89      	ldr	r3, [pc, #548]	; (8004800 <HAL_RCC_ClockConfig+0x25c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e14a      	b.n	8004882 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f8:	4b82      	ldr	r3, [pc, #520]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	497f      	ldr	r1, [pc, #508]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80dc 	beq.w	80047d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d13c      	bne.n	800469a <HAL_RCC_ClockConfig+0xf6>
 8004620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004624:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004628:	fa93 f3a3 	rbit	r3, r3
 800462c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800462e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d102      	bne.n	800464a <HAL_RCC_ClockConfig+0xa6>
 8004644:	4b6f      	ldr	r3, [pc, #444]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	e00f      	b.n	800466a <HAL_RCC_ClockConfig+0xc6>
 800464a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800464e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	667b      	str	r3, [r7, #100]	; 0x64
 8004658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800465c:	663b      	str	r3, [r7, #96]	; 0x60
 800465e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004660:	fa93 f3a3 	rbit	r3, r3
 8004664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004666:	4b67      	ldr	r3, [pc, #412]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800466e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004672:	fa92 f2a2 	rbit	r2, r2
 8004676:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800467a:	fab2 f282 	clz	r2, r2
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	f042 0220 	orr.w	r2, r2, #32
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	f002 021f 	and.w	r2, r2, #31
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f202 	lsl.w	r2, r1, r2
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d17b      	bne.n	800478e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0f3      	b.n	8004882 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d13c      	bne.n	800471c <HAL_RCC_ClockConfig+0x178>
 80046a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_RCC_ClockConfig+0x128>
 80046c6:	4b4f      	ldr	r3, [pc, #316]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	e00f      	b.n	80046ec <HAL_RCC_ClockConfig+0x148>
 80046cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d4:	fa93 f3a3 	rbit	r3, r3
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44
 80046da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046de:	643b      	str	r3, [r7, #64]	; 0x40
 80046e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e8:	4b46      	ldr	r3, [pc, #280]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80046f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f4:	fa92 f2a2 	rbit	r2, r2
 80046f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80046fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046fc:	fab2 f282 	clz	r2, r2
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	f042 0220 	orr.w	r2, r2, #32
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	f002 021f 	and.w	r2, r2, #31
 800470c:	2101      	movs	r1, #1
 800470e:	fa01 f202 	lsl.w	r2, r1, r2
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d13a      	bne.n	800478e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0b2      	b.n	8004882 <HAL_RCC_ClockConfig+0x2de>
 800471c:	2302      	movs	r3, #2
 800471e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d102      	bne.n	8004744 <HAL_RCC_ClockConfig+0x1a0>
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	e00d      	b.n	8004760 <HAL_RCC_ClockConfig+0x1bc>
 8004744:	2302      	movs	r3, #2
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	2302      	movs	r3, #2
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	4b29      	ldr	r3, [pc, #164]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2202      	movs	r2, #2
 8004762:	61ba      	str	r2, [r7, #24]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	fa92 f2a2 	rbit	r2, r2
 800476a:	617a      	str	r2, [r7, #20]
  return result;
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	fab2 f282 	clz	r2, r2
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	f042 0220 	orr.w	r2, r2, #32
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	f002 021f 	and.w	r2, r2, #31
 800477e:	2101      	movs	r1, #1
 8004780:	fa01 f202 	lsl.w	r2, r1, r2
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e079      	b.n	8004882 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f023 0203 	bic.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	491a      	ldr	r1, [pc, #104]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a0:	f7fe fb6a 	bl	8002e78 <HAL_GetTick>
 80047a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fe fb66 	bl	8002e78 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e061      	b.n	8004882 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <HAL_RCC_ClockConfig+0x260>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 020c 	and.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1eb      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_ClockConfig+0x25c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d214      	bcs.n	8004808 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCC_ClockConfig+0x25c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 0207 	bic.w	r2, r3, #7
 80047e6:	4906      	ldr	r1, [pc, #24]	; (8004800 <HAL_RCC_ClockConfig+0x25c>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <HAL_RCC_ClockConfig+0x25c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e040      	b.n	8004882 <HAL_RCC_ClockConfig+0x2de>
 8004800:	40022000 	.word	0x40022000
 8004804:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <HAL_RCC_ClockConfig+0x2e8>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	491a      	ldr	r1, [pc, #104]	; (800488c <HAL_RCC_ClockConfig+0x2e8>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004832:	4b16      	ldr	r3, [pc, #88]	; (800488c <HAL_RCC_ClockConfig+0x2e8>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4912      	ldr	r1, [pc, #72]	; (800488c <HAL_RCC_ClockConfig+0x2e8>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004846:	f000 f829 	bl	800489c <HAL_RCC_GetSysClockFreq>
 800484a:	4601      	mov	r1, r0
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <HAL_RCC_ClockConfig+0x2e8>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004854:	22f0      	movs	r2, #240	; 0xf0
 8004856:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	fa92 f2a2 	rbit	r2, r2
 800485e:	60fa      	str	r2, [r7, #12]
  return result;
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	fab2 f282 	clz	r2, r2
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	40d3      	lsrs	r3, r2
 800486a:	4a09      	ldr	r2, [pc, #36]	; (8004890 <HAL_RCC_ClockConfig+0x2ec>)
 800486c:	5cd3      	ldrb	r3, [r2, r3]
 800486e:	fa21 f303 	lsr.w	r3, r1, r3
 8004872:	4a08      	ldr	r2, [pc, #32]	; (8004894 <HAL_RCC_ClockConfig+0x2f0>)
 8004874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <HAL_RCC_ClockConfig+0x2f4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fab8 	bl	8002df0 <HAL_InitTick>
  
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3778      	adds	r7, #120	; 0x78
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	08007bfc 	.word	0x08007bfc
 8004894:	20000414 	.word	0x20000414
 8004898:	20000418 	.word	0x20000418

0800489c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800489c:	b480      	push	{r7}
 800489e:	b08b      	sub	sp, #44	; 0x2c
 80048a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d002      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x30>
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d003      	beq.n	80048d2 <HAL_RCC_GetSysClockFreq+0x36>
 80048ca:	e03f      	b.n	800494c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048ce:	623b      	str	r3, [r7, #32]
      break;
 80048d0:	e03f      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80048d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80048dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	fa92 f2a2 	rbit	r2, r2
 80048e4:	607a      	str	r2, [r7, #4]
  return result;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	fab2 f282 	clz	r2, r2
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	40d3      	lsrs	r3, r2
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048f2:	5cd3      	ldrb	r3, [r2, r3]
 80048f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	220f      	movs	r2, #15
 8004900:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	fa92 f2a2 	rbit	r2, r2
 8004908:	60fa      	str	r2, [r7, #12]
  return result;
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	fab2 f282 	clz	r2, r2
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	40d3      	lsrs	r3, r2
 8004914:	4a15      	ldr	r2, [pc, #84]	; (800496c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004916:	5cd3      	ldrb	r3, [r2, r3]
 8004918:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004924:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	fbb2 f2f3 	udiv	r2, r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
 8004934:	e007      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004936:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fbb2 f2f3 	udiv	r2, r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	623b      	str	r3, [r7, #32]
      break;
 800494a:	e002      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetSysClockFreq+0xc8>)
 800494e:	623b      	str	r3, [r7, #32]
      break;
 8004950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004952:	6a3b      	ldr	r3, [r7, #32]
}
 8004954:	4618      	mov	r0, r3
 8004956:	372c      	adds	r7, #44	; 0x2c
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40021000 	.word	0x40021000
 8004964:	007a1200 	.word	0x007a1200
 8004968:	08007c14 	.word	0x08007c14
 800496c:	08007c24 	.word	0x08007c24

08004970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_RCC_GetHCLKFreq+0x14>)
 8004976:	681b      	ldr	r3, [r3, #0]
}
 8004978:	4618      	mov	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000414 	.word	0x20000414

08004988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800498e:	f7ff ffef 	bl	8004970 <HAL_RCC_GetHCLKFreq>
 8004992:	4601      	mov	r1, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800499c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80049a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	fa92 f2a2 	rbit	r2, r2
 80049a8:	603a      	str	r2, [r7, #0]
  return result;
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	fab2 f282 	clz	r2, r2
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	40d3      	lsrs	r3, r2
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000
 80049c8:	08007c0c 	.word	0x08007c0c

080049cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80049d2:	f7ff ffcd 	bl	8004970 <HAL_RCC_GetHCLKFreq>
 80049d6:	4601      	mov	r1, r0
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80049e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80049e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	fa92 f2a2 	rbit	r2, r2
 80049ec:	603a      	str	r2, [r7, #0]
  return result;
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	fab2 f282 	clz	r2, r2
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	40d3      	lsrs	r3, r2
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x40>)
 80049fa:	5cd3      	ldrb	r3, [r2, r3]
 80049fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	08007c0c 	.word	0x08007c0c

08004a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b092      	sub	sp, #72	; 0x48
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80d4 	beq.w	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a34:	4b4e      	ldr	r3, [pc, #312]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10e      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b4b      	ldr	r3, [pc, #300]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	4a4a      	ldr	r2, [pc, #296]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	61d3      	str	r3, [r2, #28]
 8004a4c:	4b48      	ldr	r3, [pc, #288]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5e:	4b45      	ldr	r3, [pc, #276]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d118      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a6a:	4b42      	ldr	r3, [pc, #264]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a41      	ldr	r2, [pc, #260]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a76:	f7fe f9ff 	bl	8002e78 <HAL_GetTick>
 8004a7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7c:	e008      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7e:	f7fe f9fb 	bl	8002e78 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b64      	cmp	r3, #100	; 0x64
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e1d6      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a9c:	4b34      	ldr	r3, [pc, #208]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8084 	beq.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d07c      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004abc:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b0e:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d04b      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1e:	f7fe f9ab 	bl	8002e78 <HAL_GetTick>
 8004b22:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b24:	e00a      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b26:	f7fe f9a7 	bl	8002e78 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e180      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	2302      	movs	r3, #2
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	fa93 f3a3 	rbit	r3, r3
 8004b52:	61fb      	str	r3, [r7, #28]
  return result;
 8004b54:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f043 0302 	orr.w	r3, r3, #2
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d108      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b6a:	4b01      	ldr	r3, [pc, #4]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	e00d      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40007000 	.word	0x40007000
 8004b78:	10908100 	.word	0x10908100
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	4ba0      	ldr	r3, [pc, #640]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	613a      	str	r2, [r7, #16]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	fa92 f2a2 	rbit	r2, r2
 8004b96:	60fa      	str	r2, [r7, #12]
  return result;
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	fab2 f282 	clz	r2, r2
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	f002 021f 	and.w	r2, r2, #31
 8004baa:	2101      	movs	r1, #1
 8004bac:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0b7      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004bb6:	4b95      	ldr	r3, [pc, #596]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4992      	ldr	r1, [pc, #584]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d105      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd0:	4b8e      	ldr	r3, [pc, #568]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	4a8d      	ldr	r2, [pc, #564]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004be8:	4b88      	ldr	r3, [pc, #544]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	f023 0203 	bic.w	r2, r3, #3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4985      	ldr	r1, [pc, #532]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c06:	4b81      	ldr	r3, [pc, #516]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	497e      	ldr	r1, [pc, #504]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c24:	4b79      	ldr	r3, [pc, #484]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4976      	ldr	r1, [pc, #472]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c42:	4b72      	ldr	r3, [pc, #456]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f023 0210 	bic.w	r2, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	496f      	ldr	r1, [pc, #444]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c60:	4b6a      	ldr	r3, [pc, #424]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	4967      	ldr	r1, [pc, #412]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c7e:	4b63      	ldr	r3, [pc, #396]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f023 0220 	bic.w	r2, r3, #32
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	4960      	ldr	r1, [pc, #384]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c9c:	4b5b      	ldr	r3, [pc, #364]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	4958      	ldr	r1, [pc, #352]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cba:	4b54      	ldr	r3, [pc, #336]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	4951      	ldr	r1, [pc, #324]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd8:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	4949      	ldr	r1, [pc, #292]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cf6:	4b45      	ldr	r3, [pc, #276]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	4942      	ldr	r1, [pc, #264]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d14:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	493a      	ldr	r1, [pc, #232]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004d32:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	4933      	ldr	r1, [pc, #204]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d50:	4b2e      	ldr	r3, [pc, #184]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	492b      	ldr	r1, [pc, #172]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004d6e:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	4924      	ldr	r1, [pc, #144]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	491c      	ldr	r1, [pc, #112]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004daa:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	4915      	ldr	r1, [pc, #84]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004dc8:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	490d      	ldr	r1, [pc, #52]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df2:	4906      	ldr	r1, [pc, #24]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00c      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004e04:	4b01      	ldr	r3, [pc, #4]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	e002      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	490b      	ldr	r1, [pc, #44]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e36:	4904      	ldr	r1, [pc, #16]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3748      	adds	r7, #72	; 0x48
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000

08004e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e049      	b.n	8004ef2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fd fdb2 	bl	80029dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 fe66 	bl	8005b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e04f      	b.n	8004fb4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01d      	beq.n	8004f72 <HAL_TIM_Base_Start_IT+0x76>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3e:	d018      	beq.n	8004f72 <HAL_TIM_Base_Start_IT+0x76>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_TIM_Base_Start_IT+0x76>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_TIM_Base_Start_IT+0x76>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_TIM_Base_Start_IT+0x76>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIM_Base_Start_IT+0x76>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a19      	ldr	r2, [pc, #100]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d115      	bne.n	8004f9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	4b17      	ldr	r3, [pc, #92]	; (8004fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b06      	cmp	r3, #6
 8004f82:	d015      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0xb4>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8a:	d011      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	e008      	b.n	8004fb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e000      	b.n	8004fb2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40015000 	.word	0x40015000
 8004fd8:	00010007 	.word	0x00010007

08004fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e049      	b.n	8005082 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f841 	bl	800508a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f000 fd9e 	bl	8005b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d109      	bne.n	80050c8 <HAL_TIM_PWM_Start_IT+0x28>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	e03c      	b.n	8005142 <HAL_TIM_PWM_Start_IT+0xa2>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d109      	bne.n	80050e2 <HAL_TIM_PWM_Start_IT+0x42>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e02f      	b.n	8005142 <HAL_TIM_PWM_Start_IT+0xa2>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d109      	bne.n	80050fc <HAL_TIM_PWM_Start_IT+0x5c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	bf14      	ite	ne
 80050f4:	2301      	movne	r3, #1
 80050f6:	2300      	moveq	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e022      	b.n	8005142 <HAL_TIM_PWM_Start_IT+0xa2>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b0c      	cmp	r3, #12
 8005100:	d109      	bne.n	8005116 <HAL_TIM_PWM_Start_IT+0x76>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b01      	cmp	r3, #1
 800510c:	bf14      	ite	ne
 800510e:	2301      	movne	r3, #1
 8005110:	2300      	moveq	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	e015      	b.n	8005142 <HAL_TIM_PWM_Start_IT+0xa2>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b10      	cmp	r3, #16
 800511a:	d109      	bne.n	8005130 <HAL_TIM_PWM_Start_IT+0x90>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	e008      	b.n	8005142 <HAL_TIM_PWM_Start_IT+0xa2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0ec      	b.n	8005324 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <HAL_TIM_PWM_Start_IT+0xba>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005158:	e023      	b.n	80051a2 <HAL_TIM_PWM_Start_IT+0x102>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d104      	bne.n	800516a <HAL_TIM_PWM_Start_IT+0xca>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005168:	e01b      	b.n	80051a2 <HAL_TIM_PWM_Start_IT+0x102>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d104      	bne.n	800517a <HAL_TIM_PWM_Start_IT+0xda>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005178:	e013      	b.n	80051a2 <HAL_TIM_PWM_Start_IT+0x102>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b0c      	cmp	r3, #12
 800517e:	d104      	bne.n	800518a <HAL_TIM_PWM_Start_IT+0xea>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005188:	e00b      	b.n	80051a2 <HAL_TIM_PWM_Start_IT+0x102>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b10      	cmp	r3, #16
 800518e:	d104      	bne.n	800519a <HAL_TIM_PWM_Start_IT+0xfa>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005198:	e003      	b.n	80051a2 <HAL_TIM_PWM_Start_IT+0x102>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d841      	bhi.n	800522c <HAL_TIM_PWM_Start_IT+0x18c>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_TIM_PWM_Start_IT+0x110>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051e5 	.word	0x080051e5
 80051b4:	0800522d 	.word	0x0800522d
 80051b8:	0800522d 	.word	0x0800522d
 80051bc:	0800522d 	.word	0x0800522d
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	0800522d 	.word	0x0800522d
 80051c8:	0800522d 	.word	0x0800522d
 80051cc:	0800522d 	.word	0x0800522d
 80051d0:	08005209 	.word	0x08005209
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	0800522d 	.word	0x0800522d
 80051dc:	0800522d 	.word	0x0800522d
 80051e0:	0800521b 	.word	0x0800521b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0202 	orr.w	r2, r2, #2
 80051f2:	60da      	str	r2, [r3, #12]
      break;
 80051f4:	e01d      	b.n	8005232 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0204 	orr.w	r2, r2, #4
 8005204:	60da      	str	r2, [r3, #12]
      break;
 8005206:	e014      	b.n	8005232 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0208 	orr.w	r2, r2, #8
 8005216:	60da      	str	r2, [r3, #12]
      break;
 8005218:	e00b      	b.n	8005232 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0210 	orr.w	r2, r2, #16
 8005228:	60da      	str	r2, [r3, #12]
      break;
 800522a:	e002      	b.n	8005232 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
      break;
 8005230:	bf00      	nop
  }

  if (status == HAL_OK)
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d174      	bne.n	8005322 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2201      	movs	r2, #1
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f001 f8c9 	bl	80063d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a38      	ldr	r2, [pc, #224]	; (800532c <HAL_TIM_PWM_Start_IT+0x28c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d018      	beq.n	8005282 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a36      	ldr	r2, [pc, #216]	; (8005330 <HAL_TIM_PWM_Start_IT+0x290>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_TIM_PWM_Start_IT+0x1e2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a35      	ldr	r2, [pc, #212]	; (8005334 <HAL_TIM_PWM_Start_IT+0x294>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a33      	ldr	r2, [pc, #204]	; (8005338 <HAL_TIM_PWM_Start_IT+0x298>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_TIM_PWM_Start_IT+0x1e2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a32      	ldr	r2, [pc, #200]	; (800533c <HAL_TIM_PWM_Start_IT+0x29c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_TIM_PWM_Start_IT+0x1e2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a30      	ldr	r2, [pc, #192]	; (8005340 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_TIM_PWM_Start_IT+0x1e6>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_TIM_PWM_Start_IT+0x1e8>
 8005286:	2300      	movs	r3, #0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800529a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a22      	ldr	r2, [pc, #136]	; (800532c <HAL_TIM_PWM_Start_IT+0x28c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01d      	beq.n	80052e2 <HAL_TIM_PWM_Start_IT+0x242>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d018      	beq.n	80052e2 <HAL_TIM_PWM_Start_IT+0x242>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a23      	ldr	r2, [pc, #140]	; (8005344 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <HAL_TIM_PWM_Start_IT+0x242>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a22      	ldr	r2, [pc, #136]	; (8005348 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00e      	beq.n	80052e2 <HAL_TIM_PWM_Start_IT+0x242>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a19      	ldr	r2, [pc, #100]	; (8005330 <HAL_TIM_PWM_Start_IT+0x290>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d009      	beq.n	80052e2 <HAL_TIM_PWM_Start_IT+0x242>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a18      	ldr	r2, [pc, #96]	; (8005334 <HAL_TIM_PWM_Start_IT+0x294>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <HAL_TIM_PWM_Start_IT+0x242>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a18      	ldr	r2, [pc, #96]	; (8005340 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d115      	bne.n	800530e <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	4b18      	ldr	r3, [pc, #96]	; (800534c <HAL_TIM_PWM_Start_IT+0x2ac>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b06      	cmp	r3, #6
 80052f2:	d015      	beq.n	8005320 <HAL_TIM_PWM_Start_IT+0x280>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fa:	d011      	beq.n	8005320 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530c:	e008      	b.n	8005320 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e000      	b.n	8005322 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800
 8005340:	40015000 	.word	0x40015000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	00010007 	.word	0x00010007

08005350 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b0c      	cmp	r3, #12
 8005362:	d841      	bhi.n	80053e8 <HAL_TIM_PWM_Stop_IT+0x98>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053a1 	.word	0x080053a1
 8005370:	080053e9 	.word	0x080053e9
 8005374:	080053e9 	.word	0x080053e9
 8005378:	080053e9 	.word	0x080053e9
 800537c:	080053b3 	.word	0x080053b3
 8005380:	080053e9 	.word	0x080053e9
 8005384:	080053e9 	.word	0x080053e9
 8005388:	080053e9 	.word	0x080053e9
 800538c:	080053c5 	.word	0x080053c5
 8005390:	080053e9 	.word	0x080053e9
 8005394:	080053e9 	.word	0x080053e9
 8005398:	080053e9 	.word	0x080053e9
 800539c:	080053d7 	.word	0x080053d7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0202 	bic.w	r2, r2, #2
 80053ae:	60da      	str	r2, [r3, #12]
      break;
 80053b0:	e01d      	b.n	80053ee <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0204 	bic.w	r2, r2, #4
 80053c0:	60da      	str	r2, [r3, #12]
      break;
 80053c2:	e014      	b.n	80053ee <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0208 	bic.w	r2, r2, #8
 80053d2:	60da      	str	r2, [r3, #12]
      break;
 80053d4:	e00b      	b.n	80053ee <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0210 	bic.w	r2, r2, #16
 80053e4:	60da      	str	r2, [r3, #12]
      break;
 80053e6:	e002      	b.n	80053ee <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	73fb      	strb	r3, [r7, #15]
      break;
 80053ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 8086 	bne.w	8005502 <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 ffea 	bl	80063d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a40      	ldr	r2, [pc, #256]	; (800550c <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_TIM_PWM_Stop_IT+0xf0>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a3f      	ldr	r2, [pc, #252]	; (8005510 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_TIM_PWM_Stop_IT+0xf0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a3d      	ldr	r2, [pc, #244]	; (8005514 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_TIM_PWM_Stop_IT+0xf0>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_TIM_PWM_Stop_IT+0xf0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a3a      	ldr	r2, [pc, #232]	; (800551c <HAL_TIM_PWM_Stop_IT+0x1cc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_TIM_PWM_Stop_IT+0xf0>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a39      	ldr	r2, [pc, #228]	; (8005520 <HAL_TIM_PWM_Stop_IT+0x1d0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d101      	bne.n	8005444 <HAL_TIM_PWM_Stop_IT+0xf4>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <HAL_TIM_PWM_Stop_IT+0xf6>
 8005444:	2300      	movs	r3, #0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d017      	beq.n	800547a <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	f241 1311 	movw	r3, #4369	; 0x1111
 8005454:	4013      	ands	r3, r2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <HAL_TIM_PWM_Stop_IT+0x12a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	f240 4344 	movw	r3, #1092	; 0x444
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d107      	bne.n	800547a <HAL_TIM_PWM_Stop_IT+0x12a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	f241 1311 	movw	r3, #4369	; 0x1111
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10f      	bne.n	80054aa <HAL_TIM_PWM_Stop_IT+0x15a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	f240 4344 	movw	r3, #1092	; 0x444
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <HAL_TIM_PWM_Stop_IT+0x15a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Stop_IT+0x16a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b8:	e023      	b.n	8005502 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d104      	bne.n	80054ca <HAL_TIM_PWM_Stop_IT+0x17a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c8:	e01b      	b.n	8005502 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d104      	bne.n	80054da <HAL_TIM_PWM_Stop_IT+0x18a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d8:	e013      	b.n	8005502 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b0c      	cmp	r3, #12
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Stop_IT+0x19a>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054e8:	e00b      	b.n	8005502 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Stop_IT+0x1aa>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f8:	e003      	b.n	8005502 <HAL_TIM_PWM_Stop_IT+0x1b2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40013400 	.word	0x40013400
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800
 8005520:	40015000 	.word	0x40015000

08005524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b02      	cmp	r3, #2
 8005538:	d122      	bne.n	8005580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0202 	mvn.w	r2, #2
 8005550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fae3 	bl	8005b32 <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fad5 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7fb fd37 	bl	8000fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b04      	cmp	r3, #4
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0204 	mvn.w	r2, #4
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2202      	movs	r2, #2
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fab9 	bl	8005b32 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 faab 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fb fd0d 	bl	8000fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0208 	mvn.w	r2, #8
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2204      	movs	r2, #4
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa8f 	bl	8005b32 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa81 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fb fce3 	bl	8000fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b10      	cmp	r3, #16
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b10      	cmp	r3, #16
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0210 	mvn.w	r2, #16
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2208      	movs	r2, #8
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fa65 	bl	8005b32 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa57 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7fb fcb9 	bl	8000fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10e      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d107      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0201 	mvn.w	r2, #1
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fb f952 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b80      	cmp	r3, #128	; 0x80
 80056b4:	d10e      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 ff3e 	bl	8006550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e2:	d10e      	bne.n	8005702 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d107      	bne.n	8005702 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 ff31 	bl	8006564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d10e      	bne.n	800572e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d107      	bne.n	800572e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa0c 	bl	8005b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b20      	cmp	r3, #32
 800573a:	d10e      	bne.n	800575a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b20      	cmp	r3, #32
 8005748:	d107      	bne.n	800575a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f06f 0220 	mvn.w	r2, #32
 8005752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fef1 	bl	800653c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800577e:	2302      	movs	r3, #2
 8005780:	e0ff      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b14      	cmp	r3, #20
 800578e:	f200 80f0 	bhi.w	8005972 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005973 	.word	0x08005973
 80057a0:	08005973 	.word	0x08005973
 80057a4:	08005973 	.word	0x08005973
 80057a8:	0800582d 	.word	0x0800582d
 80057ac:	08005973 	.word	0x08005973
 80057b0:	08005973 	.word	0x08005973
 80057b4:	08005973 	.word	0x08005973
 80057b8:	0800586f 	.word	0x0800586f
 80057bc:	08005973 	.word	0x08005973
 80057c0:	08005973 	.word	0x08005973
 80057c4:	08005973 	.word	0x08005973
 80057c8:	080058af 	.word	0x080058af
 80057cc:	08005973 	.word	0x08005973
 80057d0:	08005973 	.word	0x08005973
 80057d4:	08005973 	.word	0x08005973
 80057d8:	080058f1 	.word	0x080058f1
 80057dc:	08005973 	.word	0x08005973
 80057e0:	08005973 	.word	0x08005973
 80057e4:	08005973 	.word	0x08005973
 80057e8:	08005931 	.word	0x08005931
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fa50 	bl	8005c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0208 	orr.w	r2, r2, #8
 8005806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0204 	bic.w	r2, r2, #4
 8005816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6999      	ldr	r1, [r3, #24]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	619a      	str	r2, [r3, #24]
      break;
 800582a:	e0a5      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 faca 	bl	8005dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6999      	ldr	r1, [r3, #24]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	021a      	lsls	r2, r3, #8
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	619a      	str	r2, [r3, #24]
      break;
 800586c:	e084      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fb3d 	bl	8005ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0204 	bic.w	r2, r2, #4
 8005898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	61da      	str	r2, [r3, #28]
      break;
 80058ac:	e064      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fbaf 	bl	8006018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69d9      	ldr	r1, [r3, #28]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	021a      	lsls	r2, r3, #8
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	61da      	str	r2, [r3, #28]
      break;
 80058ee:	e043      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fbfe 	bl	80060f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0208 	orr.w	r2, r2, #8
 800590a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800592e:	e023      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fc48 	bl	80061cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005970:	e002      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
      break;
 8005976:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop

0800598c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e0b6      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x18a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e4:	d03e      	beq.n	8005a64 <HAL_TIM_ConfigClockSource+0xd8>
 80059e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ea:	f200 8087 	bhi.w	8005afc <HAL_TIM_ConfigClockSource+0x170>
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f2:	f000 8086 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x176>
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fa:	d87f      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 80059fc:	2b70      	cmp	r3, #112	; 0x70
 80059fe:	d01a      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0xaa>
 8005a00:	2b70      	cmp	r3, #112	; 0x70
 8005a02:	d87b      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a04:	2b60      	cmp	r3, #96	; 0x60
 8005a06:	d050      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x11e>
 8005a08:	2b60      	cmp	r3, #96	; 0x60
 8005a0a:	d877      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a0c:	2b50      	cmp	r3, #80	; 0x50
 8005a0e:	d03c      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0xfe>
 8005a10:	2b50      	cmp	r3, #80	; 0x50
 8005a12:	d873      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d058      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x13e>
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d86f      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a1c:	2b30      	cmp	r3, #48	; 0x30
 8005a1e:	d064      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x15e>
 8005a20:	2b30      	cmp	r3, #48	; 0x30
 8005a22:	d86b      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d060      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x15e>
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d867      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d05c      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x15e>
 8005a30:	2b10      	cmp	r3, #16
 8005a32:	d05a      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x15e>
 8005a34:	e062      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6899      	ldr	r1, [r3, #8]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f000 fca7 	bl	8006398 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	609a      	str	r2, [r3, #8]
      break;
 8005a62:	e04f      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6899      	ldr	r1, [r3, #8]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f000 fc90 	bl	8006398 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a86:	609a      	str	r2, [r3, #8]
      break;
 8005a88:	e03c      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 fc04 	bl	80062a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2150      	movs	r1, #80	; 0x50
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fc5d 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e02c      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6859      	ldr	r1, [r3, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f000 fc23 	bl	8006302 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2160      	movs	r1, #96	; 0x60
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fc4d 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005ac8:	e01c      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6859      	ldr	r1, [r3, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f000 fbe4 	bl	80062a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2140      	movs	r1, #64	; 0x40
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fc3d 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005ae8:	e00c      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f000 fc34 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005afa:	e003      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      break;
 8005b00:	e000      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a42      	ldr	r2, [pc, #264]	; (8005c78 <TIM_Base_SetConfig+0x11c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7a:	d00f      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3f      	ldr	r2, [pc, #252]	; (8005c7c <TIM_Base_SetConfig+0x120>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3e      	ldr	r2, [pc, #248]	; (8005c80 <TIM_Base_SetConfig+0x124>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3d      	ldr	r2, [pc, #244]	; (8005c84 <TIM_Base_SetConfig+0x128>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <TIM_Base_SetConfig+0x12c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d108      	bne.n	8005bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a31      	ldr	r2, [pc, #196]	; (8005c78 <TIM_Base_SetConfig+0x11c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <TIM_Base_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x9a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2e      	ldr	r2, [pc, #184]	; (8005c7c <TIM_Base_SetConfig+0x120>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d017      	beq.n	8005bf6 <TIM_Base_SetConfig+0x9a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <TIM_Base_SetConfig+0x124>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_Base_SetConfig+0x9a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2c      	ldr	r2, [pc, #176]	; (8005c84 <TIM_Base_SetConfig+0x128>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_Base_SetConfig+0x9a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <TIM_Base_SetConfig+0x130>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x9a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2b      	ldr	r2, [pc, #172]	; (8005c90 <TIM_Base_SetConfig+0x134>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0x9a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <TIM_Base_SetConfig+0x138>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0x9a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <TIM_Base_SetConfig+0x12c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <TIM_Base_SetConfig+0x11c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <TIM_Base_SetConfig+0x100>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <TIM_Base_SetConfig+0x128>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00f      	beq.n	8005c5c <TIM_Base_SetConfig+0x100>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <TIM_Base_SetConfig+0x130>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00b      	beq.n	8005c5c <TIM_Base_SetConfig+0x100>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <TIM_Base_SetConfig+0x134>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <TIM_Base_SetConfig+0x100>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a11      	ldr	r2, [pc, #68]	; (8005c94 <TIM_Base_SetConfig+0x138>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_Base_SetConfig+0x100>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a0c      	ldr	r2, [pc, #48]	; (8005c88 <TIM_Base_SetConfig+0x12c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d103      	bne.n	8005c64 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	615a      	str	r2, [r3, #20]
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800
 8005c84:	40013400 	.word	0x40013400
 8005c88:	40015000 	.word	0x40015000
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800

08005c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f023 0201 	bic.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 0302 	bic.w	r3, r3, #2
 8005ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a30      	ldr	r2, [pc, #192]	; (8005db4 <TIM_OC1_SetConfig+0x11c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d013      	beq.n	8005d20 <TIM_OC1_SetConfig+0x88>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a2f      	ldr	r2, [pc, #188]	; (8005db8 <TIM_OC1_SetConfig+0x120>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00f      	beq.n	8005d20 <TIM_OC1_SetConfig+0x88>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a2e      	ldr	r2, [pc, #184]	; (8005dbc <TIM_OC1_SetConfig+0x124>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00b      	beq.n	8005d20 <TIM_OC1_SetConfig+0x88>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a2d      	ldr	r2, [pc, #180]	; (8005dc0 <TIM_OC1_SetConfig+0x128>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d007      	beq.n	8005d20 <TIM_OC1_SetConfig+0x88>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a2c      	ldr	r2, [pc, #176]	; (8005dc4 <TIM_OC1_SetConfig+0x12c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_OC1_SetConfig+0x88>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a2b      	ldr	r2, [pc, #172]	; (8005dc8 <TIM_OC1_SetConfig+0x130>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10c      	bne.n	8005d3a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0308 	bic.w	r3, r3, #8
 8005d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 0304 	bic.w	r3, r3, #4
 8005d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <TIM_OC1_SetConfig+0x11c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <TIM_OC1_SetConfig+0xd2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <TIM_OC1_SetConfig+0x120>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00f      	beq.n	8005d6a <TIM_OC1_SetConfig+0xd2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <TIM_OC1_SetConfig+0x124>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_OC1_SetConfig+0xd2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1a      	ldr	r2, [pc, #104]	; (8005dc0 <TIM_OC1_SetConfig+0x128>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_OC1_SetConfig+0xd2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a19      	ldr	r2, [pc, #100]	; (8005dc4 <TIM_OC1_SetConfig+0x12c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_OC1_SetConfig+0xd2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <TIM_OC1_SetConfig+0x130>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d111      	bne.n	8005d8e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40012c00 	.word	0x40012c00
 8005db8:	40013400 	.word	0x40013400
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400
 8005dc4:	40014800 	.word	0x40014800
 8005dc8:	40015000 	.word	0x40015000

08005dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0210 	bic.w	r2, r3, #16
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f023 0320 	bic.w	r3, r3, #32
 8005e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a2c      	ldr	r2, [pc, #176]	; (8005edc <TIM_OC2_SetConfig+0x110>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d007      	beq.n	8005e40 <TIM_OC2_SetConfig+0x74>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <TIM_OC2_SetConfig+0x114>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC2_SetConfig+0x74>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <TIM_OC2_SetConfig+0x118>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d10d      	bne.n	8005e5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1f      	ldr	r2, [pc, #124]	; (8005edc <TIM_OC2_SetConfig+0x110>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <TIM_OC2_SetConfig+0xc0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1e      	ldr	r2, [pc, #120]	; (8005ee0 <TIM_OC2_SetConfig+0x114>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00f      	beq.n	8005e8c <TIM_OC2_SetConfig+0xc0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <TIM_OC2_SetConfig+0x11c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00b      	beq.n	8005e8c <TIM_OC2_SetConfig+0xc0>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <TIM_OC2_SetConfig+0x120>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_OC2_SetConfig+0xc0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <TIM_OC2_SetConfig+0x124>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC2_SetConfig+0xc0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <TIM_OC2_SetConfig+0x118>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d113      	bne.n	8005eb4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e92:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e9a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	621a      	str	r2, [r3, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40015000 	.word	0x40015000
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800

08005ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2b      	ldr	r2, [pc, #172]	; (8006000 <TIM_OC3_SetConfig+0x10c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_OC3_SetConfig+0x72>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a2a      	ldr	r2, [pc, #168]	; (8006004 <TIM_OC3_SetConfig+0x110>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC3_SetConfig+0x72>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a29      	ldr	r2, [pc, #164]	; (8006008 <TIM_OC3_SetConfig+0x114>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d10d      	bne.n	8005f82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f80:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <TIM_OC3_SetConfig+0x10c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <TIM_OC3_SetConfig+0xbe>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_OC3_SetConfig+0x110>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00f      	beq.n	8005fb2 <TIM_OC3_SetConfig+0xbe>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1d      	ldr	r2, [pc, #116]	; (800600c <TIM_OC3_SetConfig+0x118>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <TIM_OC3_SetConfig+0xbe>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <TIM_OC3_SetConfig+0x11c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d007      	beq.n	8005fb2 <TIM_OC3_SetConfig+0xbe>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1b      	ldr	r2, [pc, #108]	; (8006014 <TIM_OC3_SetConfig+0x120>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_OC3_SetConfig+0xbe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	; (8006008 <TIM_OC3_SetConfig+0x114>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d113      	bne.n	8005fda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40012c00 	.word	0x40012c00
 8006004:	40013400 	.word	0x40013400
 8006008:	40015000 	.word	0x40015000
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a1a      	ldr	r2, [pc, #104]	; (80060e0 <TIM_OC4_SetConfig+0xc8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d013      	beq.n	80060a4 <TIM_OC4_SetConfig+0x8c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a19      	ldr	r2, [pc, #100]	; (80060e4 <TIM_OC4_SetConfig+0xcc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00f      	beq.n	80060a4 <TIM_OC4_SetConfig+0x8c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <TIM_OC4_SetConfig+0xd0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00b      	beq.n	80060a4 <TIM_OC4_SetConfig+0x8c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a17      	ldr	r2, [pc, #92]	; (80060ec <TIM_OC4_SetConfig+0xd4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d007      	beq.n	80060a4 <TIM_OC4_SetConfig+0x8c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <TIM_OC4_SetConfig+0xd8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_OC4_SetConfig+0x8c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <TIM_OC4_SetConfig+0xdc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d109      	bne.n	80060b8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	019b      	lsls	r3, r3, #6
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40013400 	.word	0x40013400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800
 80060f4:	40015000 	.word	0x40015000

080060f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800613c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	041b      	lsls	r3, r3, #16
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a19      	ldr	r2, [pc, #100]	; (80061b4 <TIM_OC5_SetConfig+0xbc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <TIM_OC5_SetConfig+0x82>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <TIM_OC5_SetConfig+0xc0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00f      	beq.n	800617a <TIM_OC5_SetConfig+0x82>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a17      	ldr	r2, [pc, #92]	; (80061bc <TIM_OC5_SetConfig+0xc4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_OC5_SetConfig+0x82>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a16      	ldr	r2, [pc, #88]	; (80061c0 <TIM_OC5_SetConfig+0xc8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_OC5_SetConfig+0x82>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <TIM_OC5_SetConfig+0xcc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_OC5_SetConfig+0x82>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <TIM_OC5_SetConfig+0xd0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d109      	bne.n	800618e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006180:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800
 80061c8:	40015000 	.word	0x40015000

080061cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	051b      	lsls	r3, r3, #20
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a1a      	ldr	r2, [pc, #104]	; (800628c <TIM_OC6_SetConfig+0xc0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <TIM_OC6_SetConfig+0x84>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a19      	ldr	r2, [pc, #100]	; (8006290 <TIM_OC6_SetConfig+0xc4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00f      	beq.n	8006250 <TIM_OC6_SetConfig+0x84>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a18      	ldr	r2, [pc, #96]	; (8006294 <TIM_OC6_SetConfig+0xc8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00b      	beq.n	8006250 <TIM_OC6_SetConfig+0x84>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a17      	ldr	r2, [pc, #92]	; (8006298 <TIM_OC6_SetConfig+0xcc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_OC6_SetConfig+0x84>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a16      	ldr	r2, [pc, #88]	; (800629c <TIM_OC6_SetConfig+0xd0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC6_SetConfig+0x84>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <TIM_OC6_SetConfig+0xd4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d109      	bne.n	8006264 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006256:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40013400 	.word	0x40013400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	40015000 	.word	0x40015000

080062a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0201 	bic.w	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f023 030a 	bic.w	r3, r3, #10
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006302:	b480      	push	{r7}
 8006304:	b087      	sub	sp, #28
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f023 0210 	bic.w	r2, r3, #16
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800632c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	031b      	lsls	r3, r3, #12
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800633e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	f043 0307 	orr.w	r3, r3, #7
 8006384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2201      	movs	r2, #1
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1a      	ldr	r2, [r3, #32]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	401a      	ands	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	fa01 f303 	lsl.w	r3, r1, r3
 8006410:	431a      	orrs	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006438:	2302      	movs	r3, #2
 800643a:	e06d      	b.n	8006518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a30      	ldr	r2, [pc, #192]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a2d      	ldr	r2, [pc, #180]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d108      	bne.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006480:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d01d      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d018      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1c      	ldr	r2, [pc, #112]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1a      	ldr	r2, [pc, #104]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00e      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a15      	ldr	r2, [pc, #84]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d009      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a16      	ldr	r2, [pc, #88]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a11      	ldr	r2, [pc, #68]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d10c      	bne.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	40012c00 	.word	0x40012c00
 8006528:	40013400 	.word	0x40013400
 800652c:	40015000 	.word	0x40015000
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40014000 	.word	0x40014000

0800653c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006578:	b480      	push	{r7}
 800657a:	b08b      	sub	sp, #44	; 0x2c
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800658a:	2b20      	cmp	r3, #32
 800658c:	d156      	bne.n	800663c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_UART_Transmit_IT+0x22>
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e04f      	b.n	800663e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_UART_Transmit_IT+0x34>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e048      	b.n	800663e <HAL_UART_Transmit_IT+0xc6>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	88fa      	ldrh	r2, [r7, #6]
 80065be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	88fa      	ldrh	r2, [r7, #6]
 80065c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2221      	movs	r2, #33	; 0x21
 80065dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e6:	d107      	bne.n	80065f8 <HAL_UART_Transmit_IT+0x80>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a16      	ldr	r2, [pc, #88]	; (800664c <HAL_UART_Transmit_IT+0xd4>)
 80065f4:	669a      	str	r2, [r3, #104]	; 0x68
 80065f6:	e002      	b.n	80065fe <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a15      	ldr	r2, [pc, #84]	; (8006650 <HAL_UART_Transmit_IT+0xd8>)
 80065fc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	613b      	str	r3, [r7, #16]
   return(result);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	69f9      	ldr	r1, [r7, #28]
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	61bb      	str	r3, [r7, #24]
   return(result);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	e000      	b.n	800663e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800663c:	2302      	movs	r3, #2
  }
}
 800663e:	4618      	mov	r0, r3
 8006640:	372c      	adds	r7, #44	; 0x2c
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	080076df 	.word	0x080076df
 8006650:	08007627 	.word	0x08007627

08006654 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	; 0x28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006666:	2b20      	cmp	r3, #32
 8006668:	d13d      	bne.n	80066e6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_UART_Receive_IT+0x22>
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e036      	b.n	80066e8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_UART_Receive_IT+0x34>
 8006684:	2302      	movs	r3, #2
 8006686:	e02f      	b.n	80066e8 <HAL_UART_Receive_IT+0x94>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d018      	beq.n	80066d6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	613b      	str	r3, [r7, #16]
   return(result);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	623b      	str	r3, [r7, #32]
 80066c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	69f9      	ldr	r1, [r7, #28]
 80066c8:	6a3a      	ldr	r2, [r7, #32]
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e6      	bne.n	80066a4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	461a      	mov	r2, r3
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fe7d 	bl	80073dc <UART_Start_Receive_IT>
 80066e2:	4603      	mov	r3, r0
 80066e4:	e000      	b.n	80066e8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3728      	adds	r7, #40	; 0x28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b0ba      	sub	sp, #232	; 0xe8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800671a:	f640 030f 	movw	r3, #2063	; 0x80f
 800671e:	4013      	ands	r3, r2
 8006720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d115      	bne.n	8006758 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00f      	beq.n	8006758 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 82a3 	beq.w	8006c94 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
      }
      return;
 8006756:	e29d      	b.n	8006c94 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8117 	beq.w	8006990 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800676e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006772:	4b85      	ldr	r3, [pc, #532]	; (8006988 <HAL_UART_IRQHandler+0x298>)
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 810a 	beq.w	8006990 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d011      	beq.n	80067ac <HAL_UART_IRQHandler+0xbc>
 8006788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2201      	movs	r2, #1
 800679a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a2:	f043 0201 	orr.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d011      	beq.n	80067dc <HAL_UART_IRQHandler+0xec>
 80067b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2202      	movs	r2, #2
 80067ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d2:	f043 0204 	orr.w	r2, r3, #4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d011      	beq.n	800680c <HAL_UART_IRQHandler+0x11c>
 80067e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2204      	movs	r2, #4
 80067fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006802:	f043 0202 	orr.w	r2, r3, #2
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800680c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d017      	beq.n	8006848 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006828:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2208      	movs	r2, #8
 8006836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800683e:	f043 0208 	orr.w	r2, r3, #8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006850:	2b00      	cmp	r3, #0
 8006852:	d012      	beq.n	800687a <HAL_UART_IRQHandler+0x18a>
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00c      	beq.n	800687a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006870:	f043 0220 	orr.w	r2, r3, #32
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8209 	beq.w	8006c98 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00d      	beq.n	80068ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d005      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d04f      	beq.n	8006972 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fe2e 	bl	8007534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	d141      	bne.n	800696a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3308      	adds	r3, #8
 800690e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006912:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800691e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800692a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1d9      	bne.n	80068e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006936:	2b00      	cmp	r3, #0
 8006938:	d013      	beq.n	8006962 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693e:	4a13      	ldr	r2, [pc, #76]	; (800698c <HAL_UART_IRQHandler+0x29c>)
 8006940:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc fc10 	bl	800316c <HAL_DMA_Abort_IT>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d017      	beq.n	8006982 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800695c:	4610      	mov	r0, r2
 800695e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006960:	e00f      	b.n	8006982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9a2 	bl	8006cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006968:	e00b      	b.n	8006982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f99e 	bl	8006cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006970:	e007      	b.n	8006982 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f99a 	bl	8006cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006980:	e18a      	b.n	8006c98 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006982:	bf00      	nop
    return;
 8006984:	e188      	b.n	8006c98 <HAL_UART_IRQHandler+0x5a8>
 8006986:	bf00      	nop
 8006988:	04000120 	.word	0x04000120
 800698c:	080075fb 	.word	0x080075fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	2b01      	cmp	r3, #1
 8006996:	f040 8143 	bne.w	8006c20 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800699a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 813c 	beq.w	8006c20 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8135 	beq.w	8006c20 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2210      	movs	r2, #16
 80069bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b40      	cmp	r3, #64	; 0x40
 80069ca:	f040 80b1 	bne.w	8006b30 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 815c 	beq.w	8006c9c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ee:	429a      	cmp	r2, r3
 80069f0:	f080 8154 	bcs.w	8006c9c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	f000 8085 	beq.w	8006b14 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1da      	bne.n	8006a0a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e1      	bne.n	8006a54 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ab4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ab6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006aba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e3      	bne.n	8006a90 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae4:	f023 0310 	bic.w	r3, r3, #16
 8006ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006af8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e4      	bne.n	8006ad4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fc faf3 	bl	80030fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f8c9 	bl	8006cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b2e:	e0b5      	b.n	8006c9c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80a7 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80a2 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e4      	bne.n	8006b5c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e3      	bne.n	8006b92 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f023 0310 	bic.w	r3, r3, #16
 8006bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	69b9      	ldr	r1, [r7, #24]
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e4      	bne.n	8006bdc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f851 	bl	8006cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c1e:	e03f      	b.n	8006ca0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00e      	beq.n	8006c4a <HAL_UART_IRQHandler+0x55a>
 8006c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 ff98 	bl	8007b78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c48:	e02d      	b.n	8006ca6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00e      	beq.n	8006c74 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d01c      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
    }
    return;
 8006c72:	e017      	b.n	8006ca4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d012      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x5b6>
 8006c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00c      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fd86 	bl	800779e <UART_EndTransmit_IT>
    return;
 8006c92:	e008      	b.n	8006ca6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006c94:	bf00      	nop
 8006c96:	e006      	b.n	8006ca6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006c98:	bf00      	nop
 8006c9a:	e004      	b.n	8006ca6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006c9c:	bf00      	nop
 8006c9e:	e002      	b.n	8006ca6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006ca0:	bf00      	nop
 8006ca2:	e000      	b.n	8006ca6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006ca4:	bf00      	nop
  }

}
 8006ca6:	37e8      	adds	r7, #232	; 0xe8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4baa      	ldr	r3, [pc, #680]	; (8006fac <UART_SetConfig+0x2d4>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	6979      	ldr	r1, [r7, #20]
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a98      	ldr	r2, [pc, #608]	; (8006fb0 <UART_SetConfig+0x2d8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d120      	bne.n	8006d96 <UART_SetConfig+0xbe>
 8006d54:	4b97      	ldr	r3, [pc, #604]	; (8006fb4 <UART_SetConfig+0x2dc>)
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d817      	bhi.n	8006d90 <UART_SetConfig+0xb8>
 8006d60:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x90>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006d79 	.word	0x08006d79
 8006d6c:	08006d85 	.word	0x08006d85
 8006d70:	08006d8b 	.word	0x08006d8b
 8006d74:	08006d7f 	.word	0x08006d7f
 8006d78:	2301      	movs	r3, #1
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e0b5      	b.n	8006eea <UART_SetConfig+0x212>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e0b2      	b.n	8006eea <UART_SetConfig+0x212>
 8006d84:	2304      	movs	r3, #4
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e0af      	b.n	8006eea <UART_SetConfig+0x212>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e0ac      	b.n	8006eea <UART_SetConfig+0x212>
 8006d90:	2310      	movs	r3, #16
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e0a9      	b.n	8006eea <UART_SetConfig+0x212>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a87      	ldr	r2, [pc, #540]	; (8006fb8 <UART_SetConfig+0x2e0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d124      	bne.n	8006dea <UART_SetConfig+0x112>
 8006da0:	4b84      	ldr	r3, [pc, #528]	; (8006fb4 <UART_SetConfig+0x2dc>)
 8006da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dac:	d011      	beq.n	8006dd2 <UART_SetConfig+0xfa>
 8006dae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006db2:	d817      	bhi.n	8006de4 <UART_SetConfig+0x10c>
 8006db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db8:	d011      	beq.n	8006dde <UART_SetConfig+0x106>
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dbe:	d811      	bhi.n	8006de4 <UART_SetConfig+0x10c>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <UART_SetConfig+0xf4>
 8006dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc8:	d006      	beq.n	8006dd8 <UART_SetConfig+0x100>
 8006dca:	e00b      	b.n	8006de4 <UART_SetConfig+0x10c>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e08b      	b.n	8006eea <UART_SetConfig+0x212>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e088      	b.n	8006eea <UART_SetConfig+0x212>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e085      	b.n	8006eea <UART_SetConfig+0x212>
 8006dde:	2308      	movs	r3, #8
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e082      	b.n	8006eea <UART_SetConfig+0x212>
 8006de4:	2310      	movs	r3, #16
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e07f      	b.n	8006eea <UART_SetConfig+0x212>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a73      	ldr	r2, [pc, #460]	; (8006fbc <UART_SetConfig+0x2e4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d124      	bne.n	8006e3e <UART_SetConfig+0x166>
 8006df4:	4b6f      	ldr	r3, [pc, #444]	; (8006fb4 <UART_SetConfig+0x2dc>)
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006dfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e00:	d011      	beq.n	8006e26 <UART_SetConfig+0x14e>
 8006e02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e06:	d817      	bhi.n	8006e38 <UART_SetConfig+0x160>
 8006e08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e0c:	d011      	beq.n	8006e32 <UART_SetConfig+0x15a>
 8006e0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e12:	d811      	bhi.n	8006e38 <UART_SetConfig+0x160>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <UART_SetConfig+0x148>
 8006e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e1c:	d006      	beq.n	8006e2c <UART_SetConfig+0x154>
 8006e1e:	e00b      	b.n	8006e38 <UART_SetConfig+0x160>
 8006e20:	2300      	movs	r3, #0
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e061      	b.n	8006eea <UART_SetConfig+0x212>
 8006e26:	2302      	movs	r3, #2
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e05e      	b.n	8006eea <UART_SetConfig+0x212>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e05b      	b.n	8006eea <UART_SetConfig+0x212>
 8006e32:	2308      	movs	r3, #8
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e058      	b.n	8006eea <UART_SetConfig+0x212>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e055      	b.n	8006eea <UART_SetConfig+0x212>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a5f      	ldr	r2, [pc, #380]	; (8006fc0 <UART_SetConfig+0x2e8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d124      	bne.n	8006e92 <UART_SetConfig+0x1ba>
 8006e48:	4b5a      	ldr	r3, [pc, #360]	; (8006fb4 <UART_SetConfig+0x2dc>)
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e54:	d011      	beq.n	8006e7a <UART_SetConfig+0x1a2>
 8006e56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e5a:	d817      	bhi.n	8006e8c <UART_SetConfig+0x1b4>
 8006e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e60:	d011      	beq.n	8006e86 <UART_SetConfig+0x1ae>
 8006e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e66:	d811      	bhi.n	8006e8c <UART_SetConfig+0x1b4>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <UART_SetConfig+0x19c>
 8006e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e70:	d006      	beq.n	8006e80 <UART_SetConfig+0x1a8>
 8006e72:	e00b      	b.n	8006e8c <UART_SetConfig+0x1b4>
 8006e74:	2300      	movs	r3, #0
 8006e76:	77fb      	strb	r3, [r7, #31]
 8006e78:	e037      	b.n	8006eea <UART_SetConfig+0x212>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	77fb      	strb	r3, [r7, #31]
 8006e7e:	e034      	b.n	8006eea <UART_SetConfig+0x212>
 8006e80:	2304      	movs	r3, #4
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e031      	b.n	8006eea <UART_SetConfig+0x212>
 8006e86:	2308      	movs	r3, #8
 8006e88:	77fb      	strb	r3, [r7, #31]
 8006e8a:	e02e      	b.n	8006eea <UART_SetConfig+0x212>
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	77fb      	strb	r3, [r7, #31]
 8006e90:	e02b      	b.n	8006eea <UART_SetConfig+0x212>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a4b      	ldr	r2, [pc, #300]	; (8006fc4 <UART_SetConfig+0x2ec>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d124      	bne.n	8006ee6 <UART_SetConfig+0x20e>
 8006e9c:	4b45      	ldr	r3, [pc, #276]	; (8006fb4 <UART_SetConfig+0x2dc>)
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006ea4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ea8:	d011      	beq.n	8006ece <UART_SetConfig+0x1f6>
 8006eaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006eae:	d817      	bhi.n	8006ee0 <UART_SetConfig+0x208>
 8006eb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eb4:	d011      	beq.n	8006eda <UART_SetConfig+0x202>
 8006eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eba:	d811      	bhi.n	8006ee0 <UART_SetConfig+0x208>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <UART_SetConfig+0x1f0>
 8006ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ec4:	d006      	beq.n	8006ed4 <UART_SetConfig+0x1fc>
 8006ec6:	e00b      	b.n	8006ee0 <UART_SetConfig+0x208>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e00d      	b.n	8006eea <UART_SetConfig+0x212>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e00a      	b.n	8006eea <UART_SetConfig+0x212>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e007      	b.n	8006eea <UART_SetConfig+0x212>
 8006eda:	2308      	movs	r3, #8
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e004      	b.n	8006eea <UART_SetConfig+0x212>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e001      	b.n	8006eea <UART_SetConfig+0x212>
 8006ee6:	2310      	movs	r3, #16
 8006ee8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef2:	d16b      	bne.n	8006fcc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006ef4:	7ffb      	ldrb	r3, [r7, #31]
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d826      	bhi.n	8006f48 <UART_SetConfig+0x270>
 8006efa:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x228>)
 8006efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f49 	.word	0x08006f49
 8006f10:	08006f3b 	.word	0x08006f3b
 8006f14:	08006f49 	.word	0x08006f49
 8006f18:	08006f49 	.word	0x08006f49
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	08006f43 	.word	0x08006f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fd fd30 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8006f28:	61b8      	str	r0, [r7, #24]
        break;
 8006f2a:	e012      	b.n	8006f52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fd fd4e 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 8006f30:	61b8      	str	r0, [r7, #24]
        break;
 8006f32:	e00e      	b.n	8006f52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f34:	4b24      	ldr	r3, [pc, #144]	; (8006fc8 <UART_SetConfig+0x2f0>)
 8006f36:	61bb      	str	r3, [r7, #24]
        break;
 8006f38:	e00b      	b.n	8006f52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3a:	f7fd fcaf 	bl	800489c <HAL_RCC_GetSysClockFreq>
 8006f3e:	61b8      	str	r0, [r7, #24]
        break;
 8006f40:	e007      	b.n	8006f52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f42:	2320      	movs	r3, #32
 8006f44:	61bb      	str	r3, [r7, #24]
        break;
 8006f46:	e004      	b.n	8006f52 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	77bb      	strb	r3, [r7, #30]
        break;
 8006f50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8084 	beq.w	8007062 <UART_SetConfig+0x38a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	005a      	lsls	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b0f      	cmp	r3, #15
 8006f76:	d916      	bls.n	8006fa6 <UART_SetConfig+0x2ce>
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7e:	d212      	bcs.n	8006fa6 <UART_SetConfig+0x2ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f023 030f 	bic.w	r3, r3, #15
 8006f88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	89fb      	ldrh	r3, [r7, #14]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	89fa      	ldrh	r2, [r7, #14]
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	e05d      	b.n	8007062 <UART_SetConfig+0x38a>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	77bb      	strb	r3, [r7, #30]
 8006faa:	e05a      	b.n	8007062 <UART_SetConfig+0x38a>
 8006fac:	efff69f3 	.word	0xefff69f3
 8006fb0:	40013800 	.word	0x40013800
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	40004400 	.word	0x40004400
 8006fbc:	40004800 	.word	0x40004800
 8006fc0:	40004c00 	.word	0x40004c00
 8006fc4:	40005000 	.word	0x40005000
 8006fc8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fcc:	7ffb      	ldrb	r3, [r7, #31]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d826      	bhi.n	8007020 <UART_SetConfig+0x348>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <UART_SetConfig+0x300>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08006ffd 	.word	0x08006ffd
 8006fdc:	08007005 	.word	0x08007005
 8006fe0:	0800700d 	.word	0x0800700d
 8006fe4:	08007021 	.word	0x08007021
 8006fe8:	08007013 	.word	0x08007013
 8006fec:	08007021 	.word	0x08007021
 8006ff0:	08007021 	.word	0x08007021
 8006ff4:	08007021 	.word	0x08007021
 8006ff8:	0800701b 	.word	0x0800701b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ffc:	f7fd fcc4 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8007000:	61b8      	str	r0, [r7, #24]
        break;
 8007002:	e012      	b.n	800702a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007004:	f7fd fce2 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 8007008:	61b8      	str	r0, [r7, #24]
        break;
 800700a:	e00e      	b.n	800702a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800700c:	4b1a      	ldr	r3, [pc, #104]	; (8007078 <UART_SetConfig+0x3a0>)
 800700e:	61bb      	str	r3, [r7, #24]
        break;
 8007010:	e00b      	b.n	800702a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007012:	f7fd fc43 	bl	800489c <HAL_RCC_GetSysClockFreq>
 8007016:	61b8      	str	r0, [r7, #24]
        break;
 8007018:	e007      	b.n	800702a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701a:	2320      	movs	r3, #32
 800701c:	61bb      	str	r3, [r7, #24]
        break;
 800701e:	e004      	b.n	800702a <UART_SetConfig+0x352>
      default:
        pclk = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	77bb      	strb	r3, [r7, #30]
        break;
 8007028:	bf00      	nop
    }

    if (pclk != 0U)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d018      	beq.n	8007062 <UART_SetConfig+0x38a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	085a      	lsrs	r2, r3, #1
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	441a      	add	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007042:	b29b      	uxth	r3, r3
 8007044:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b0f      	cmp	r3, #15
 800704a:	d908      	bls.n	800705e <UART_SetConfig+0x386>
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007052:	d204      	bcs.n	800705e <UART_SetConfig+0x386>
      {
        huart->Instance->BRR = usartdiv;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	60da      	str	r2, [r3, #12]
 800705c:	e001      	b.n	8007062 <UART_SetConfig+0x38a>
      }
      else
      {
        ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800706e:	7fbb      	ldrb	r3, [r7, #30]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3720      	adds	r7, #32
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	007a1200 	.word	0x007a1200

0800707c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01a      	beq.n	8007192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717a:	d10a      	bne.n	8007192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071d0:	f7fb fe52 	bl	8002e78 <HAL_GetTick>
 80071d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d10e      	bne.n	8007202 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f82d 	bl	8007252 <UART_WaitOnFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e023      	b.n	800724a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b04      	cmp	r3, #4
 800720e:	d10e      	bne.n	800722e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f817 	bl	8007252 <UART_WaitOnFlagUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e00d      	b.n	800724a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b09c      	sub	sp, #112	; 0x70
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	4613      	mov	r3, r2
 8007260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007262:	e0a5      	b.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	f000 80a1 	beq.w	80073b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726e:	f7fb fe03 	bl	8002e78 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800727a:	429a      	cmp	r2, r3
 800727c:	d302      	bcc.n	8007284 <UART_WaitOnFlagUntilTimeout+0x32>
 800727e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007280:	2b00      	cmp	r3, #0
 8007282:	d13e      	bne.n	8007302 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007298:	667b      	str	r3, [r7, #100]	; 0x64
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e6      	bne.n	8007284 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	663b      	str	r3, [r7, #96]	; 0x60
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3308      	adds	r3, #8
 80072d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80072d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e5      	bne.n	80072b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2220      	movs	r2, #32
 80072ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e067      	b.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d04f      	beq.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731e:	d147      	bne.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007328:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800733e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007348:	637b      	str	r3, [r7, #52]	; 0x34
 800734a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800734e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e6      	bne.n	800732a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	613b      	str	r3, [r7, #16]
   return(result);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	66bb      	str	r3, [r7, #104]	; 0x68
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800737c:	623a      	str	r2, [r7, #32]
 800737e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	69f9      	ldr	r1, [r7, #28]
 8007382:	6a3a      	ldr	r2, [r7, #32]
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	61bb      	str	r3, [r7, #24]
   return(result);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e5      	bne.n	800735c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2220      	movs	r2, #32
 80073a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e010      	b.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4013      	ands	r3, r2
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	429a      	cmp	r2, r3
 80073be:	bf0c      	ite	eq
 80073c0:	2301      	moveq	r3, #1
 80073c2:	2300      	movne	r3, #0
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	461a      	mov	r2, r3
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	f43f af4a 	beq.w	8007264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3770      	adds	r7, #112	; 0x70
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073dc:	b480      	push	{r7}
 80073de:	b091      	sub	sp, #68	; 0x44
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	88fa      	ldrh	r2, [r7, #6]
 80073fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740e:	d10e      	bne.n	800742e <UART_Start_Receive_IT+0x52>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d105      	bne.n	8007424 <UART_Start_Receive_IT+0x48>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800741e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007422:	e02d      	b.n	8007480 <UART_Start_Receive_IT+0xa4>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	22ff      	movs	r2, #255	; 0xff
 8007428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800742c:	e028      	b.n	8007480 <UART_Start_Receive_IT+0xa4>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10d      	bne.n	8007452 <UART_Start_Receive_IT+0x76>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <UART_Start_Receive_IT+0x6c>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	22ff      	movs	r2, #255	; 0xff
 8007442:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007446:	e01b      	b.n	8007480 <UART_Start_Receive_IT+0xa4>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	227f      	movs	r2, #127	; 0x7f
 800744c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007450:	e016      	b.n	8007480 <UART_Start_Receive_IT+0xa4>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800745a:	d10d      	bne.n	8007478 <UART_Start_Receive_IT+0x9c>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <UART_Start_Receive_IT+0x92>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	227f      	movs	r2, #127	; 0x7f
 8007468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800746c:	e008      	b.n	8007480 <UART_Start_Receive_IT+0xa4>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	223f      	movs	r2, #63	; 0x3f
 8007472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007476:	e003      	b.n	8007480 <UART_Start_Receive_IT+0xa4>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2222      	movs	r2, #34	; 0x22
 800748c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074ae:	637a      	str	r2, [r7, #52]	; 0x34
 80074b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e5      	bne.n	800748e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ca:	d107      	bne.n	80074dc <UART_Start_Receive_IT+0x100>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d103      	bne.n	80074dc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4a15      	ldr	r2, [pc, #84]	; (800752c <UART_Start_Receive_IT+0x150>)
 80074d8:	665a      	str	r2, [r3, #100]	; 0x64
 80074da:	e002      	b.n	80074e2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4a14      	ldr	r2, [pc, #80]	; (8007530 <UART_Start_Receive_IT+0x154>)
 80074e0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	613b      	str	r3, [r7, #16]
   return(result);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80074fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	623b      	str	r3, [r7, #32]
 800750a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	69f9      	ldr	r1, [r7, #28]
 800750e:	6a3a      	ldr	r2, [r7, #32]
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	61bb      	str	r3, [r7, #24]
   return(result);
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e6      	bne.n	80074ea <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3744      	adds	r7, #68	; 0x44
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	0800794f 	.word	0x0800794f
 8007530:	080077f3 	.word	0x080077f3

08007534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b095      	sub	sp, #84	; 0x54
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	643b      	str	r3, [r7, #64]	; 0x40
 800755c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e6      	bne.n	800753c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	61fb      	str	r3, [r7, #28]
   return(result);
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	64bb      	str	r3, [r7, #72]	; 0x48
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800758e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e5      	bne.n	800756e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d118      	bne.n	80075dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f023 0310 	bic.w	r3, r3, #16
 80075be:	647b      	str	r3, [r7, #68]	; 0x44
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6979      	ldr	r1, [r7, #20]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	613b      	str	r3, [r7, #16]
   return(result);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e6      	bne.n	80075aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80075ee:	bf00      	nop
 80075f0:	3754      	adds	r7, #84	; 0x54
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff fb47 	bl	8006cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007626:	b480      	push	{r7}
 8007628:	b08f      	sub	sp, #60	; 0x3c
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007632:	2b21      	cmp	r3, #33	; 0x21
 8007634:	d14d      	bne.n	80076d2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d132      	bne.n	80076a8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007656:	637b      	str	r3, [r7, #52]	; 0x34
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007662:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e6      	bne.n	8007642 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	60bb      	str	r3, [r7, #8]
   return(result);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007688:	633b      	str	r3, [r7, #48]	; 0x30
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	61bb      	str	r3, [r7, #24]
 8007694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6979      	ldr	r1, [r7, #20]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	613b      	str	r3, [r7, #16]
   return(result);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e6      	bne.n	8007674 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80076a6:	e014      	b.n	80076d2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	b292      	uxth	r2, r2
 80076b4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80076d2:	bf00      	nop
 80076d4:	373c      	adds	r7, #60	; 0x3c
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076de:	b480      	push	{r7}
 80076e0:	b091      	sub	sp, #68	; 0x44
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ea:	2b21      	cmp	r3, #33	; 0x21
 80076ec:	d151      	bne.n	8007792 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d132      	bne.n	8007760 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	623b      	str	r3, [r7, #32]
   return(result);
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800770e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	633b      	str	r3, [r7, #48]	; 0x30
 800771a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800771e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	60fb      	str	r3, [r7, #12]
   return(result);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	69b9      	ldr	r1, [r7, #24]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	617b      	str	r3, [r7, #20]
   return(result);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e6      	bne.n	800772c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800775e:	e018      	b.n	8007792 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007764:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007768:	881a      	ldrh	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007772:	b292      	uxth	r2, r2
 8007774:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007792:	bf00      	nop
 8007794:	3744      	adds	r7, #68	; 0x44
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b088      	sub	sp, #32
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	61bb      	str	r3, [r7, #24]
 80077c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6979      	ldr	r1, [r7, #20]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	613b      	str	r3, [r7, #16]
   return(result);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7f9 fc43 	bl	8001070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ea:	bf00      	nop
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b096      	sub	sp, #88	; 0x58
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007800:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007808:	2b22      	cmp	r3, #34	; 0x22
 800780a:	f040 8094 	bne.w	8007936 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007814:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007818:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800781c:	b2d9      	uxtb	r1, r3
 800781e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007822:	b2da      	uxtb	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	400a      	ands	r2, r1
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d177      	bne.n	8007946 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786a:	653b      	str	r3, [r7, #80]	; 0x50
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007874:	647b      	str	r3, [r7, #68]	; 0x44
 8007876:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800787a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e6      	bne.n	8007856 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	623b      	str	r3, [r7, #32]
   return(result);
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078a8:	633a      	str	r2, [r7, #48]	; 0x30
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e5      	bne.n	8007888 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d12e      	bne.n	800792e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 0310 	bic.w	r3, r3, #16
 80078ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	69b9      	ldr	r1, [r7, #24]
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	617b      	str	r3, [r7, #20]
   return(result);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e6      	bne.n	80078d6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b10      	cmp	r3, #16
 8007914:	d103      	bne.n	800791e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2210      	movs	r2, #16
 800791c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff f9ca 	bl	8006cc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800792c:	e00b      	b.n	8007946 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7f9 fba8 	bl	8001084 <HAL_UART_RxCpltCallback>
}
 8007934:	e007      	b.n	8007946 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0208 	orr.w	r2, r2, #8
 8007944:	619a      	str	r2, [r3, #24]
}
 8007946:	bf00      	nop
 8007948:	3758      	adds	r7, #88	; 0x58
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b096      	sub	sp, #88	; 0x58
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800795c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007964:	2b22      	cmp	r3, #34	; 0x22
 8007966:	f040 8094 	bne.w	8007a92 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007970:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007978:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800797a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800797e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007982:	4013      	ands	r3, r2
 8007984:	b29a      	uxth	r2, r3
 8007986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007988:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d177      	bne.n	8007aa2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d0:	643b      	str	r3, [r7, #64]	; 0x40
 80079d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e6      	bne.n	80079b2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f023 0301 	bic.w	r3, r3, #1
 80079fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3308      	adds	r3, #8
 8007a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e5      	bne.n	80079e4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d12e      	bne.n	8007a8a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f023 0310 	bic.w	r3, r3, #16
 8007a46:	647b      	str	r3, [r7, #68]	; 0x44
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6979      	ldr	r1, [r7, #20]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e6      	bne.n	8007a32 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b10      	cmp	r3, #16
 8007a70:	d103      	bne.n	8007a7a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2210      	movs	r2, #16
 8007a78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff f91c 	bl	8006cc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a88:	e00b      	b.n	8007aa2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7f9 fafa 	bl	8001084 <HAL_UART_RxCpltCallback>
}
 8007a90:	e007      	b.n	8007aa2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0208 	orr.w	r2, r2, #8
 8007aa0:	619a      	str	r2, [r3, #24]
}
 8007aa2:	bf00      	nop
 8007aa4:	3758      	adds	r7, #88	; 0x58
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e056      	b.n	8007b70 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7fb f824 	bl	8002b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2224      	movs	r2, #36	; 0x24
 8007adc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0201 	bic.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff f8f2 	bl	8006cd8 <UART_SetConfig>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e038      	b.n	8007b70 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff fab8 	bl	800707c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b1a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	055b      	lsls	r3, r3, #21
 8007b34:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	041b      	lsls	r3, r3, #16
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8007b4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	6979      	ldr	r1, [r7, #20]
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0201 	orr.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7ff fb29 	bl	80071c0 <UART_CheckIdleState>
 8007b6e:	4603      	mov	r3, r0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <__libc_init_array>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	4d0d      	ldr	r5, [pc, #52]	; (8007bc4 <__libc_init_array+0x38>)
 8007b90:	4c0d      	ldr	r4, [pc, #52]	; (8007bc8 <__libc_init_array+0x3c>)
 8007b92:	1b64      	subs	r4, r4, r5
 8007b94:	10a4      	asrs	r4, r4, #2
 8007b96:	2600      	movs	r6, #0
 8007b98:	42a6      	cmp	r6, r4
 8007b9a:	d109      	bne.n	8007bb0 <__libc_init_array+0x24>
 8007b9c:	4d0b      	ldr	r5, [pc, #44]	; (8007bcc <__libc_init_array+0x40>)
 8007b9e:	4c0c      	ldr	r4, [pc, #48]	; (8007bd0 <__libc_init_array+0x44>)
 8007ba0:	f000 f820 	bl	8007be4 <_init>
 8007ba4:	1b64      	subs	r4, r4, r5
 8007ba6:	10a4      	asrs	r4, r4, #2
 8007ba8:	2600      	movs	r6, #0
 8007baa:	42a6      	cmp	r6, r4
 8007bac:	d105      	bne.n	8007bba <__libc_init_array+0x2e>
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb4:	4798      	blx	r3
 8007bb6:	3601      	adds	r6, #1
 8007bb8:	e7ee      	b.n	8007b98 <__libc_init_array+0xc>
 8007bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bbe:	4798      	blx	r3
 8007bc0:	3601      	adds	r6, #1
 8007bc2:	e7f2      	b.n	8007baa <__libc_init_array+0x1e>
 8007bc4:	08007c34 	.word	0x08007c34
 8007bc8:	08007c34 	.word	0x08007c34
 8007bcc:	08007c34 	.word	0x08007c34
 8007bd0:	08007c38 	.word	0x08007c38

08007bd4 <memset>:
 8007bd4:	4402      	add	r2, r0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d100      	bne.n	8007bde <memset+0xa>
 8007bdc:	4770      	bx	lr
 8007bde:	f803 1b01 	strb.w	r1, [r3], #1
 8007be2:	e7f9      	b.n	8007bd8 <memset+0x4>

08007be4 <_init>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr

08007bf0 <_fini>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr
